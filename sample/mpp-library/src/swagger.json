{
  "swagger": "2.0",
  "info": {
    "version": "0.16.25",
    "title": "Bridge Server API"
  },
  "host": "webservices.sagebridge.org",
  "basePath": "/",
  "securityDefinitions": {
    "BridgeSecurity": {
      "type": "apiKey",
      "in": "header",
      "name": "Bridge-Session"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "parameters": {
    "assessmentId": {
      "name": "assessmentId",
      "description": "The identifier for a stream of assessment revisions",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "cacheKey": {
      "name": "cacheKey",
      "description": "Cache key",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "consents": {
      "name": "consents",
      "description": "Should consent histories be included with this participant record?",
      "required": false,
      "in": "query",
      "type": "boolean"
    },
    "externalId": {
      "name": "externalId",
      "description": "User's external ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "synapseUserId": {
      "name": "synapseUserId",
      "description": "User's Synapse user ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "moduleId": {
      "name": "moduleId",
      "description": "Unique ID of the module.",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "moduleVersion": {
      "name": "moduleVersion",
      "description": "Module version.",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "reportId": {
      "name": "reportId",
      "description": "Report ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "schemaId": {
      "name": "schemaId",
      "description": "Upload schema ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "taskId": {
      "name": "taskId",
      "description": "Task ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "revision": {
      "name": "revision",
      "description": "Revision number",
      "required": true,
      "in": "path",
      "type": "integer",
      "format": "int64"
    },
    "scheduleId": {
      "name": "scheduleId",
      "description": "Scheduler identifier",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "schedulePlanGuid": {
      "name": "schedulePlanGuid",
      "description": "Schedule plan GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "subpopulationGuid": {
      "name": "subpopulationGuid",
      "description": "Subpopulation GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "appId": {
      "name": "appId",
      "description": "App ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "recordId": {
      "name": "recordId",
      "description": "Health data record ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "tag": {
      "name": "tag",
      "required": false,
      "in": "query",
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "multi",
      "description": "One or more tags. Every resource that has at least one of the tags will be returned (resources do not need to match all tags)."
    },
    "uploadId": {
      "name": "uploadId",
      "description": "Upload ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "userId": {
      "name": "userId",
      "description": "User ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "surveyGuid": {
      "name": "surveyGuid",
      "description": "Survey GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "createdOn": {
      "name": "createdOn",
      "description": "Created on timestamp (ISO 8601)",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "date-time"
    },
    "createdOnStart": {
      "name": "createdOnStart",
      "description": "Start time (ISO 8601) for a createdOn date-time range",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "createdOnEnd": {
      "name": "createdOnEnd",
      "description": "End time (ISO 8601) for a createdOn date-time range",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "newSchemaRev": {
      "name": "newSchemaRev",
      "description": "Should a new schema revision be created?",
      "required": false,
      "in": "query",
      "type": "boolean"
    },
    "identifier": {
      "name": "identifier",
      "description": "identifier",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "startDate": {
      "name": "startDate",
      "in": "query",
      "description": "The first day to include in reports that are returned",
      "type": "string",
      "format": "date",
      "required": true
    },
    "endDate": {
      "name": "endDate",
      "in": "query",
      "description": "The last day to include in reports that are returned",
      "type": "string",
      "format": "date",
      "required": true
    },
    "startTime": {
      "name": "startTime",
      "in": "query",
      "type": "string",
      "format": "date-time",
      "required": true
    },
    "endTime": {
      "name": "endTime",
      "in": "query",
      "type": "string",
      "format": "date-time",
      "required": true
    },
    "startTimeOpt": {
      "name": "startTime",
      "in": "query",
      "description": "The first day to include in reports that are returned",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "endTimeOpt": {
      "name": "endTime",
      "in": "query",
      "description": "The last day to include in reports that are returned",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "pageSize": {
      "name": "pageSize",
      "description": "maximum number of records in each returned page",
      "in": "query",
      "type": "integer",
      "format": "int32",
      "required": false,
      "default": 50,
      "maximum": 100
    },
    "offsetBy": {
      "name": "offsetBy",
      "description": "next page start offset for pagination",
      "in": "query",
      "type": "integer",
      "format": "int32",
      "default": 0,
      "required": false
    },
    "offsetKey": {
      "name": "offsetKey",
      "description": "next page start key for pagination",
      "in": "query",
      "type": "string",
      "required": false
    },
    "guid": {
      "name": "guid",
      "description": "A guid",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "activityGuid": {
      "name": "activityGuid",
      "description": "Activity GUID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "scheduledOnStart": {
      "name": "scheduledOnStart",
      "in": "query",
      "description": "Activities returned are at or after the timestamp. If scheduledOnStart is \nprovided, scheduledOnEnd must be provided, and vice versa. Default range is \n4 days in the future to 10 days in the past.\n",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "scheduledOnEnd": {
      "name": "scheduledOnEnd",
      "in": "query",
      "description": "Activities returned are at or before the timestamp. If scheduledOnEnd is \nprovided, scheduledOnStart must be provided, and vice versa. Default range is \n4 days in the future to 10 days in the past.\n",
      "type": "string",
      "format": "date-time",
      "required": false
    },
    "emailFilter": {
      "name": "emailFilter",
      "description": "A string (can be a substring of an email address) to filter returned records against.\n",
      "in": "query",
      "type": "string",
      "required": false
    },
    "phoneFilter": {
      "name": "phoneFilter",
      "description": "A string (can be a substring of a phone number) to filter returned records against.\n",
      "in": "query",
      "type": "string",
      "required": false
    },
    "vendorId": {
      "name": "vendorId",
      "description": "OAuth 2.0 provider ID",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "healthCode": {
      "name": "healthCode",
      "description": "User health code",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "physical": {
      "name": "physical",
      "description": "Physically delete this resource? (administrators only; this is always false for developers)",
      "default": false,
      "required": false,
      "in": "query",
      "type": "boolean"
    },
    "includeDeleted": {
      "name": "includeDeleted",
      "description": "Should deleted items be returned in results?",
      "required": false,
      "in": "query",
      "default": false,
      "type": "boolean"
    },
    "mostrecent": {
      "name": "mostrecent",
      "in": "query",
      "type": "boolean",
      "required": false,
      "default": true,
      "description": "True to get only the most recent versions. If combined with published=true, then this will return the most recent published versions. Cannot be combined with where. Defaults to true.\n"
    },
    "name": {
      "name": "name",
      "in": "query",
      "type": "string",
      "required": false,
      "description": "String to match anywhere in the name field of the shared module record."
    },
    "notes": {
      "name": "notes",
      "in": "query",
      "type": "string",
      "required": false,
      "description": "String to match anywhere in the notes field of the shared module record."
    },
    "published": {
      "name": "published",
      "in": "query",
      "type": "boolean",
      "required": false,
      "default": false,
      "description": "Should the shared module record be published?"
    },
    "id": {
      "name": "id",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "An identifier"
    },
    "tags": {
      "name": "tags",
      "in": "query",
      "type": "string",
      "required": false,
      "description": "Comma-delimited list of tags. If specified, only query results that match one or more tags (not necessarily all tags) are returned. If not specified, returns all query results.\n"
    },
    "tagValue": {
      "name": "tagValue",
      "description": "A tag value",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "templateType": {
      "name": "type",
      "in": "query",
      "type": "string",
      "enum": [
        "email_account_exists",
        "email_app_install_link",
        "email_reset_password",
        "email_sign_in",
        "email_signed_consent",
        "email_verify_email",
        "sms_account_exists",
        "sms_app_install_link",
        "sms_phone_sign_in",
        "sms_reset_password",
        "sms_signed_consent",
        "sms_verify_phone"
      ]
    },
    "category": {
      "name": "category",
      "in": "query",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "customization_options",
          "data_repository",
          "science_documentation",
          "developer_documentation",
          "license",
          "publication",
          "release_note",
          "sample_app",
          "sample_data",
          "screenshot",
          "see_also",
          "used_in_study",
          "website",
          "other"
        ]
      },
      "collectionFormat": "multi",
      "description": "One or more category values. Searches specifying more than one category will return a resource if it matches *any* of the categories given (it does not need to match all of them)."
    },
    "minRevision": {
      "name": "minRevision",
      "in": "query",
      "type": "integer",
      "format": "int32",
      "description": "If this parameter is set, only resoures with a `createdAtRevision` value >= minRevision will be returned from the API (if the parameter is left null, all resources will be considered to match)."
    },
    "maxRevision": {
      "name": "maxRevision",
      "in": "query",
      "type": "integer",
      "format": "int32",
      "description": "If this parameter is set, only resoures with a `createdAtRevision` value <= maxRevision will be returned from the API (if the parameter is left null, all resources will be considered to match)."
    }
  },
  "paths": {
    "/v3/auth/signIn": {
      "post": {
        "operationId": "signIn",
        "tags": [
          "Authentication"
        ],
        "description": "Send user credentials to authenticate with the Bridge server. Whether the server returns \n200 (user successfully authenticated) or 412 (user has authenticated but has not yet \nconsented to participate in research), the response will contain a user session. \n\nThe session contains the \"sessionToken\" property with the token that must be used to interact \nwith other endpoints of the service. That value should be sent via the request header \n\"Bridge-Session\" to any endpoint requiring authentication. The Bridge session token is \ncurrently valid for 12 hours. However, your client application should be prepared to \nre-authenticate on any call if it returns 401 (\"Not authenticated\"), as the session may \nexpire before this period for unforeseen reasons, like a server failure.\n\nIf the user has not yet consented, the session also contains detailed information about the \nconsent (or consents) the user must submit a signature for, before they will be allowed to \nmake further calls to Bridge. You can also implement logic to re-consent to updated consents, \nif desired.\n\nNote that a 412 response will not be sent for any account that has an administrative role.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "404": {
            "description": "Study doesn't exist, credentials incorrect, user does not exist, or email/phone have not been verified.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/reauth": {
      "post": {
        "operationId": "reauthenticate",
        "tags": [
          "Authentication"
        ],
        "description": "Using the reauthentication token supplied with a new session, request a new session from \nthe server. Updates the session's timeout value, and issues a new reauthentication token. \nReauthentication tokens can only be used one time. \n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Information to authenticate with the server",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "description": "Authentication has failed",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "404": {
            "description": "Study doesn't exist, credentials incorrect, user does not exist, or email/phone have not been verified.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/requestResetPassword": {
      "post": {
        "operationId": "requestResetPassword",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Will send an email or SMS message with a confirmation token \nthat can be used by the client to verify the credential. In the case of the email message, \nand URL is included by default that loads a web page which will complete the confirmation. If \nthe user account does not exist, this method will still return 200 in order to prevent \"account \nenumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Email or phone information information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resetPassword": {
      "post": {
        "operationId": "resetPassword",
        "tags": [
          "Authentication"
        ],
        "description": "This API will not normally be called directly by a client. A user will receive an email \ntriggered by the /requestResetPassword call, with an URL to open up a password reset page \non the Bridge server. That page submits the new password along with a one-time session \ntoken (\"sptoken\") to this endpoint, in order to change the password. The template for the \nemail that is sent can be configured as part of a Study through the management APIs. If \nthe token is not provided or is expired, this request will fail. If the user account does not \nexist, this method will still return 200 in order to prevent \"account enumeration\" security \nbreaches.\n",
        "parameters": [
          {
            "name": "PasswordReset",
            "in": "body",
            "description": "Password reset token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PasswordReset"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "400": {
            "$ref": "#/responses/400"
          }
        }
      }
    },
    "/v3/auth/signUp": {
      "post": {
        "operationId": "signUp",
        "tags": [
          "Authentication"
        ],
        "description": "If an app uses email addresses to identify account holders, the user will normally be sent \nan email with a link to verify his or her email address before the account will be activated. \nIf an account exists with the given email or phone number, this method will still return 201 \nin order to prevent \"account enumeration\" security breaches. When this happens, an \"account \nalready exists\" email will be sent to the account holder, notifying them that another attempt \nwas made to create an account with their email or phone number.\n\nOnly basic credentials are necessary to sign up (email or phone number, and appId), but all the \ninformation that can be provided for a participant's account, can be submitted as part of sign up.\n",
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "Sign up information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          }
        }
      }
    },
    "/v3/auth/verifyEmail": {
      "post": {
        "operationId": "verifyEmail",
        "tags": [
          "Authentication"
        ],
        "description": "An email will be sent to the user with a link that when opened, will confirm the validity of \nthis email address. For more control over the experience, the client could intercept this \nlink, extract the sptoken, and complete this verification call itself.\n",
        "parameters": [
          {
            "name": "Verification",
            "in": "body",
            "description": "verification token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Verification"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/verifyPhone": {
      "post": {
        "operationId": "verifyPhone",
        "tags": [
          "Authentication"
        ],
        "description": "Using the sptoken extracted from a link in an SMS message, or entered by the user as seen in \nan SMS message, call this method to confirm the validity of the phone number.\n",
        "parameters": [
          {
            "name": "Verification",
            "in": "body",
            "description": "verification token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Verification"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resendEmailVerification": {
      "post": {
        "operationId": "resendEmailVerification",
        "tags": [
          "Authentication"
        ],
        "description": "Resend an email to the provided email address asking the address holder to verify their \naddress. Whether the email address has been registered or not through sign up, this method\nwill return 200 in order to prevent \"account enumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "Identifier",
            "in": "body",
            "description": "Email address of participant (phone number is ignored).",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/resendPhoneVerification": {
      "post": {
        "operationId": "resendPhoneVerification",
        "tags": [
          "Authentication"
        ],
        "description": "Resend an SMS message to the provided phone number asking the recipient to verify their \nphone number. Whether the phone has been registered or not through sign up, this method\nwill return 200 in order to prevent \"account enumeration\" security breaches.\n",
        "parameters": [
          {
            "name": "Identifier",
            "in": "body",
            "description": "Phone number of participant (email address is ignored).",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Identifier"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          }
        }
      }
    },
    "/v3/auth/email": {
      "post": {
        "operationId": "requestEmailSignIn",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Will send an email with a link that can be used to call \nthe server and generate a session. This link is intended to be intercepted by an app on \nthe phone, and redirected to a workflow in the app.\n",
        "parameters": [
          {
            "name": "EmailSignInRequest",
            "in": "body",
            "description": "Information to trigger an email for sign in.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailSignInRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "403": {
            "description": "This feature has not been enabled for the app"
          },
          "404": {
            "description": "App not found",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "429": {
            "description": "Rate limit exceeded for requests to receive a sign in email",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/email/signIn": {
      "post": {
        "operationId": "signInViaEmail",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Using the token supplied via a link in an email, request \na session from the server. Not enabled for all studies.\n",
        "parameters": [
          {
            "name": "EmailSignIn",
            "in": "body",
            "description": "Information to authenticate with the server",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailSignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "description": "Authentication has failed",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "404": {
            "description": "Study or account does not exist",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/phone": {
      "post": {
        "operationId": "requestPhoneSignIn",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Will send an SMS message with a code that can be used to \ncall the server and generate a session. \n",
        "parameters": [
          {
            "name": "PhoneSignInRequest",
            "in": "body",
            "description": "Information to trigger an SMS message for sign in.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhoneSignInRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "404": {
            "description": "Study not found",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/phone/signIn": {
      "post": {
        "operationId": "signInViaPhone",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Using the token supplied via an SMS message sent to the user, request a session from the server.\n",
        "parameters": [
          {
            "name": "PhoneSignIn",
            "in": "body",
            "description": "Information to authenticate with the server",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Using a token supplied in an SMS message authenticate with the server. The token remains valid, once sent, for 5 minutes. \n",
              "required": [
                "appId",
                "phone",
                "token"
              ],
              "properties": {
                "appId": {
                  "type": "string",
                  "description": "The identifier of the participant's app."
                },
                "phone": {
                  "$ref": "#/definitions/Phone"
                },
                "token": {
                  "type": "string",
                  "description": "The token that was sent to the user via SMS, that needs to be entered into the application so it can be sent back to authenticate.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "PhoneSignIn",
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "description": "Authentication has failed",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "404": {
            "description": "Study or account does not exist",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/oauth/signIn": {
      "post": {
        "operationId": "signInWithOauthToken",
        "tags": [
          "Authentication"
        ],
        "description": "Does not require authentication. Using the token returned from a successful authentication via an OAuth server, request a session from the Bridge. The caller will need to have associated an account in the target Bridge app with the account being used to authenticate.\n",
        "parameters": [
          {
            "name": "OAuthAuthorizationToken",
            "in": "body",
            "description": "The authorization token sent from an OAuth server, used to sign in.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OAuthAuthorizationToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "description": "Authentication has failed",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "404": {
            "description": "Study or account does not exist",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/app": {
      "post": {
        "operationId": "changeApp",
        "tags": [
          "Apps",
          "Authentication"
        ],
        "description": "Change the app currently associate with the signed in caller's session. This app must have a Bridge \naccount with the same Synapse user ID as the caller's current session account. If the caller is a \ncross-app administrator (Sage only), any app can be selected. The only parameter required in the \nsignIn payload is the selected appId.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information (appId only)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher_admin"
          }
        }
      }
    },
    "/v3/oauth/{vendorId}": {
      "post": {
        "operationId": "requestOAuthAccessToken",
        "summary": "Request an access token from a given OAuth 2.0 provider.",
        "description": "Request an access token from a given OAuth 2.0 provider. The vendor ID must be defined \nfor the app. The authorization token is optional. If the server can, a request without an \nauthorization token will be refreshed with the provider and the access token will be returned. \nIf a grant has never been given or this request fails to get a valid grant, a 404 will be \nreturned. \n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/vendorId"
          },
          {
            "name": "OAuthAuthorizationToken",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OAuthAuthorizationToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuthAccessToken"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v4/auth/signIn": {
      "post": {
        "operationId": "signInV4",
        "tags": [
          "Authentication"
        ],
        "description": "Send user credentials to authenticate with the Bridge server. Whether the server returns \n200 (user successfully authenticated) or 412 (user has authenticated but has not yet \nconsented to participate in research), the response will contain a user session. \n\nThe session contains the \"sessionToken\" property with the token that must be used to interact \nwith other endpoints of the service. That value should be sent via the request header \n\"Bridge-Session\" to any endpoint requiring authentication. The Bridge session token is \ncurrently valid for 12 hours. However, your client application should be prepared to \nre-authenticate on any call if it returns 401 (\"Not authenticated\"), as the session may \nexpire before this period for unforeseen reasons, like a server failure.\n\nIf the user has not yet consented, the session also contains detailed information about the \nconsent (or consents) the user must submit a signature for, before they will be allowed to \nmake further calls to Bridge. You can also implement logic to re-consent to updated consents, \nif desired.\n\nNote that a 412 response will not be sent for any account that has an administrative role.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "403": {
            "description": "Credentials are correct, but user cannot establish a session because they have not verified their email address or phone number.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "404": {
            "description": "Credentials incorrect or the user does not exist",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v4/auth/signOut": {
      "post": {
        "operationId": "signOut",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete the user's session on the server. If the client does not provide the \nBridge-Session header, the endpoint returns 400 (Bad Request).\n",
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "400": {
            "$ref": "#/responses/400_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/auth/admin/signIn": {
      "post": {
        "operationId": "adminSignIn",
        "tags": [
          "_For Superadmins"
        ],
        "description": "Sign in using an administrative account. Administrative accounts must be created in the \nAPI app; account will be authenticated against this account but will be placed in the \napp that is submitted in the sign in request. Consent is not releent to amin accounts \nand is not checked.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          },
          "404": {
            "description": "Study doesn't exist, credentials incorrect, user does not exist, or email/phone have not been verified.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/auth/admin/app": {
      "post": {
        "operationId": "adminChangeApp",
        "tags": [
          "_For Superadmins"
        ],
        "description": "Change the app a super administrator is in. The only value that needs to be included in the request is the appId property.\n",
        "parameters": [
          {
            "name": "SignIn",
            "in": "body",
            "description": "Sign in information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignIn"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          },
          "404": {
            "description": "Study doesn't exist, credentials incorrect, user does not exist, or email/phone have not been verified.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "423": {
            "description": "Account has been disabled",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v1/apps": {
      "get": {
        "operationId": "getApps",
        "summary": "Get all apps The summary must be true if this call is made without authentication.",
        "tags": [
          "Apps",
          "Public",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "summary",
            "required": false,
            "in": "query",
            "type": "boolean",
            "description": "If true, anyone can call this endpoint and return a list of truncated app objects\n(name and ID only). Otherwise, caller must be an admin.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppList"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "post": {
        "operationId": "createApp",
        "summary": "Create a new app",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "App",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v1/apps/init": {
      "post": {
        "operationId": "createAppAndUsers",
        "summary": "Create a new app with administrators and users",
        "description": "Create a new app along with the access team and project in Synapse to receive data collected through Bridge. Assigns the Synapse users in the admin ID list to be administrators of the access team and project, and creates the users in the user IDs (users will receive an email confirmation from Synapse to complete account creation).\n",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "AppAndUsers",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AppAndUsers"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v1/apps/memberships": {
      "get": {
        "operationId": "getAppMemberships",
        "summary": "Get the list of apps that are accessible to the signed in user via a shared Synapse user ID",
        "description": "Return a summary of all apps that are accessible to the authenticated caller via a shared Synapse \nuser ID. If the caller is a cross-app administrator (Sage only), all apps are returned. These \napp objects contain only the app's name and identifier.\n",
        "tags": [
          "Apps",
          "Authentication"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher_admin"
          }
        }
      }
    },
    "/v1/apps/self": {
      "get": {
        "operationId": "getUsersApp",
        "summary": "Get an app",
        "description": "Get the app of the currently signed in user account.\n",
        "tags": [
          "Apps",
          "_For Developers",
          "_For Researchers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher_admin"
          }
        }
      },
      "post": {
        "operationId": "updateUsersApp",
        "summary": "Update an app",
        "description": "Update the app of the currently signed in developer account. This API only works for Developers \n(administrators should use the ForAdminsApi.updateApp() API).\n",
        "tags": [
          "Apps",
          "_For Developers",
          "_For Researchers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "App",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher_admin"
          }
        }
      }
    },
    "/v1/apps/{appId}": {
      "get": {
        "operationId": "getApp",
        "summary": "Get an app",
        "tags": [
          "_For Superadmins",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/App"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin_worker"
          }
        }
      },
      "post": {
        "operationId": "updateApp",
        "summary": "Update a app",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "name": "App",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/App"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "delete": {
        "operationId": "deleteApp",
        "summary": "Delete a app",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v1/apps/{appId}/emails/verify": {
      "post": {
        "operationId": "verifyEmailForApp",
        "summary": "Verifies the app's email",
        "description": "Verifies the app's email. Since this comes in from an email with a token, you don't need to be authenticated.\nThe token itself knows what app this is for.\n",
        "tags": [
          "Apps",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "name": "token",
            "description": "Email verification token",
            "required": true,
            "in": "query",
            "type": "string"
          },
          {
            "name": "type",
            "description": "Type of email that should resend email verification.",
            "required": true,
            "in": "query",
            "type": "string",
            "enum": [
              "consent_notification"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/apps/{appId}/appconfig": {
      "get": {
        "operationId": "getConfigForApp",
        "summary": "Get the config for the current version of the app making the request. \n",
        "description": "Although this call uses Bridge's common filtering framework (see https://developer.sagebridge.org/articles/study_design.html#filtering), the request does not require authentication, so only User-Agent and Accept-Language filtering criteria are used.\n",
        "tags": [
          "Apps",
          "Public",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfig"
            }
          }
        }
      }
    },
    "/v1/apps/{appId}/scheduleplans": {
      "get": {
        "operationId": "getSchedulePlansForApp",
        "summary": "Get schedule plans",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchedulePlanList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/self/publicKey": {
      "get": {
        "operationId": "getAppPublicCsmKey",
        "summary": "Get the public key CMS block for this app",
        "tags": [
          "Apps",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CmsPublicKey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/apps/self/emailStatus": {
      "get": {
        "operationId": "getAppEmailStatus",
        "summary": "SES email verification status",
        "description": "Consents will be emailed from the support email address you provide. Amazon \nSES will ask the holder of that address to confirm this is OK.\n",
        "tags": [
          "Apps",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailVerificationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      }
    },
    "/v1/apps/self/emails/resendVerify": {
      "post": {
        "operationId": "resendVerifyEmail",
        "summary": "Resends the verification email for the app's email.",
        "description": "Resends the verification email for the current app's email.\n",
        "tags": [
          "Apps",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "description": "Type of email that should resend email verification.",
            "required": true,
            "in": "query",
            "type": "string",
            "enum": [
              "consent_notification"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/apps/self/verifyEmail": {
      "post": {
        "operationId": "verifySenderEmail",
        "summary": "Trigger SES email verification process",
        "description": "Amazon SES will attempt to verify that it can send email from your support email address. \nIf that fails or expires, this API will trigger another request to verify.\n",
        "tags": [
          "Apps",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailVerificationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v1/apps/self/uploads": {
      "get": {
        "operationId": "getUploads",
        "summary": "Get uploads for the app",
        "tags": [
          "Apps",
          "Uploads",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v1/apps/self/synapseProject": {
      "post": {
        "operationId": "createSynapseProjectTeam",
        "summary": "Create new Synapse project and team",
        "description": "Create a new Synapse project and team for the provided Synapse user, and grant permissions to the Bridge exporter to export Bridge data into that app. This call also grants admin  permissions to the specified Synapse user for that project and team. You will need to create a Synapse user first, and provide that user's ID to this endpoint call.\n",
        "tags": [
          "Apps",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "String[]",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "description": "A list of synapse user IDs to add as admins of the created project and access team",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/apps/{appId}/surveys/published": {
      "get": {
        "operationId": "getAllPublishedSurveys",
        "summary": "Get the published surveys in an app",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/uploadschemas/{schemaId}/revisions/{revision}": {
      "get": {
        "operationId": "getSchemaRevision",
        "summary": "Get a schema revision from an app",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/reports/{identifier}": {
      "get": {
        "operationId": "getPublicStudyReportRecords",
        "summary": "Get public study report records",
        "description": "Get public study report records (no authentication is needed, but index for the report must be marked as \npublic or the server will return 404 for the report). Only study reports may be made public.\n",
        "tags": [
          "Study Reports",
          "Public"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          }
        }
      },
      "post": {
        "operationId": "saveReport",
        "summary": "save report for a study",
        "description": "Save a report for a specified study with arbitrary report id given by wokers into bridgePF.\n",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportData",
            "description": "Report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/uploads": {
      "get": {
        "operationId": "getUploadsForApp",
        "summary": "Get uploads for a specified app",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v1/apps/{appId}/users": {
      "post": {
        "operationId": "createUserInApp",
        "summary": "Create a new user in a given app",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "name": "SignUp",
            "in": "body",
            "description": "New user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants": {
      "get": {
        "operationId": "getParticipantsForApp",
        "summary": "Get a paged list of study participants for an app",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/emailFilter"
          },
          {
            "$ref": "#/parameters/phoneFilter"
          },
          {
            "$ref": "#/parameters/startTimeOpt"
          },
          {
            "$ref": "#/parameters/endTimeOpt"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountSummaryList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/search": {
      "post": {
        "operationId": "searchAccountSummariesForApp",
        "summary": "Search for account summaries (participants)",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "name": "AccountSummarySearch",
            "in": "body",
            "description": "Account summary search parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSummarySearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountSummaryList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}": {
      "get": {
        "operationId": "getParticipantByIdForApp",
        "summary": "Get a study participant (user) record in an app",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/healthCode:{healthCode}": {
      "get": {
        "operationId": "getParticipantByHealthCodeForApp",
        "summary": "Get a study participant (user) record in an app using the account's health code.",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/healthCode"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/externalId:{externalId}": {
      "get": {
        "operationId": "getParticipantByExternalIdForApp",
        "summary": "Get a study participant (user) record in an app using the account's external ID.",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/externalId"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/syn:{synapseUserId}": {
      "get": {
        "operationId": "getParticipantBySynapseUserIdForApp",
        "summary": "Get a study participant (user) record in an app using the account's Synapse user ID.",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/synapseUserId"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/reports/{reportId}": {
      "get": {
        "operationId": "getParticipantReportsForParticipant",
        "summary": "Get participant report records by date",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/reportId"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/sendSmsMessage": {
      "post": {
        "operationId": "sendSmsMessageToParticipantForApp",
        "summary": "Send an SMS message to a single participant",
        "description": "Send an SMS message to an individual participant (assuming they have a verified phone number). Do not use this method to notify a group of participants; create a topic, ask your users to subscribe to that topic, and send a message via that topic instead.\n",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "SmsTemplate",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SmsTemplate"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/activityEvents": {
      "get": {
        "operationId": "getActivityEventsForParticipantAndApp",
        "summary": "Get activity event records for participant",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityEventList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/activities/{activityGuid}": {
      "get": {
        "operationId": "getParticipantActivityHistoryForApp",
        "summary": "Get a study participant's history of activities",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/activityGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/activities/tasks/{taskId}": {
      "get": {
        "operationId": "getParticipantTaskHistoryForApp",
        "summary": "Get a study participant's history of a task",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/activities/surveys/{surveyGuid}": {
      "get": {
        "operationId": "getParticipantSurveyHistoryForApp",
        "summary": "Get a study participant's history of a survey",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/activities/compoundactivities/{taskId}": {
      "get": {
        "operationId": "getParticipantCompoundActivityHistoryForApp",
        "summary": "Get a study participant's history of a compound activity",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/participants/{userId}/requestInfo": {
      "get": {
        "operationId": "getRequestInfoForWorker",
        "summary": "Get information about the last request made by this participant",
        "description": "Retrieves information about the user agent headers and participant settings that were in \neffect the last time this participant contacted the Bridge server. Also provides the last \ntime activities were retrieved and uploads were sent back to the server.\n",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v2/apps/{appId}/participants/{userId}/reports/{reportId}": {
      "get": {
        "operationId": "getParticipantReportsForParticipantV2",
        "summary": "Get participant report records by date-time",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/reportId"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/oauth/{vendorId}": {
      "get": {
        "operationId": "getHealthCodesGrantingOAuthAccess",
        "summary": "Get the health codes of the accounts that have granted OAuth access through \na particular vendor.\n",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/vendorId"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorStringList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/apps/{appId}/oauth/{vendorId}/{healthCode}": {
      "get": {
        "operationId": "getOAuthAccessToken",
        "summary": "Get the access grant for a given account as specified by a health code. If \nthere is no grant, a 404 will be returned.\n",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/appId"
          },
          {
            "$ref": "#/parameters/vendorId"
          },
          {
            "$ref": "#/parameters/healthCode"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OAuthAccessToken"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    },
    "/v1/assessments": {
      "get": {
        "operationId": "getAssessments",
        "summary": "Get assessments in the app context.",
        "description": "This is a paged API that can be filtered by the categories and tags assigned to assessments. The most recent (highest) revision of each assessment is returned in the API.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "post": {
        "operationId": "createAssessment",
        "summary": "Create a new assessment.",
        "description": "This assessment must have a unique identifier in the app context (if the identifier is not unique, call the `createAssessmentRevision` API to create a new revision of an existing assessment). The assessment must specify one of the caller’s organizational IDs; this organization owns the new assessment and only members of that organization can update the assessment further.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "Assessment",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "501": {
            "description": "This endpoint has not been implemented for this app. It has been disabled, or not completely configured. \nThe caller cannot fix the call to succeed, but it is not an unexpected server error, it is intentional.\n",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v1/assessments/{guid}": {
      "get": {
        "operationId": "getAssessmentByGUID",
        "summary": "Get a specific assessment revision.",
        "description": "A GUID uniquely identifies a specific assessment revision.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "post": {
        "operationId": "updateAssessment",
        "summary": "Update an assessment revision.",
        "description": "A GUID uniquely identifies a specific assessment revision. Only members of the organization that own this assessment can update it. This operation returns the updated assessment revision.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "Assessment",
            "in": "body",
            "description": "Updated assessment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "delete": {
        "operationId": "deleteAssessment",
        "summary": "Delete an assessment revision.",
        "description": "A GUID uniquely identifies a specific assessment revision. Only developers who are members of the organization that owns the assessment may logically delete it, though a study admin may physically delete an assessment regardless of ownership.",
        "tags": [
          "Assessments",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v1/assessments/{guid}/config": {
      "get": {
        "operationId": "getAssessmentConfig",
        "summary": "Get the JSON config for this assessment",
        "tags": [
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "operationId": "updateAssessmentConfig",
        "summary": "Update the JSON config for this assessment",
        "tags": [
          "Assessments",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "AssessmentConfig",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AssessmentConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v1/assessments/{guid}/config/customize": {
      "post": {
        "operationId": "customizeAssessmentConfig",
        "summary": "Submit updates to the config that conform to the allowed customizations for the assessment. The object submitted to the server should be of the type `Map<String, Map<String, JsonNode>>`, where the first map associates a node identifier in the configuration to a map, and the second map associates one or more named properties of the node to a JsonNode update. This value can be of any type representable in JSON, since the server will persist it as part of the JSON configuration without type conversion (the update should still follow the schema of the configuration, or the client will not be able to interpret your configuration change).",
        "tags": [
          "Assessments",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "Customization update",
            "required": true,
            "in": "body",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v1/assessments/{guid}/publish": {
      "post": {
        "operationId": "publishAssessment",
        "summary": "Publish an assessment revision in the shared library.",
        "description": "If the identifier for the assessment does not currently exist in the shared library, this assessment will be created at revision 1. Otherwise, it will be published at the next highest revision number from the highest revision under that identifier. The method returns the *local* assessment as it has been updated to reflect its derivation from the new shared assessment (it should be identical to an assessment that was imported from the shared assessment back into the local app context). Members of the organization that owns the assessment can continue to edit the assessment in the shared library, and can publish later revisions of the assessment, however its configuration is immutable and other organizations cannot publish assessments with the same identifier.\n",
        "tags": [
          "Assessments",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "newIdentifier",
            "in": "query",
            "type": "string",
            "description": "Upon publishing this assessment, you can provide a new identifier for the assessment.",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/assessments/{guid}/revisions": {
      "get": {
        "operationId": "getAssessmentRevisionsByGUID",
        "summary": "Get the revisions of an assessment with a specific identifier.",
        "description": "Records are paged and returned with the highest revision number first.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "post": {
        "operationId": "createAssessmentRevision",
        "summary": "Create a new revision of an assessment.",
        "description": "The identifier of the assessment must already exist (and the revision number of this assessment must be unique). This operation returns the new assessment revision.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "Assessment",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/assessments/identifier:{identifier}": {
      "get": {
        "operationId": "getLatestAssessmentRevision",
        "summary": "Get the latest version of an assessment.",
        "description": "This revision is one with the “latest” (highest) revision number, using the assessment’s identifier.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/assessments/identifier:{identifier}/revisions": {
      "get": {
        "operationId": "getAssessmentRevisionsById",
        "summary": "Get the revisions for an assessment by its identifier.",
        "description": "These revisions are paged and ordered from highest to lowest revision number.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/assessments/identifier:{identifier}/revisions/{revision}": {
      "get": {
        "operationId": "getAssessmentById",
        "summary": "Get an assessment revision by identifier and revision number.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/assessments/identifier:{assessmentId}/resources": {
      "get": {
        "operationId": "getAssessmentResources",
        "summary": "Get the external resource links documenting an assessment",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/category"
          },
          {
            "$ref": "#/parameters/minRevision"
          },
          {
            "$ref": "#/parameters/maxRevision"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedExternalResourceList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createAssessmentResource",
        "summary": "Create a new external resource link documenting an assessment",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "name": "ExternalResource",
            "in": "body",
            "description": "Assessment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/assessments/identifier:{assessmentId}/resources/{guid}": {
      "get": {
        "operationId": "getAssessmentResource",
        "summary": "Get an assessment external resource description",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateAssessmentResource",
        "summary": "Update an external resource link documenting an assessment",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "ExternalResource",
            "in": "body",
            "description": "Assessment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAssessmentResource",
        "summary": "Delete an external resource link documenting an assessment",
        "tags": [
          "Assessments",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v1/assessments/identifier:{assessmentId}/resources/publish": {
      "post": {
        "operationId": "publishAssessmentResource",
        "summary": "Copy these resources to the shared assessments library.",
        "tags": [
          "_For Developers",
          "Assessments"
        ],
        "description": "The assessment these resources relate to must have been published at least one time to the shared library before the resources can be published. If the resource has already been published, it'll be updated with the local version.\n",
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "name": "External resource GUIDs",
            "in": "body",
            "description": "List of external resource GUIDs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalResourceList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/sharedassessments": {
      "get": {
        "operationId": "getSharedAssessments",
        "summary": "Get assessments in the shared library.",
        "description": "This is a paged API that can be filtered by the categories and tags assigned to assessments. The most recent revision of each assessment is returned.",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentList"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/sharedassessments/{guid}": {
      "get": {
        "operationId": "getSharedAssessmentByGUID",
        "summary": "Get an assessment revision.",
        "description": "A GUID uniquely identifies a specific assessment revision.",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "post": {
        "operationId": "updateSharedAssessment",
        "summary": "Update an assessment revision.",
        "description": "A GUID uniquely identifies a specific assessment revision. Only members of the organization that owned the assessment when it was published into the shared library of assessments can update the assessment in the shared library.",
        "tags": [
          "_For Developers",
          "Shared Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "Assessment",
            "in": "body",
            "description": "Updated assessment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      },
      "delete": {
        "operationId": "deleteSharedAssessment",
        "summary": "Delete an assessment revision.",
        "description": "A GUID uniquely identifies a specific assessment revision. Only cross-app administrators can delete a shared assessment (either logically or physically).",
        "tags": [
          "_For Superadmins",
          "Shared Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v1/sharedassessments/{guid}/config": {
      "get": {
        "operationId": "getSharedAssessmentConfig",
        "summary": "Get the configuration JSON for a shared assessmentapp context.",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentConfig"
            }
          }
        }
      }
    },
    "/v1/sharedassessments/{guid}/import": {
      "post": {
        "operationId": "importSharedAssessment",
        "summary": "Import an assessment revision into the local app context.",
        "description": "The assessment is copied into the local app context under the ownership of one of the caller’s organizations. If the identifier for the assessment does not currently exist in the app context, this assessment will be created at revision 1. Otherwise, it will be imported at the next highest revision number from the highest revision under that identifier. The method returns the *local* assessment that has been created by this import operation. This assessment is linked to the shared assessment and the configuration for the assessment cannot be updated without breaking the link (which might invalidate the scientific validation of the assessment). However, owners of the assessment can use the customization API to change some fields of the imported assessment configuration without breaking the link to the shared assessment.\n",
        "tags": [
          "Shared Assessments",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "ownerId",
            "description": "The organizational ID the assessment should be imported under as the owning organization of the assessment (only members of that organization will be able to edit the assessment, though all users in an app context can see and schedule the assessment).",
            "in": "query",
            "type": "string",
            "required": true
          },
          {
            "name": "newIdentifier",
            "in": "query",
            "type": "string",
            "description": "Upon importing this assessment, you can provide a new identifier for the assessment.",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v1/sharedassessments/{guid}/revisions": {
      "get": {
        "operationId": "getSharedAssessmentRevisionsByGUID",
        "summary": "Get all revisions of an assessment using the GUID of one of the revisions.",
        "description": "Records are paged and returned with the highest revision number first.",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentList"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/sharedassessments/identifier:{identifier}": {
      "get": {
        "operationId": "getLatestSharedAssessmentRevision",
        "summary": "Get an assessment revision with the greatest revision number, using the assessment's identifier.",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/sharedassessments/identifier:{identifier}/revisions": {
      "get": {
        "operationId": "getSharedAssessmentRevisionsById",
        "summary": "Get all revisions of an assessment with a specific identifier.",
        "description": "Records are paged and returned with the highest revision number first.",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AssessmentList"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/sharedassessments/identifier:{identifier}/revisions/{revision}": {
      "get": {
        "operationId": "getSharedAssessmentById",
        "summary": "Get an assessment revision by identifier and revision number.",
        "tags": [
          "Shared Assessments"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Assessment"
            }
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v1/sharedassessments/identifier:{assessmentId}/resources": {
      "get": {
        "operationId": "getSharedAssessmentResources",
        "summary": "Get the external resource links documenting an assessment",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/category"
          },
          {
            "$ref": "#/parameters/minRevision"
          },
          {
            "$ref": "#/parameters/maxRevision"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PagedExternalResourceList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/sharedassessments/identifier:{assessmentId}/resources/{guid}": {
      "get": {
        "operationId": "getSharedAssessmentResource",
        "summary": "Get a external resource link documenting a shared assessment",
        "tags": [
          "Shared Assessments",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateSharedAssessmentResource",
        "summary": "Update an external resource link documenting a shared assessment",
        "tags": [
          "Shared Assessments",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "ExternalResource",
            "in": "body",
            "description": "Assessment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalResource"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSharedAssessmentResource",
        "summary": "Delete an external resource link documenting a shared assessment",
        "tags": [
          "Shared Assessments",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v1/sharedassessments/identifier:{assessmentId}/resources/import": {
      "post": {
        "operationId": "importSharedAssessmentResource",
        "summary": "Copy these shared resources to your app context",
        "tags": [
          "_For Developers",
          "Shared Assessments"
        ],
        "description": "The shared assessment these resources relate to must have been imported at least one time to the local app context before the resources can be imported. If the resource has already been imported, it'll be updated with the local version. Note that the imported assessment has a link to the shared assessment and thus, you can refer to all the resource links of the shared assessment rather than importing them.\n",
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/assessmentId"
          },
          {
            "name": "External resource GUIDs",
            "in": "body",
            "description": "List of external resource GUIDs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalResourceList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v1/tags": {
      "get": {
        "operationId": "getTags",
        "summary": "Get all tags, grouped into lists under their namespace prefixes (if a tag is created without a namespace prefix, it will be listed in the \"default\" group here).",
        "tags": [
          "Tags",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addTag",
        "summary": "Create a tag if it does not yet exist.",
        "tags": [
          "Tags",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "Tag",
            "in": "body",
            "description": "New tag",
            "required": true,
            "schema": {
              "type": "object",
              "description": "A tag. The tag can optionally be namespaced with a prefix separated by a semicolon, and the tags will be returned from the APIs grouped by this prefix. This allows you to create different enumerated sets of tags for different purposes when categorizing assessments.",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Tag",
                  "x-nullable": false
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v1/tags/{tagValue}": {
      "delete": {
        "operationId": "deleteTag",
        "summary": "Delete a tag",
        "tags": [
          "Tags",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/tagValue"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/files": {
      "get": {
        "operationId": "getFiles",
        "summary": "Get a list of static files",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get all the files of a specific type for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileMetadataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createFile",
        "summary": "Create a new file resource",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Create a new file resource (this is just the metadata, and will need to be followed by the creation and upload of a FileRevision object).\n",
        "parameters": [
          {
            "name": "FileMetadata",
            "in": "body",
            "description": "New file",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/files/{guid}": {
      "get": {
        "operationId": "getFile",
        "summary": "Get a file resource",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get a file resource for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateFile",
        "summary": "Update an existing file resource",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Update an existing file resource.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "File",
            "in": "body",
            "description": "Updated file",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteFile",
        "summary": "Delete file resource (and all revisions)",
        "tags": [
          "Files",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete an existing file resource (and all its revisions, if the delete is physical).\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/files/{guid}/revisions": {
      "get": {
        "operationId": "getFileRevisions",
        "summary": "Get the revision history of a file resource",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get the paginated revision history of a file resource.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FileRevisionList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createFileRevision",
        "summary": "Create a new file resource revision.",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Create a new file resource revision. The record returns contains the `uploadURL` field, where the resource must be PUT using an HTTP library with the following two headers:\n\n- **Content-Type** The mime type of the resource that was posted to this endpoint;\n- **Content-Disposition** A content disposition header with the value of `attachment; filename=\"name\"` where the name is the name included in the revision object posted to this endpoint.\n\nThis uplod URL expires in 10 minutes. When this upload has been completed, the client should then call the `finishFileRevision` API (these steps are also encapsulated in the `RestUtils.uploadHostedFileToS3` method).\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "FileRevision",
            "in": "body",
            "description": "New file revision",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileRevision"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/FileRevision"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/files/{guid}/revisions/{createdOn}": {
      "post": {
        "operationId": "finishFileRevision",
        "summary": "Indicate to the server that a file revision upload has been completed.",
        "tags": [
          "Files",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Indicate to the server that a file revision upload has been completed. If this call is made and the S3 file is found, the revision record is moved from the `pending` to the `available` state (and the upload URL is removed from the record). If the S3 record is *not* on the server, then this call will return a 404 and the `FileRevision` record will be deleted.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "404": {
            "description": "If the `guid` and `createdOn` timestamp are correct, this indicates that the contents of the file revision were not successfully uploaded to S3, and this record will be deleted.",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/activities": {
      "get": {
        "operationId": "getScheduledActivities",
        "summary": "Get a list of the participant's scheduled activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Gets all available, started, or scheduled activities for a user. Once an activity is \nfinished, or expires (the time has passed for it to be started), it will be removed \nfrom the list of activities returned to the user.\n",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The user's time zone offset (e.g. +07:00). Scheduled activities will be \nreturned in the timezone submitted at the time of the request. \n",
            "required": true,
            "type": "string"
          },
          {
            "name": "daysAhead",
            "in": "query",
            "required": true,
            "description": "Retrieve activities that are scheduled in the future for the indicated number \nof days past today.\n",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          },
          {
            "name": "minimumPerSchedule",
            "in": "query",
            "description": "Force a look-ahead on repeating activities until at least the indicated number \nof activities are scheduled (this is applied to the each schedule in the system \nthat applies to this user). The system will then return either the activities \nfor N days, or the minimum number of activities, whichever is the greatest in \nnumber. This setting can help to expose infrequent tasks (weekly, monthly, \netc.) to users.\n",
            "type": "integer",
            "minimum": 0,
            "maximum": 5
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v4/activities": {
      "get": {
        "operationId": "getScheduledActivitiesByDateRange",
        "summary": "Get a list of the participant's scheduled activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get all scheduled activities in a given date range (from inclusive `startTime` to excluded `endTime`, must be less than 32 days), in one or more pages of results. An activity is included in the results if its scheduling window (`scheduledOn` to `expiresOn`) overlaps with the time range indicated by the request. The `startedOn` and `finishedOn` timestamps, if they exist for an activity, have no impact on whether it is included in this search query with the exception of deleted activities. These will not be returned in this query, and they are indicated by setting a `finishedOn` timestamp but no `startedOn` timestamp. **Persistent** activities will only ever return the current, active instance of that activity (you cannot retrieve the sequence of finished persistent activity instances, because this sequence is unbounded).\n",
        "parameters": [
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScheduledActivityListV4"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "updateScheduledActivities",
        "summary": "Update the status of one or more scheduled activities.",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Submit one or more scheduled activities with updated startedOn or finishedOn timestamps. The \nonly values needed in the JSON for each activity are the guid, startedOn and finishedOn fields.\n",
        "parameters": [
          {
            "name": "ScheduledActivity",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/activities/{activityGuid}": {
      "get": {
        "operationId": "getActivityHistory",
        "summary": "Get a history of activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/activityGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v4/activities/tasks/{taskId}": {
      "get": {
        "operationId": "getTaskHistory",
        "summary": "Get a history of tasks",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v4/activities/surveys/{surveyGuid}": {
      "get": {
        "operationId": "getSurveyHistory",
        "summary": "Get a history of surveys",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v4/activities/compoundactivities/{taskId}": {
      "get": {
        "operationId": "getCompoundActivityHistory",
        "summary": "Get a history of compound activities",
        "tags": [
          "Activities",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/compoundactivitydefinitions": {
      "get": {
        "operationId": "getAllCompoundActivityDefinitions",
        "summary": "List all compound activity definitions in the app",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinitionList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createCompoundActivityDefinition",
        "summary": "Create a compound activity definition",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "CompoundActivityDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/compoundactivitydefinitions/{taskId}": {
      "get": {
        "operationId": "getCompoundActivityDefinition",
        "summary": "Get a compound activity definition by ID",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompoundActivityDefinition",
        "summary": "Delete a compound activity definition",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "operationId": "updateCompoundActivityDefinition",
        "summary": "Update a compound activity definition",
        "tags": [
          "Compound Activity Definitions",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "name": "CompoundActivityDefinition",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CompoundActivityDefinition"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/healthdata": {
      "get": {
        "operationId": "getHealthDataByCreatedOn",
        "summary": "Get health data records by createdOn date range.",
        "description": "Gets a list of health data records for the current user, between the specified createdOn times (inclusive). The\ncreatedOn date range cannot be more than 15 days.\n",
        "tags": [
          "_Internal"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/createdOnStart"
          },
          {
            "$ref": "#/parameters/createdOnEnd"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthDataRecordList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "submitHealthData",
        "summary": "Upload health data",
        "description": "Synchronous health data API. Used to submit small health data payloads (such as survey responses) without\nincurring the overhead of creating a bunch of small files to upload to S3.    \n",
        "tags": [
          "Health Data",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "HealthDataSubmission",
            "in": "body",
            "description": "Health data submitted by the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HealthDataSubmission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HealthDataRecord"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/itp": {
      "post": {
        "operationId": "submitIntentToParticipate",
        "summary": "Send a consent signature to Bridge before the user has signed up to the server. \n",
        "description": "The consent is stored and an SMS message will be sent out with the install link for the application on a given platform. After the user signs up, their consent will be recorded and no 412 status will be returned to the user from the APIs.\n",
        "tags": [
          "Consents",
          "Intent To Participate",
          "Public"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "IntentToParticipate",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntentToParticipate"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          }
        }
      }
    },
    "/v3/participants": {
      "get": {
        "operationId": "getParticipants",
        "summary": "Get a paged list of study participants (users)",
        "deprecated": true,
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/emailFilter"
          },
          {
            "$ref": "#/parameters/phoneFilter"
          },
          {
            "$ref": "#/parameters/startTimeOpt"
          },
          {
            "$ref": "#/parameters/endTimeOpt"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountSummaryList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "operationId": "createParticipant",
        "summary": "Create a new study participant (user)",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "Sign up",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/IdentifierHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/search": {
      "post": {
        "operationId": "searchAccountSummaries",
        "summary": "Search for account summaries (participants)",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "AccountSummarySearch",
            "in": "body",
            "description": "Account summary search parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccountSummarySearch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AccountSummaryList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/self": {
      "get": {
        "operationId": "getUsersParticipantRecord",
        "summary": "Get user's participant record",
        "description": "Get the current user's participant record. Any authenticated user may call this endpoint. **The user does not need to have consented a study in the app in order to access their participant record.** \n",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "operationId": "updateUsersParticipantRecord",
        "summary": "Update user's participant record",
        "description": "Update the current user's participant record. **Unlike most other calls in this API, you can send partically complete JSON to this endpoint,** and it will selectively update the participant's record (rather than treating missing properties as an instruction to delete those fields in the record). This means that many existing APIs that sent a single update value, can direct those payloads to this endpoint and they will still work fine. For this reason most `/v3/users/*` endpoints are now deprecated, though there is no plan to remove them. Any authenticated user may call this endpoint. **The user does not need to have consented to a study in the app in order to update their participant \n",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/participants/self/identifiers": {
      "post": {
        "operationId": "updateUsersIdentifiers",
        "tags": [
          "Participants",
          "_For Consented Users"
        ],
        "description": "Allows the caller to add additional identifier fields to an account (email, phone). Once set, \nthese fields cannot currently be changed. The caller must be authenticated to make this call, \n*and* must provide a valid sign in object for either authentication or reauthentication.\n",
        "parameters": [
          {
            "name": "UpdateIdentifier",
            "in": "body",
            "description": "Information to authenticate and update an account identifier",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifierUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/participants/reports": {
      "get": {
        "operationId": "getParticipantReportIndices",
        "summary": "Get list of report indices for participants",
        "tags": [
          "Participant Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportIndexList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/participants/{userId}": {
      "get": {
        "operationId": "getParticipantById",
        "summary": "Get a study participant (user) record",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateParticipant",
        "summary": "Update an existing study participant (user) record",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "StudyParticipant",
            "in": "body",
            "description": "Study participant",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/externalId:{externalId}": {
      "get": {
        "operationId": "getParticipantByExternalId",
        "summary": "Get a study participant (user) record using the external ID of the account",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/externalId"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/healthCode:{healthCode}": {
      "get": {
        "operationId": "getParticipantByHealthCode",
        "summary": "Get a study participant (user) record using the health code of the account",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/healthCode"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/syn:{synapseUserId}": {
      "get": {
        "operationId": "getParticipantBySynapseUserId",
        "summary": "Get a study participant (user) record using the Synapse user ID of the account",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/synapseUserId"
          },
          {
            "$ref": "#/parameters/consents"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyParticipant"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/healthdata": {
      "post": {
        "operationId": "submitHealthDataForParticipant",
        "summary": "Upload health data for the given user",
        "description": "Allows a developer to submit health data on behalf of the participant. This is generally used for backfills.\n",
        "tags": [
          "_Internal"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "HealthDataSubmission",
            "in": "body",
            "description": "Health data submitted on behalf of the user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HealthDataSubmission"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/HealthDataRecord"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/sms/recent": {
      "get": {
        "operationId": "getMostRecentSmsMessage",
        "summary": "Returns the most recent message sent to the phone number of the given user. Used by integration tests.",
        "tags": [
          "_Internal"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SmsMessage"
            }
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/participants/{userId}/uploads": {
      "get": {
        "operationId": "getParticipantUploads",
        "summary": "Get a study participant's upload history",
        "description": "Retrieve information about the uploads from a user. This is particularly useful during \ndevelopment to verify the mobile application is sending valid data back to the Bridge \nserver. The API can retrieve any number of days worth of upload records, defined by the \nstartTime and endTime timestamps (ISO 8601 format), and paginated using a pageSize and \noffsetKey value (null for the first page, but returned with subsequent requests to \nretrieve further pages in the time range). If the endTime is not provided, it will \nbe one day after the startTime. If the startTime is not provided, it will be one day \nbefore the endTime.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/notifications": {
      "get": {
        "operationId": "getParticipantPushNotificationRegistrations",
        "summary": "Get a study participant's push notification registrations",
        "description": "Get all of a study participant's registrations for push notifications. There can be more than one \nof these if the participant has downloaded and installed the app on more than one device. There must \nbe at least one record in order to send a push notification to the user.\n",
        "tags": [
          "Participants",
          "Notifications",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationRegistrationList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/notifications/sms": {
      "post": {
        "operationId": "createSmsRegistration",
        "summary": "Create an SMS notification registration for the given user.",
        "description": "This is a researcher API to backfill SMS notification registrations for a user. We generally prefer the app\nregister notifications, but sometimes the work can't be done on time, so we want study developers to have the\noption of backfilling these.\n",
        "tags": [
          "_Internal"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/sendNotification": {
      "post": {
        "operationId": "sendNotificationToParticipant",
        "summary": "Send a push notification to a single participant",
        "description": "Send a push notification to an individual participant (assuming they have registered for push notifications). \nDo not use this method to notify a group of participants; create a topic, ask your users to subscribe to that \ntopic, and send a message via that topic instead.\n",
        "tags": [
          "Participants",
          "Notifications",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "NotificationMessage",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationMessage"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/requestInfo": {
      "get": {
        "operationId": "getParticipantRequestInfo",
        "summary": "Get information about the last request made by this participant",
        "description": "Retrieves information about the user agent headers and participant settings that were in \neffect the last time this participant contacted the Bridge server. Also provides the last \ntime activities were retrieved and uploads were sent back to the server.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RequestInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities": {
      "delete": {
        "operationId": "deleteParticipantActivities",
        "summary": "Delete all activities for a participant",
        "description": "Intended for use in development. Developers may wish to delete an account's scheduled activities in order \nto see the impact of changes to schedules for a study. Otherwise, activities from the original \nscheduling will persist until they expire, alongside tasks issued for the newly changed schedule. **This \nshould not be called on production accounts.**\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities/{activityGuid}": {
      "get": {
        "operationId": "getParticipantActivityHistory",
        "summary": "Get a study participant's history of activities",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/activityGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/signOut": {
      "post": {
        "operationId": "signOutParticipant",
        "summary": "Sign the user out and delete their server session",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "deleteReauthToken",
            "description": "Should sign out also delete any extant reauthentication tokens?",
            "required": false,
            "default": true,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/requestResetPassword": {
      "post": {
        "operationId": "sendParticipantResetPassword",
        "summary": "Trigger a request to reset password for this user",
        "description": "When called, a reset password message will be sent to either the email address or the phone number for this account (preferencing the email address). The user account does not have to be active for a researcher to trigger a reset password message on their behalf. The act of resetting the password successfully will activate the account and verify the credential used to send the reset token (email address or phone number).\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/resendEmailVerification": {
      "post": {
        "operationId": "sendParticipantEmailVerification",
        "summary": "Resend an email verification email to this user",
        "description": "When called, resends the email to the user's email account, which contains a link they must \nclick on to verify they control that email address. Account is not activated until this is \ndone.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/resendPhoneVerification": {
      "post": {
        "operationId": "sendParticipantPhoneVerification",
        "summary": "Resend a phone verification to this user",
        "description": "When called, resends the SMS message to the user's email account, which contains a code they must \nenter into your application to call and verify this phone number. Account is not activated until \nthis is done.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/withdraw": {
      "post": {
        "operationId": "withdrawParticipantFromApp",
        "summary": "Withdraw the participant from all studies in this app",
        "description": "Withdraw the user entirely from all studies in this app. The user is withdraw from all consents, no further data will be exported from Bridge, the device will be unregistered from any push notifications, and the account's identifiers (email, phone number, and external ID) will be deleted. The account remains to verify the consent history for a given health code. The app consent administration email will receive a notification of the withdrawal. This withdrawal cannot be reversed. If the user signs up again with the app, a new account under a new `healthCode` will be generated.\n",
        "tags": [
          "Participants",
          "Consents",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/{subpopulationGuid}/resendConsent": {
      "post": {
        "operationId": "resendParticipantConsentAgreement",
        "summary": "Re-send the consent agreement for this subpopulation",
        "description": "When called, re-sends a signed consent agreement document to the participant's email address.\n",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/consents/{subpopulationGuid}/withdraw": {
      "post": {
        "operationId": "withdrawParticipantFromSubpopulation",
        "summary": "Withdraw the participant from the specified subpopulation",
        "description": "This endpoint will withdraw the user from consent to participate in one subpopulation of \nthe app. \n",
        "tags": [
          "Participants",
          "Consents",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/reports/{identifier}": {
      "get": {
        "operationId": "getUsersParticipantReportRecords",
        "summary": "Get participant report records",
        "tags": [
          "Participant Reports",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/reports/{identifier}/{date}": {
      "delete": {
        "operationId": "deleteParticipantReportRecord",
        "summary": "Delete a record for a specific day of a participant report",
        "tags": [
          "Participant Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "date",
            "description": "Date of records",
            "required": true,
            "in": "path",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/participants/{userId}/activityEvents": {
      "get": {
        "operationId": "getActivityEventsForParticipant",
        "summary": "Get ActivityEvent",
        "tags": [
          "Activity Events",
          "_For Researchers"
        ],
        "parameters": [
          {
            "name": "userId",
            "type": "string",
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityEventList"
            }
          }
        }
      }
    },
    "/v3/participants/reports/{identifier}": {
      "post": {
        "operationId": "addParticipantReportRecord",
        "summary": "Add a participant report record",
        "description": "Endpoint for a worker to add a report record for a participant. Unlike other endpoints, \nthe worker must provide the healthCode of the target user (this endpoint allows external \nprocesses working with data from Synapse to write reports back to Bridge). \n",
        "tags": [
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportDataForWorker"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteParticipantReportIndex",
        "summary": "Delete a participant report index",
        "description": "Delete a participant report index. These indices can be shared between users so they \nare not normally deleted, but this endpoint allows the index identifiers to be deleted \nduring testing.\n",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/participants/reports/{identifier}/index": {
      "get": {
        "operationId": "getParticipantReportIndex",
        "summary": "Get a single report index for participant reports",
        "tags": [
          "Participant Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportIndex"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities/tasks/{taskId}": {
      "get": {
        "operationId": "getParticipantTaskHistory",
        "summary": "Get a study participant's history of a task",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities/surveys/{surveyGuid}": {
      "get": {
        "operationId": "getParticipantSurveyHistory",
        "summary": "Get a study participant's history of a survey",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/participants/{userId}/activities/compoundactivities/{taskId}": {
      "get": {
        "operationId": "getParticipantCompoundActivityHistory",
        "summary": "Get a study participant's history of a compound activity",
        "tags": [
          "Participants",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/taskId"
          },
          {
            "$ref": "#/parameters/scheduledOnStart"
          },
          {
            "$ref": "#/parameters/scheduledOnEnd"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorScheduledActivityList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v4/participants/{userId}/reports/{identifier}": {
      "get": {
        "operationId": "getUsersParticipantReportRecordsV4",
        "summary": "Get participant report records",
        "tags": [
          "Participant Reports",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      },
      "post": {
        "operationId": "addParticipantReportRecordV4",
        "summary": "Add a participant report record",
        "tags": [
          "Participant Reports",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportData",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAllParticipantReportRecords",
        "summary": "Delete a participant report (all records)",
        "tags": [
          "Participant Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/sharedmodules/{moduleId}/import": {
      "post": {
        "operationId": "importModuleByIdLatestPublishedVersion",
        "summary": "Imports the latest published version of a module into the current app.",
        "tags": [
          "Shared Modules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleImportStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/sharedmodules/{moduleId}/versions/{moduleVersion}/import": {
      "post": {
        "operationId": "importModuleByIdAndVersion",
        "summary": "Imports a specific module version into the current app.",
        "tags": [
          "Shared Modules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          },
          {
            "$ref": "#/parameters/moduleVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleImportStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/sharedmodules/metadata": {
      "get": {
        "operationId": "queryAllMetadata",
        "summary": "Queries module metadata using the set of given parameters.",
        "tags": [
          "Shared Modules",
          "Public",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/mostrecent"
          },
          {
            "$ref": "#/parameters/published"
          },
          {
            "$ref": "#/parameters/name"
          },
          {
            "$ref": "#/parameters/notes"
          },
          {
            "$ref": "#/parameters/tags"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createMetadata",
        "summary": "Creates the specified module metadata.",
        "tags": [
          "Shared Modules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SharedModuleMetadata",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadata"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadata"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/sharedmodules/metadata/{moduleId}": {
      "get": {
        "operationId": "getMetadataByIdLatestVersion",
        "summary": "Gets metadata for the latest version of the specified module.",
        "tags": [
          "Shared Modules",
          "Public",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadata"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/sharedmodules/metadata/{moduleId}/versions": {
      "get": {
        "operationId": "queryMetadataById",
        "summary": "Similar to queryAllMetadata, except this only queries on module versions of the specified ID.",
        "tags": [
          "Shared Modules",
          "Public",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          },
          {
            "$ref": "#/parameters/mostrecent"
          },
          {
            "$ref": "#/parameters/published"
          },
          {
            "$ref": "#/parameters/name"
          },
          {
            "$ref": "#/parameters/notes"
          },
          {
            "$ref": "#/parameters/tags"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteMetadataByIdAllVersions",
        "summary": "Deletes all metadata for module versions with the given ID.",
        "tags": [
          "Shared Modules",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/sharedmodules/metadata/{moduleId}/versions/{moduleVersion}": {
      "get": {
        "operationId": "getMetadataByIdAndVersion",
        "summary": "Gets metadata for the specified version of the specified module.",
        "tags": [
          "Shared Modules",
          "Public",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          },
          {
            "$ref": "#/parameters/moduleVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadata"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateMetadata",
        "summary": "Updates metadata for the specified module version.",
        "tags": [
          "Shared Modules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          },
          {
            "$ref": "#/parameters/moduleVersion"
          },
          {
            "name": "SharedModuleMetadata",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadata"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SharedModuleMetadata"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteMetadataByIdAndVersion",
        "summary": "Deletes metadata for the specified module ID and version.",
        "tags": [
          "Shared Modules",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/moduleId"
          },
          {
            "$ref": "#/parameters/moduleVersion"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations": {
      "get": {
        "operationId": "getSubpopulations",
        "summary": "Get all subpopulations in this app",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubpopulationList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createSubpopulation",
        "summary": "Create a new subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "Subpopulation",
            "in": "body",
            "description": "New subpopulation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}": {
      "get": {
        "operationId": "getSubpopulation",
        "summary": "Get a subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateSubpopulation",
        "summary": "Update an existing subpopulation",
        "tags": [
          "Subpopulations",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "Subpopulation",
            "description": "A subpopulation",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subpopulation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSubpopulation",
        "summary": "Delete a subpopulation",
        "description": "Delete a subpopulation unless it is a default subpopulation, which cannot be deleted. \nIf this is a \n",
        "tags": [
          "Subpopulations",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature": {
      "get": {
        "operationId": "getConsentSignature",
        "summary": "Get the participant's consent signature for the subpopulation",
        "description": "",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ConsentSignature"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "createConsentSignature",
        "summary": "Consent to this subpopulation by submitting a signature",
        "description": "Agree to the terms of participant represented by this subpopulation, by submitting a \nsignature to the Bridge server.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "ConsentSignature",
            "description": "A consent signature",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ConsentSignature"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature/withdraw": {
      "post": {
        "operationId": "withdrawConsentFromSubpopulation",
        "summary": "Withdraw participant from this subpopulation consent group",
        "description": "This withdraws the user from only one subpopulation.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/signature/resend": {
      "post": {
        "operationId": "resendConsentAgreement",
        "summary": "Email or SMS the consent agreement to the participant",
        "description": "Although this method is to \"resend\" a consent agreement, if you have the automatic delivery of a signed consent disabled, this may be the method through which a user requests the consent for the first time, should they wish to retrieve a signed copy.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/consents": {
      "get": {
        "operationId": "getAllDefaultConsentRevisions",
        "summary": "Get all revisions of the consent in a app's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "addNewDefaultConsentRevision",
        "summary": "Add new consent revision to the app's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/consents/recent": {
      "get": {
        "operationId": "getMostRecentDefaultConsentRevision",
        "summary": "Get most recent revision of a app's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      }
    },
    "/v3/consents/published": {
      "get": {
        "operationId": "getPublishedDefaultConsentRevision",
        "summary": "Get most recently published revision of a app's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      }
    },
    "/v3/consents/{createdOn}": {
      "get": {
        "operationId": "getDefaultConsentRevision",
        "summary": "Get specific revision of a app's default subpopulation",
        "deprecated": true,
        "tags": [
          "Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      }
    },
    "/v3/consents/withdraw": {
      "post": {
        "operationId": "withdrawFromApp",
        "summary": "Withdraw user from all studies in app",
        "description": "Withdraw the user entirely from all studies in this app. The user is withdraw from all consents, no further data will be exported from Bridge, the device will be unregistered from any push notifications, and the account's identifiers (email, phone number, and external ID) will be deleted. The account remains to verify the consent history for a given health code. The study consent administration email will receive a notification of the withdrawal. Finally, the user will be signed out from the Bridge server. This withdrawal cannot be reversed. If the user signs up again with a study, a new account under a new `healthCode` will be generated.\n",
        "tags": [
          "Consents",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "withdrawal",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Withdrawal"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents": {
      "get": {
        "operationId": "getAllConsents",
        "summary": "Get a list of all consents for this subpopulation",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsentList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createConsent",
        "summary": "Add a new study consent version to this subpopulation",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "Study consent",
            "description": "Study consent",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/recent": {
      "get": {
        "operationId": "getMostRecentConsent",
        "summary": "Get the most recently created consent revision",
        "description": "Get the most recently created revision of this subpopulation consent. This is not \nnecessarily the published version of the consent.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/published": {
      "get": {
        "operationId": "getPublishedConsent",
        "summary": "Get the published consent revision",
        "description": "Get the published revision of this subpopulation consent. This is not necessarily the \nmost recent version of the consent.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/{createdOn}": {
      "get": {
        "operationId": "getConsent",
        "summary": "Get a specific consent revision",
        "description": "Get a specific revision of this subpopulation consent by its creation timestamp.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "createdOn",
            "description": "creation timestamp of the revision",
            "type": "string",
            "format": "date-time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StudyConsent"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/subpopulations/{subpopulationGuid}/consents/{createdOn}/publish": {
      "post": {
        "operationId": "publishConsent",
        "summary": "Publish a specific consent revision",
        "description": "Publish a specific revision of this subpopulation consent by its creation timestamp. This version of \nthe consent will be presented to users in order to participate in this subpopulation. If users have \nsigned any other revision of this consent, the `signedMostRecentConsent` flag in the consent status \nrecord for this consent (in the user's session) will be false. However, the user is still considered to \nbe consented and will not be shut out of performing operations with a 412 response.\n",
        "tags": [
          "Study Consents",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subpopulationGuid"
          },
          {
            "name": "createdOn",
            "description": "creation timestamp of the revision",
            "type": "string",
            "format": "date-time",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/users": {
      "post": {
        "operationId": "createUser",
        "summary": "Create a new user",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SignUp",
            "in": "body",
            "description": "New user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UserSessionInfo"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/users/{userId}": {
      "delete": {
        "operationId": "deleteUser",
        "summary": "Delete a user",
        "description": "This is a heavyweight operation; it is better to disable a user account when possible. \nThis endpoint exists mostly for tests and cases where governance dictates the deletion \nof as much user data as possible. \n",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/users/self/sendData": {
      "post": {
        "operationId": "sendDataToUser",
        "summary": "Make user's data available for download via email or an SMS message",
        "description": "Asynchronously request the uploaded data for this user, in a given time range (inclusive). Bridge server will gather the user's data for the given time zone and either email or SMS a secure link to the user's registered email address.\n",
        "tags": [
          "Users",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "DateRange",
            "in": "body",
            "description": "startDate and endDate of the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DateRange"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/users/self/reports/{identifier}": {
      "get": {
        "operationId": "getParticipantReportRecords",
        "summary": "Get a participant report",
        "description": "Get the records for a specific participant report. Participants can get reports for their own \naccount. Note that this call does not require consent, but does require authentication. \n",
        "tags": [
          "Users",
          "Participant Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "Report records for the participant",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v4/users/self/reports/{identifier}": {
      "get": {
        "operationId": "getParticipantReportRecordsV4",
        "summary": "Get a participant report",
        "description": "Get the records for a specific participant report. Participants can get reports for their own account. Note that this call does not require consent, but does require authentication. \n",
        "tags": [
          "Users",
          "Participant Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/offsetKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Report records for the participant",
            "schema": {
              "$ref": "#/definitions/ForwardCursorReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "operationId": "saveParticipantReportRecordsV4",
        "summary": "Save a participant report record",
        "description": "Save a report record. If a record exists at the given DateTime value, it will be replaced with this \nreport record. Note that this call does not require consent, but does require authentication. \n",
        "tags": [
          "Users",
          "Participant Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportData",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports": {
      "get": {
        "operationId": "getStudyReportIndices",
        "summary": "Get list of report indices for studies",
        "tags": [
          "Study Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportIndexList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports/{identifier}": {
      "get": {
        "operationId": "getStudyReportRecords",
        "summary": "Get study report records",
        "tags": [
          "Study Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startDate"
          },
          {
            "$ref": "#/parameters/endDate"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      }
    },
    "/v3/reports/{identifier}/index": {
      "get": {
        "operationId": "getStudyReportIndex",
        "summary": "Get a  report index",
        "description": "Get the index (or metadata) for a set of report records. \n",
        "tags": [
          "Study Reports",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportIndex"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateStudyReportIndex",
        "summary": "Update an existing study report index",
        "description": "Update the index (or metadata) for a set of report records.\n",
        "tags": [
          "Study Reports",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportIndex",
            "in": "body",
            "description": "Report index",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReportIndex"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/reports/{identifier}/{date}": {
      "delete": {
        "operationId": "deleteStudyReportRecord",
        "summary": "Delete a record for a specific day of a study report",
        "tags": [
          "Study Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "date",
            "description": "Date of records",
            "required": true,
            "in": "path",
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v4/reports/{identifier}": {
      "get": {
        "operationId": "getStudyReportRecordsV4",
        "summary": "Get study report records",
        "tags": [
          "Study Reports",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "$ref": "#/parameters/startTime"
          },
          {
            "$ref": "#/parameters/endTime"
          },
          {
            "$ref": "#/parameters/offsetKey"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ForwardCursorReportDataList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          }
        }
      },
      "post": {
        "operationId": "addStudyReportRecord",
        "summary": "Add a record to a study report",
        "tags": [
          "Study Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          },
          {
            "name": "ReportData",
            "description": "Report data",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportData"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteAllStudyReportRecords",
        "summary": "Delete a study report (all records)",
        "tags": [
          "Study Reports",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      }
    },
    "/v3/surveys": {
      "get": {
        "operationId": "getMostRecentSurveys",
        "summary": "Get most recent version of each survey",
        "tags": [
          "Surveys",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createSurvey",
        "summary": "Create a new survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "survey",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/published": {
      "get": {
        "operationId": "getPublishedSurveys",
        "summary": "Get the most recently published version of each survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions": {
      "get": {
        "operationId": "getAllVersionsOfSurvey",
        "summary": "Get all revisions of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SurveyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/recent": {
      "get": {
        "operationId": "getMostRecentSurveyVersion",
        "summary": "Get most recent revision of a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/published": {
      "get": {
        "operationId": "getPublishedSurveyVersion",
        "summary": "Get most recently published revision of a survey",
        "tags": [
          "Surveys",
          "_For Developers",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}": {
      "get": {
        "operationId": "getSurvey",
        "summary": "Get a survey revision",
        "tags": [
          "Surveys",
          "_For Consented Users",
          "_For Workers",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "updateSurvey",
        "summary": "Update a non-published survey revision",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "name": "Survey",
            "in": "body",
            "description": "Updated survey",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Survey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSurvey",
        "summary": "Delete a survey version",
        "tags": [
          "Surveys",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}/version": {
      "post": {
        "operationId": "versionSurvey",
        "summary": "Version a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/surveys/{surveyGuid}/revisions/{createdOn}/publish": {
      "post": {
        "operationId": "publishSurvey",
        "summary": "Publish a survey",
        "tags": [
          "Surveys",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/surveyGuid"
          },
          {
            "$ref": "#/parameters/createdOn"
          },
          {
            "$ref": "#/parameters/newSchemaRev"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidCreatedOnVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/notifications": {
      "get": {
        "operationId": "getNotificationRegistrations",
        "summary": "Get all of a user's notification registrations",
        "description": "Return all the registrations for this user. There may be more than one if the user installs \nthe application on different devices. Bridge attempts to prevent multiple registrations on the\nsave device.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationRegistrationList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "createNotificationRegistration",
        "summary": "Register a client to receive push notifications",
        "description": "Create a new registration. The client will retrieve an identifying token (the exact format and \nname for the token varies by platform), and register it with Bridge. Bridge will return a \nBridge-specific GUID to track this registration, which the client can use to update or delete \nthe registration at a later time. If the token already exists in an existing registration record, \nthen that registration record will be returned in lieu of creating a redundant record.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "NotificationRegistration",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationRegistration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          },
          "501": {
            "$ref": "#/paths/~1v1~1assessments/post/responses/501"
          }
        }
      }
    },
    "/v3/notifications/{guid}": {
      "get": {
        "operationId": "getNotificationRegistration",
        "summary": "Get a push notification registration",
        "description": "Get a single push notification registration by its GUID. This request is scoped to the user.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationRegistration"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "updateNotificationRegistration",
        "summary": "Update a push notification registration",
        "description": "Update an existing device registration with a new token that has been assigned by the \nclient operating system. At least on iOS, the device token can change over the lifetime of \nthe app, and it is considered best practice to re-send this token to the server on every \nstart-up of the app. The guid returned from an update will always match the GUID that was \nsubmitted.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "NotificationRegistration",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "delete": {
        "operationId": "deleteNotificationRegistration",
        "summary": "Delete a push notification registration",
        "description": "Delete a registration record. Bridge can no longer send push notifications to this device.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/notifications/{guid}/subscriptions": {
      "get": {
        "operationId": "getTopicSubscriptions",
        "summary": "Get subscription status for all topics using a device registration",
        "description": "For every topic in the app, get a status object describing whether or not the caller is \nsubscribed to that topic.        \n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscriptionStatusList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      },
      "post": {
        "operationId": "subscribeToTopics",
        "summary": "Subscribe to a set of the topics using a device registration",
        "description": "Provide a registration GUID and a set of topic GUIDs. For every topic in the app, either subscribe \nor unsubscribe the registration GUID from the topic to bring the caller's subscription into line \nwith the set provided.\n",
        "tags": [
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "SubscriptionRequest",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SubscriptionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscriptionStatusList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/topics": {
      "get": {
        "operationId": "getNotificationTopics",
        "summary": "Get all the notification topics in this app",
        "description": "Return all the topics defined for this app. Participants can be subscribed to topics if they \nregister for notifications. Researchers can then send push notifications to those users through \nthe user of a topic.\n",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationTopicList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "createNotificationTopic",
        "summary": "Create a notification topic",
        "description": "Create a notification topic. No participant is initially subscribed to a topic when it is \ncreated; users must be given the means to subscribe to a topic in the application. \n",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "NotificationTopic",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationTopic"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/topics/{guid}": {
      "get": {
        "operationId": "getNotificationTopic",
        "summary": "Get a notification topic",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationTopic"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "updateNotificationTopic",
        "summary": "Update a notification topic",
        "tags": [
          "Notifications",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "NotificationTopic",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationTopic"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteNotificationTopic",
        "summary": "Delete a notification topic",
        "tags": [
          "Notifications",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/topics/{guid}/sendNotification": {
      "post": {
        "operationId": "sendNotificationToTopic",
        "summary": "Send a push notification to all topic subscribers",
        "tags": [
          "Notifications",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "NotificationMessage",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationMessage"
            }
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v4/schedules": {
      "get": {
        "operationId": "getSchedules",
        "summary": "Get schedules for user",
        "tags": [
          "Schedules",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScheduleList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads": {
      "post": {
        "operationId": "requestUploadSession",
        "summary": "Request an upload session",
        "tags": [
          "Uploads",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadRequest",
            "in": "body",
            "description": "An upload request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSession"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads/{uploadId}/complete": {
      "post": {
        "operationId": "completeUploadSession",
        "summary": "Notify Bridge an upload is complete",
        "description": "Notify Bridge an upload is complete. Either a consented user or a worker \nprocess can access this endpoing, but failure to have the worker role will \nbe treated like a consent error.\n\nIn synchronous mode, this API will poll until upload validation is complete (or failed or is otherwise in a\nnon-transient state), and return the upload validation status. In asynchronous mode, this API will return\nimmediately and will also return the upload validation status, which is likely to be in\n\"validation_in_progress\".\n",
        "tags": [
          "Uploads",
          "_For Workers",
          "_For Consented Users"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          },
          {
            "name": "synchronous",
            "description": "True if this API call should wait for upload validation to finish before returning.",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "redrive",
            "description": "True if this API call should allow completing uploads that are already complete. This is to allow\nredrives and backfills.\n",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadValidationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploadstatuses/{uploadId}": {
      "get": {
        "operationId": "getUploadStatus",
        "summary": "Get status of a single upload attempt",
        "description": "Caller must either be a participant getting a status of one of the participant's \nown uploads, or a reearcher.\n",
        "tags": [
          "Uploads",
          "_For Consented Users",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadValidationStatus"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          },
          "410": {
            "$ref": "#/responses/410"
          },
          "412": {
            "$ref": "#/responses/412"
          }
        }
      }
    },
    "/v3/uploads/{uploadId}": {
      "get": {
        "operationId": "getUploadById",
        "summary": "Get an upload by ID",
        "tags": [
          "Uploads",
          "_For Admins",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/uploadId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/uploads/recordId:{recordId}": {
      "get": {
        "operationId": "getUploadByRecordId",
        "summary": "Get an upload record by the health data record ID",
        "tags": [
          "Uploads",
          "_For Admins",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recordId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Upload"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/uploadschemas": {
      "get": {
        "operationId": "getMostRecentUploadSchemas",
        "summary": "Get most recent revision of all upload schemas",
        "tags": [
          "Upload Schemas",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "includeDeleted",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "Should deleted upload schemas be returned in results?"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchemaList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createOrUpdateUploadSchema",
        "summary": "Create or update an upload schema",
        "deprecated": true,
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v4/uploadschemas": {
      "post": {
        "operationId": "createUploadSchema",
        "summary": "Create an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v4/uploadschemas/{schemaId}/revisions/{revision}": {
      "post": {
        "operationId": "updateUploadSchema",
        "summary": "Update an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          },
          {
            "name": "UploadSchema",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}": {
      "get": {
        "operationId": "getAllRevisionsOfUploadSchema",
        "summary": "Get all revisions of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "type": "boolean",
            "default": false,
            "description": "Should deleted upload schemas be returned in results?"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchemaList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAllRevisionsOfUploadSchema",
        "summary": "Delete all revisions of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "name": "physical",
            "description": "Physically delete the upload schema (administrators only; this is always false for developers)",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}/recent": {
      "get": {
        "operationId": "getMostRecentUploadSchema",
        "summary": "Get the most recent revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/uploadschemas/{schemaId}/revisions/{revision}": {
      "get": {
        "operationId": "getUploadSchema",
        "summary": "Get the specific revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UploadSchema"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_worker"
          }
        }
      },
      "delete": {
        "operationId": "deleteUploadSchema",
        "summary": "Delete the specific revision of an upload schema",
        "tags": [
          "Upload Schemas",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schemaId"
          },
          {
            "$ref": "#/parameters/revision"
          },
          {
            "name": "physical",
            "description": "Physically delete the upload schema (administrators only; this is always false for developers)",
            "default": false,
            "required": false,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/scheduleplans": {
      "get": {
        "operationId": "getSchedulePlans",
        "summary": "Get schedule plans",
        "tags": [
          "Schedules",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchedulePlanList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "createSchedulePlan",
        "summary": "Create a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "SchedulePlan",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/scheduleplans/{schedulePlanGuid}": {
      "get": {
        "operationId": "getSchedulePlan",
        "summary": "Get a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateSchedulePlan",
        "summary": "Update a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          },
          {
            "name": "SchedulePlan",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SchedulePlan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchedulePlan",
        "summary": "Get a schedule plan",
        "tags": [
          "Schedules",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/schedulePlanGuid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/schedulerconfigs": {
      "get": {
        "operationId": "getAllSchedulerConfigs",
        "summary": "Get list of scheduler configs",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MasterSchedulerConfigList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "post": {
        "operationId": "createSchedulerConfig",
        "summary": "Create a scheduler config",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "MasterSchedulerConfig",
            "in": "body",
            "description": "Master scheduler config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MasterSchedulerConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MasterSchedulerConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/schedulerconfigs/{scheduleId}": {
      "get": {
        "operationId": "getSchedulerConfig",
        "summary": "Get a scheduler config",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/scheduleId"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MasterSchedulerConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "post": {
        "operationId": "updateSchedulerConfig",
        "summary": "Update a scheduler config",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/scheduleId"
          },
          {
            "name": "MasterSchedulerConfig",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MasterSchedulerConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MasterSchedulerConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchedulerConfig",
        "summary": "Delete a scheduler config",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/scheduleId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/schedulerstatus": {
      "get": {
        "operationId": "getSchedulerStatus",
        "summary": "Get the last time the scheduler ran",
        "tags": [
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DateTimeHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v1/activityevents": {
      "get": {
        "operationId": "getActivityEvents",
        "summary": "Get ActivityEvent",
        "description": "Gets all activity events for the current user.",
        "tags": [
          "_For Consented Users"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActivityEventList"
            }
          }
        }
      },
      "post": {
        "operationId": "createCustomActivityEvent",
        "summary": "Create a app-specific ActivityEvent",
        "description": "Create a custom ActivityEvent record. The eventKey must be defined in the app.",
        "tags": [
          "Activity Events",
          "_For Consented Users"
        ],
        "parameters": [
          {
            "name": "CustomActivityEventRequest",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomActivityEventRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          }
        }
      }
    },
    "/v4/externalids": {
      "get": {
        "operationId": "getExternalIds",
        "summary": "Get external IDs",
        "tags": [
          "External Identifiers",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "offsetKey",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "pageSize",
            "type": "integer",
            "in": "query",
            "required": true
          },
          {
            "name": "idFilter",
            "type": "string",
            "in": "query"
          },
          {
            "name": "assignmentFilter",
            "type": "boolean",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExternalIdentifierList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      },
      "post": {
        "operationId": "createExternalId",
        "summary": "Add external ID to the app",
        "tags": [
          "External Identifiers",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "ExternalIdentifier",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExternalIdentifier"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer_researcher"
          }
        }
      }
    },
    "/v4/externalids/{externalId}": {
      "delete": {
        "operationId": "deleteExternalId",
        "summary": "Delete an external ID",
        "tags": [
          "External Identifiers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/externalId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      }
    },
    "/v3/externalids/{externalId}/password": {
      "post": {
        "operationId": "generatePassword",
        "summary": "Generate a password for a study participant's account",
        "tags": [
          "_For Researchers",
          "Authentication"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Allows a researcher to generate a password for another account, identified by an external ID, \nwhen the app is configured to manage (verify) external IDs. This method should be called from the client so the password can be stored on the device being given to the study participant, usually in lab-based settings.\n",
        "parameters": [
          {
            "$ref": "#/parameters/externalId"
          },
          {
            "name": "createAccount",
            "description": "If account has not been created for this external ID, create it",
            "required": false,
            "default": true,
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeneratedPassword"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_researcher"
          }
        }
      }
    },
    "/v3/substudies": {
      "get": {
        "operationId": "getSubstudies",
        "summary": "Get a list of the sub-studies in this study (groups contributing participants to the study)",
        "tags": [
          "Substudies",
          "_For Admins",
          "_For Developers",
          "_For Researchers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubstudyList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin"
          }
        }
      },
      "post": {
        "operationId": "createSubstudy",
        "summary": "Create a new substudy",
        "tags": [
          "Substudies",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "Substudy",
            "in": "body",
            "description": "New sub-study",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Substudy"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/substudies/{id}": {
      "get": {
        "operationId": "getSubstudy",
        "summary": "Get a sub-study",
        "tags": [
          "Substudies",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get a sub-study for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Substudy"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "post": {
        "operationId": "updateSubstudy",
        "summary": "Update an existing sub-study",
        "tags": [
          "Substudies",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Update an existing sub-study\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "name": "Substudy",
            "in": "body",
            "description": "Updated sub-study",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Substudy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      },
      "delete": {
        "operationId": "deleteSubstudy",
        "summary": "Delete a sub-study",
        "tags": [
          "Substudies",
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete an existing sub-study\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/templates": {
      "get": {
        "operationId": "getTemplates",
        "summary": "Get a list of templates of a specific type",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get all the templates of a specific type for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/templateType"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TemplateList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createTemplate",
        "summary": "Create a new template",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Create a new template.\n",
        "parameters": [
          {
            "name": "Template",
            "in": "body",
            "description": "New template",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/templates/{guid}": {
      "get": {
        "operationId": "getTemplate",
        "summary": "Get a template",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get a template for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateTemplate",
        "summary": "Update an existing template",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Update an existing template.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "Template",
            "in": "body",
            "description": "Updated template",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteTemplate",
        "summary": "Delete template (and all revisions)",
        "tags": [
          "Templates",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete an existing template (and all its revisions).\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/templates/{guid}/revisions": {
      "get": {
        "operationId": "getTemplateRevisions",
        "summary": "Get the template document revisions",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/offsetBy"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TemplateRevisionList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createTemplateRevision",
        "summary": "Create a new revision of a template",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "TemplateRevision",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TemplateRevision"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreatedOnHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/templates/{guid}/revisions/{createdOn}": {
      "get": {
        "operationId": "getTemplateRevision",
        "summary": "Get a single template document revision",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TemplateRevision"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/templates/{guid}/revisions/{createdOn}/publish": {
      "post": {
        "operationId": "publishTemplateRevision",
        "summary": "Set a specific template revision as the version to use when the template is selected",
        "tags": [
          "Templates",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/createdOn"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/appconfigs": {
      "get": {
        "operationId": "getAppConfigs",
        "summary": "Get a list of the app's configurations",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get all the configuration objects for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfigList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createAppConfig",
        "summary": "Create a new app config",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Create a new app configuration object. If you submit an existing app configuration to this \nendpoint, it will be copied.\n",
        "parameters": [
          {
            "name": "AppConfig",
            "in": "body",
            "description": "New app configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/appconfigs/{guid}": {
      "get": {
        "operationId": "getAppConfig",
        "summary": "Get an app config",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get an configuration object for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfig"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateAppConfig",
        "summary": "Update an existing app config",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Update an existing app configuration.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "name": "AppConfig",
            "in": "body",
            "description": "Updated app configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GuidVersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAppConfig",
        "summary": "Delete an app config",
        "tags": [
          "App Configs",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete an existing configuration object.\n",
        "parameters": [
          {
            "$ref": "#/parameters/guid"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/appconfigs/elements": {
      "get": {
        "operationId": "getMostRecentAppConfigElements",
        "summary": "Get a list of the most recent revision of each configuration element in the app",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get a list of the app configuration elements in the app, returning the highest revision \nnumber for each element in the app. This revision may or may not be published.\n",
        "parameters": [
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfigElementList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "createAppConfigElement",
        "summary": "Create a new app config element",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Create a new app configuration element. If you submit an existing app configuration \nelement to this endpoint, it will be copied.\n",
        "parameters": [
          {
            "name": "AppConfigElement",
            "in": "body",
            "description": "New app configuration element",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppConfigElement"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/appconfigs/elements/{id}": {
      "get": {
        "operationId": "getAllAppConfigElementRevisions",
        "summary": "Get all revisions for an app config element",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get all revisions for an app config element.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/includeDeleted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfigElementList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAllAppConfigElementRevisions",
        "summary": "Delete all revisions of an app config element",
        "tags": [
          "App Configs",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete all revisions of an app config element.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/appconfigs/elements/{id}/recent": {
      "get": {
        "operationId": "getMostRecentAppConfigElement",
        "summary": "Get most recent app config element",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get most recently app config element.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfigElement"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      }
    },
    "/v3/appconfigs/elements/{id}/revisions/{revision}": {
      "get": {
        "operationId": "getAppConfigElement",
        "summary": "Get an app config element",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Get an app configuration element for this app.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/revision"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AppConfigElement"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "post": {
        "operationId": "updateAppConfigElement",
        "summary": "Update an existing app config element",
        "tags": [
          "App Configs",
          "_For Developers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Update an existing app configuration element.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/revision"
          },
          {
            "name": "AppConfigElement",
            "in": "body",
            "description": "Updated app configuration element",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppConfigElement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionHolder"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_developer"
          }
        }
      },
      "delete": {
        "operationId": "deleteAppConfigElement",
        "summary": "Delete an app config element",
        "tags": [
          "App Configs",
          "_For Developers",
          "_For Admins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "description": "Delete an existing configuration element.\n",
        "parameters": [
          {
            "$ref": "#/parameters/id"
          },
          {
            "$ref": "#/parameters/revision"
          },
          {
            "$ref": "#/parameters/physical"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_admin_developer"
          }
        }
      }
    },
    "/v3/cache": {
      "get": {
        "operationId": "getCacheKeys",
        "summary": "Get all the non-session Redis keys",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/StringList"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/cache/{cacheKey}": {
      "delete": {
        "operationId": "deleteCacheKeys",
        "summary": "Get all the non-session Redis keys",
        "tags": [
          "_For Superadmins"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/parameters/cacheKey"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_superadmin"
          }
        }
      }
    },
    "/v3/recordexportstatuses": {
      "post": {
        "operationId": "updateRecordExportStatuses",
        "summary": "Updates the status of an export job",
        "description": "Updates the status of an export job on the health data records included in that job.\n",
        "tags": [
          "Record Export Statuses",
          "_For Workers"
        ],
        "security": [
          {
            "BridgeSecurity": []
          }
        ],
        "parameters": [
          {
            "name": "RecordExportStatusRequest",
            "in": "body",
            "description": "A record export status request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecordExportStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200_message"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403_not_worker"
          }
        }
      }
    }
  },
  "definitions": {
    "SharingScope": {
      "type": "string",
      "description": "|Enum|Description|\n|---|---|\n|no_sharing| Do not share data generated by this participant with the study team;|\n|sponsors_and_partners|Share data with the study researchers and their researcher partners only;|\n|all_qualified_researchers|Share data with researchers who qualify under the specific governance qualifications to access the study's data set. This may include researchers beyond the sponsors of the original study.|\n",
      "enum": [
        "no_sharing",
        "sponsors_and_partners",
        "all_qualified_researchers"
      ]
    },
    "AccountStatus": {
      "type": "string",
      "description": "Status of a participant's account, for accounts that must verify an email address. \n\n|Status|Description|\n|---|---|\n|unverified|User has not consented to use the support email address.|\n|pending|System is waiting for the user to confirm the address.|\n|verified|User has consented and can sign in to the Bridge server.|\n\nOn creation, the initial status of a user account depends on the email verification policy of \nthe app. If verification is required, the account will be unverified until the participant \nverifies the email address; otherwise it will be enabled.\n",
      "enum": [
        "enabled",
        "disabled",
        "unverified"
      ]
    },
    "CountryCode": {
      "type": "string",
      "description": "The country code of origin of a postal code (ISO 3166-1 alpha-2 format). Bridge only expects \nUS postal codes at this time. Note that this value is specified by the server, it is not \nprovided by the client. That is because, depending on the country of origin, there may be \nspecific rules that need to be applied by the client to ensure the participant's anonymity.\n\n|Type|Description|\n|---|---|\n|ca|Canada|\n|us|United States|\n",
      "enum": [
        "ca",
        "us"
      ]
    },
    "DataType": {
      "type": "string",
      "description": "The data type of the answer to a question. The actual value is always submitted in JSON \nas a string (so no type conversion occurs inadvertently during transfer); the data type \nindicates the intended type of the answer. Each data type has a unique \n[Constraints](#Constraints) object with constraints for that type.\n\n|Type|Description|\n|---|---|\n|string|A string value|\n|integer|An integer value|\n|decimal|A floating point value|\n|boolean|A boolean value (true or false)|\n|date|A date without a time or time zone component|\n|time|A time without a time zone component|\n|datetime|A specific date and time in a specific time zone|\n|duration|*Deprecated.* Use an integer value with a unit instead.|\n|bloodpressure|Systolic and diastolic systemic arterial pressure|\n|height|Height measurement|\n|weight|Weight measurement|\n|yearmonth|Year and month value (\"YYYY-MM\")|\n|year|Year value (\"YYYY\")|\n|postalcode|Partial postal code|\n",
      "enum": [
        "duration",
        "string",
        "integer",
        "decimal",
        "boolean",
        "date",
        "time",
        "datetime",
        "bloodpressure",
        "height",
        "weight",
        "yearmonth",
        "year",
        "postalcode"
      ]
    },
    "Environment": {
      "type": "string",
      "description": "This value should always be set to production.",
      "enum": [
        "local",
        "develop",
        "staging",
        "production"
      ]
    },
    "FileRevisionStatus": {
      "type": "string",
      "description": "|State|Description|\n|---|---|\n|pending|The client has requested and created a `FileRevision` object, and must now PUT the actual file resource to S3, using the `uploadURL` in the `FileRevision` object.|\n|available|The client has called the `finishFileRevision` endpoint and the server confirmed that the file is available.|\n",
      "enum": [
        "pending",
        "available"
      ]
    },
    "NotificationProtocol": {
      "type": "string",
      "description": "Supported notification protocols.\n\n|Protocol|Description|\n|---|---|\n|application|Push notifications, using an endpoint ARN as generated by SNS.|\n|sms|SMS notifications.|\n",
      "enum": [
        "application",
        "sms"
      ]
    },
    "ScheduleType": {
      "type": "string",
      "description": "Schedules come in three major flavors:\n\n|Type|Description|\n|---|---|\n|once|Activity happens once and only once, and then is never scheduled again.|\n|recurring|Activity recurrs periodically, either through the use of a cron schedule, or through the use of properties like `interval`, `times` and `expires`.|\n|persistent|Activity is always in the participant's list of tasks to do. If it is finished, a new activity is scheduled immediately. Client applications may wish to show these differently in the UI.|\n",
      "enum": [
        "once",
        "recurring",
        "persistent"
      ]
    },
    "SmsType": {
      "type": "string",
      "description": "Represents whether an SMS message is a transactional or a promotional message.\n\n|Type|Description|\n|---|---|\n|promotional|Promotional messages are anything other than transactional messages. This includes things like reminders, notifications, and newsletters.|\n|transactional|Transactional messages are messages related to account workflow (sign-in, verification) or messages required by governance (consent).|\n",
      "enum": [
        "promotional",
        "transactional"
      ]
    },
    "Role": {
      "type": "string",
      "description": "The roles assigned to this user. Normal users do not have any roles assigned, but for developers, \nresearchers, etc. their roles will appear hear (see main API documentation about the roles \nassigned by the Bridge server).\n\n|Role|Description|\n|---|---|\n|developer|A user with the rights to use the app configuration APIs (all admin APIs except for those APIs which expose information about study participants).|\n|researcher|The research role is assigned to users who have permission to see the users in a study and the activity of participants. We will assign this role to developers during the initial development of the application so they can view the uploads of test accounts, etc.|\n|admin|A Sage Bionetworks Bridge administrator (internal to Bridge).|\n|worker|A Sage Bionetworks worker process (internal to Bridge).|\n",
      "enum": [
        "developer",
        "researcher",
        "admin",
        "worker"
      ]
    },
    "ActivityType": {
      "type": "string",
      "description": "An activity represents either a survey or a task to be performed (not both).\n\n|Type|Description|\n|---|---|\n|compound|Activity represents multiple surveys or tasks.|\n|survey|Activity represents a survey. The activity should contain a survey stanza.|\n|task|Activity represents any other task. The activity should contain a task stanza.|\n",
      "enum": [
        "compound",
        "survey",
        "task"
      ]
    },
    "Unit": {
      "type": "string",
      "description": "The unit of measurement being used for a numeric value when it is expressing something like \na duration, weight, or length.\n\n## Duration\n|Type|Description|\n|---|---|\n|seconds|Seconds|\n|minutes|Minutes|\n|hours|Hours|\n|days|Days|\n|weeks|Weeks|\n|months|Months|\n|years|Years|\n\n## US Customary measures\n|Type|Description|\n|---|---|\n|inches|Inches|\n|feet|Feet|\n|yards|Yards|\n|miles|Miles|\n|ounces|Ounces|\n|pounds|Pounds|\n|pints|Pints|\n|quarts|Quarts|\n|gallons|Gallons|\n\n## Metric measures\n|Type|Description|\n|---|---|\n|centimeters|Centimeters|\n|meters|Meters|\n|kilometers|Kilometers|\n|grams|Grams|\n|kilograms|Kilgrams|\n|milliliters|Milliliters|\n|cubic_centimeters|Cubic centimeters (cc)|\n|liters|Liters|\n|cubic_meters|Cubic meters (m<sup>3</sup>)|\n\n## Pressure measures\n|Type|Description|\n|---|---|\n|millimeters_mercury|Millimeters of Mercury (mmHg)|\n",
      "enum": [
        "seconds",
        "minutes",
        "hours",
        "days",
        "weeks",
        "months",
        "years",
        "inches",
        "feet",
        "yards",
        "miles",
        "ounces",
        "pounds",
        "pints",
        "quarts",
        "gallons",
        "centimeters",
        "meters",
        "kilometers",
        "grams",
        "kilograms",
        "milliliters",
        "cubic_centimeters",
        "liters",
        "cubic_meters",
        "millimeters_mercury"
      ]
    },
    "MimeType": {
      "type": "string",
      "description": "Available MIME types:\n\n|Type|Description|\n|---|---|\n|text/plain|Plain text|\n|text/html|HTML|\n|application/pdf|PDF document|\n",
      "enum": [
        "text/plain",
        "text/html",
        "application/pdf"
      ]
    },
    "UIHint": {
      "type": "string",
      "description": "A string \"hint\" to the user interface about the kind of user interface component that should be used to render the question (see values, above). The survey designer provides this hint, but the client application may ignore it or map it to a different set of controls, as desired. For a given data type, there is a defined subset of valid UI hints, which are detailed in the constraints model object documentation.\n\n|Hint|Description|Conditions|\n|---|---|---|\n|bloodpressure|A control that allows a user to enter systolic and diastolic blood pressure values||\n|checkbox|A checkbox that can be used for a boolean value, or for selecting zero or more multiple values from an enumerated list.|Question will always include an enumeration of answers to display.|\n|combobox|An input that allows a user to enter free form text, or select from an enumerated list of answers. An alternative representation would be a set of radio buttons, with the last button selecting an \"other\" option with an associated text input control.|Question will always include an enumeration of answers to display.|\n|datepicker|A control that allows a user to select a date (with no time of day component).||\n|datetimepicker|A control that allows a user to select a time of day on a specific date. It should default to the current day and allow easy selection of a time of day today.||\n|height|A control for entering an adult or infant height value in a specified unit of measurement||\n|list|A control that shows a list, and allows for selection of zero or more elements. On some platforms, this is the same as a list of checkboxes (and in HTML can be rendered with a multiple select control).|Question will always include an enumeration of answers to display.|\n|multilinetext|A control for entering longer texts, at least showing multiple lines for input and possibly also providing additional controls (such as a simple WYSIWYG editor with cut-and-paste support or spell checking).||\n|numberfield|An input for entering numbers that includes \"spinner\" controls to increment or decrement a numeric value. The minimum and maximum values, as well as the amount the value is changed by these controls, should be defined by the minValue, maxValue, and step constraints of integer and decimal questions.||\n|radiobutton|Two or more controls that allow for exclusive selection of one item from a list of choices.This can be achieved as well through a list where only one item may be selected.|Question will always include an enumeration of answers to display.|\n|select|A select or picker control for selection of one option from a list of options.|Question will always include an enumeration of answers to display.|\n|slider|A slider control for selection of a continuous value, like a decimal number, or a scale control for selection either of a discrete value such as an integer or a set of string values (where such values are ordered and make sense in this presentation, e.g. \"no pain\" to \"extremely painful\"). If used for an integer or decimal question, the minimum and maximum value constraints, as well as the step constraint, should be used to define the behavior of the slider. If used for an enumerated set of values, each discrete setting of the control (it should not slide continuously) should select a value from the list.|Question **must** include an enumeration of answers to display if the data type is not integer or decimal.|\n|textfield|A single line text field. Note that if there are set values for this textfield, but the user can essentially enter an \"other\" value as well, then the combobox hint with a set of enumerated values should be used.||\n|timepicker|An input for entering a time with no reference to the date of the time.||\n|toggle|A switch or toggle control to select a boolean state||\n|weight|A control for entering an adult or infant weight value in a specified unit of measurement||\n|yearmonth|A control for entering a year and month. This is often a custom UI control.||\n|year|A specialized control for entering a year. This is often a custom UI control.||\n|postalcode|A control for entering a partial postal code. For example, to enter the first three digits of a US zip code, the control might have an input like ___XX.||\n",
      "enum": [
        "bloodpressure",
        "checkbox",
        "combobox",
        "datepicker",
        "datetimepicker",
        "height",
        "list",
        "multilinetext",
        "numberfield",
        "radiobutton",
        "select",
        "slider",
        "textfield",
        "timepicker",
        "toggle",
        "weight",
        "yearmonth",
        "year",
        "postalcode"
      ]
    },
    "Operator": {
      "type": "string",
      "description": "|Value|Operator meaning|\n|---|---|\n|eq|answer is equal to value|\n|ne|answer is not equal to value|\n|lt|answer is less than value|\n|gt|answer is greater than value|\n|le|answer is less than or equal to value|\n|ge|answer is greater than or equal to value|\n|de|user declines to answer this question (it is being skipped)|\n|always|always do this action after showing the question or screen|\n|any|one of the members of a data group set must be assigned to the survey taker|\n|all|all of the members of a data group set must be assigned to the survey taker|\n",
      "enum": [
        "eq",
        "ne",
        "lt",
        "gt",
        "le",
        "ge",
        "de",
        "always",
        "any",
        "all"
      ]
    },
    "ReportType": {
      "type": "string",
      "description": "The type of report:\n\n|Type|Description|\n|---|---|\n|participant|Reports are scoped to an individual participant and can only be seen by the participant or a researcher|\n|study|Reports are available to all authenticated users in a study|\n",
      "enum": [
        "participant",
        "study"
      ]
    },
    "SharedModuleType": {
      "type": "string",
      "description": "Enum to tag shared module metadata as either a schema or a survey.",
      "enum": [
        "schema",
        "survey"
      ]
    },
    "TemplateType": {
      "type": "string",
      "description": "The role a template plays in the messaging of the system.\n\n|Value|Description|\n|---|---|\n|email_account_exists|Email message notifying participant that their email address has already been registered with this app|\n|email_app_install_link|Email message sending app install information to the participant|\n|email_reset_password|Email message providing a link to reset the participant's password|\n|email_sign_in|Email message providing a link to sign in to an app|\n|email_signed_consent|Email message containing the written consent document a user has agreed to in joining a specific population (consent group).|\n|email_verify_email|Email message asking the participant to trigger a link that will verify their control of an email address|\n|sms_account_exists|SMS message notifying participant that their email address has already been registered with this app|\n|sms_app_install_link|SMS message sending app install information to the participant|\n|sms_phone_sign_in|SMS message providing a link to sign in to an app|\n|sms_reset_password|SMS message providing a link to reset the participant's password|\n|sms_signed_consent|SMS message containing the written consent document a user has agreed to in joining a specific population (consent group).|\n|sms_verify_phone|SMS message asking the participant to enter a code or trigger a link that will verify their control of a phone number|\n",
      "enum": [
        "email_account_exists",
        "email_app_install_link",
        "email_reset_password",
        "email_sign_in",
        "email_signed_consent",
        "email_verify_email",
        "sms_account_exists",
        "sms_app_install_link",
        "sms_phone_sign_in",
        "sms_reset_password",
        "sms_signed_consent",
        "sms_verify_phone"
      ]
    },
    "UploadStatus": {
      "type": "string",
      "description": "The status of the upload:\n\n|Status|Description|\n|---|---|\n|unknown|Upload status is unknown. This is generally used for older data formats (namely, Upload v1), which had a binary complete flag rather than an UploadStatus.|\n|requested|Initial state. Upload is requested. User needs to upload to specified URL and call uploadComplete.|\n|validation_in_progress|Client process has called uploadComplete. Upload validation is currently taking place.|\n|validation_failed|Upload validation has failed (see the validationMessageList for further details).|\n|succeeded|Upload has succeeded, including validation. Note that export to Synapse is a separate step.|\n",
      "enum": [
        "unknown",
        "requested",
        "validation_in_progress",
        "validation_failed",
        "duplicate",
        "succeeded"
      ]
    },
    "UploadSchemaType": {
      "type": "string",
      "description": "The type of data being uploaded.\n\n|Status|Description|\n|---|---|\n|ios_survey|Survey data|\n|ios_data|All other kinds of data (e.g. from sensors or tasks in your app).|\n|upload_v2|*Reserved for future use.*|\n",
      "enum": [
        "ios_data",
        "ios_survey",
        "upload_v2"
      ]
    },
    "UploadValidationStrictness": {
      "type": "string",
      "description": "Enumeration of upload validation strictness settings.\n\n|Setting|Description|\n|---|---|\n|warning|The default setting, which is to log a warning into the Bridge Server logs.|\n|report|In addition to logging a warning, this writes a validation message back into the health data record and exports that message to Synapse.|\n|strict|Throws an error if validation fails.|\n",
      "enum": [
        "warning",
        "report",
        "strict"
      ]
    },
    "SynapseExporterStatus": {
      "type": "string",
      "description": "The status of the job that exports the data of this upload to Synapse. \n\n|Value|Description|\n|---|---|\n|not_exported|Record related to this upload has not been exported to Synapse.|\n|succeeded|Record related to this upload has been exported to Synapse and is available to researchers.|\n",
      "enum": [
        "not_exported",
        "succeeded"
      ]
    },
    "ScheduleStatus": {
      "type": "string",
      "description": "Status of this activity.\n\n|Status|Description|\n|---|---|\n|scheduled|User should do this activity in the future.|\n|available|User should do this activity now.|\n|started|User has started this activity and sent a startedOn timestamp to the server.|\n|deleted|User had delete the activity (set a finishedOn timestamp with no startedOn timestamp).|\n|finished|User has finished the task (by sending a finishedOn timestamp to the server). The participant currently should not get these back from the server.|\n|expired|The activity was not started by the user, but now should no longer be done. The participant currently should not get these back from the server.|\n",
      "enum": [
        "deleted",
        "finished",
        "started",
        "expired",
        "scheduled",
        "available"
      ],
      "readOnly": true
    },
    "UploadFieldType": {
      "type": "string",
      "description": "This class is unusual in the API in that the `type` attribute is not a constant `UploadFieldDefinition` string, it \nis one of the enumerated values and indicates the type of the field, not the type of the model object:\n\n|Type|Description|\n|---|---|\n|attachment_v2|Attachment. When selected, `fileExtension` and `mimeType` can refine the field definition|\n|boolean|Boolean|\n|calendar_date|Date (no time of day)|\n|timestamp|Date &amp; Time (a timestamp)|\n|float|Decimal|\n|inline_json_blob|Writes a small JSON blob inline into the health data table.|\n|int|Integer|\n|large_text_attachment|A value that is written to Synapse as a LargeText (unbounded String), but stored in Bridge as an attachment.|\n|multi_choice|A JSON array of strings, representing answers to a multiple choice question that allows multiple selections.|\n|single_choice|A string representing the answer to a multiple choice question that allows only a single selection.|\n|string|String. When selected, `maxLength` and `unboundedText` can refine the field definition|\n|time_v2|Time of Day (no date or timezone)|\n|attachment_blob|Deprecated|\n|attachment_csv|Deprecated|\n|attachment_json_blob|Deprecated|\n|attachment_json_table|Deprecated|\n|duration_v2|Deprecated|\n",
      "enum": [
        "attachment_blob",
        "attachment_csv",
        "attachment_json_blob",
        "attachment_json_table",
        "attachment_v2",
        "boolean",
        "calendar_date",
        "duration_v2",
        "float",
        "inline_json_blob",
        "int",
        "large_text_attachment",
        "multi_choice",
        "single_choice",
        "string",
        "time_v2",
        "timestamp"
      ]
    },
    "ResourceCategory": {
      "type": "string",
      "description": "A category of documentary resource link. The APIs allow you to retrieve resource links by category.\n\n|Type|Description|\n|---|---|\n|customization_options|Documentation of the fields in an associated assessment's configuration that can be customized after importing the assessment into an app context|\n|data_repository|A data repository holding data that has been generated through software using this assessment|\n|science_documentation|Documentation of the scientific validation and norming work that has been done to assure the utility of this assessment|\n|developer_documentation|Documentation for software engineers of the underlying assessment configuration, and the software that exists to run the assessment in an app|\n|license|The license for use of the assessment or its software|\n|publication|A publication citation for a publication that has used data generated through this assessment.|\n|release_note|A release note for a specific software version of this assessment (the the minRevision and maxRevision of the `ExternalResource` should both be set to the version of the assessment being documented by this release note|\n|sample_app|An example of the usage of the assessment in a sample app|\n|sample_data|An example of the data that is generated by the assessment|\n|screenshot|A screenshot of the assessment in use|\n|see_also|A link to related research or assessments for further contextualization of the assessment|\n|used_in_study|A link to a Bridge app or study that has used this assessment|\n|website|An external website related to the assessment|\n|other|Any other kind of resource|\n",
      "enum": [
        "customization_options",
        "data_repository",
        "science_documentation",
        "developer_documentation",
        "license",
        "publication",
        "release_note",
        "sample_app",
        "sample_data",
        "screenshot",
        "see_also",
        "used_in_study",
        "website",
        "other"
      ]
    },
    "ABTestGroup": {
      "type": "object",
      "description": "A list of these groups define the way schedules are allocated in an ABTestScheduleStrategy (each schedule associated to a percentage). See [ABTestScheduleStrategy](#ABTestScheduleStrategy) for details. \n",
      "required": [
        "percentage",
        "schedule"
      ],
      "properties": {
        "percentage": {
          "type": "integer",
          "description": "The percentage of users to assign to this schedule.",
          "x-nullable": false
        },
        "schedule": {
          "description": "The schedule to assign to these users.",
          "$ref": "#/definitions/Schedule",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ABTestGroup",
          "x-nullable": false
        }
      }
    },
    "ABTestScheduleStrategy": {
      "description": "A strategy that divides users into groups according to a percentage scheme, assigning each group a different [Schedule](/#Schedule). The combined set of schedule groups should have percentages that add up to 100%. After the initial assignment, new users joining the app will be randomly assigned to one of the groups in proportion to their percentage representation in the app.\n\nNote that this assignment is truly random, so in small populations the percentages may diverge from those specified in the schedule plan.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "required": [
            "scheduleGroups"
          ]
        },
        {
          "properties": {
            "scheduleGroups": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ABTestGroup"
              },
              "x-nullable": false
            }
          }
        }
      ]
    },
    "AbstractStudyParticipant": {
      "type": "object",
      "description": "Common fields for the SignUp and StudyParticipant payloads. This is an abstract class that cannot be used directly through the API.",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name (given name) of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name (family name) of the user."
        },
        "externalId": {
          "type": "string",
          "description": "An externally-assignable identifier a research partner can use to re-identify a user's data in the exported data set (this must be provided by the application, it is not created by Bridge). The value can be set on creation or added on an account update, but it will be returned in the `externalIds` mapping which specifies the substudy within which the external ID was defined. This field will be null when \nretrieved from the server.\n"
        },
        "synapseUserId": {
          "type": "string",
          "description": "The numerical identifier for a Synapse account. For administrative accounts, this will allow the user to sign in using Synapse accounts, no further credentials are needed to access the system. This value can only be set when creating an account; otherwise the identifiers update API must be used to add the ID to an existing account.\n"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "An ID assigned to this account by Bridge system. This ID is exposed in the API and is different from the health code assigned to the user's anonymized data. Bridge never exports this ID along with the health code from Bridge.  \n",
          "x-nullable": false
        },
        "notifyByEmail": {
          "type": "boolean",
          "default": true,
          "description": "True if the user has consented to be contacted via email outside the application, false otherwise.\n",
          "x-nullable": false
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of user profile attributes that have been set for this user (the attributes themselves must be specified in the app's configuration, and the values are stored encrypted in case they capture personally-identifying information).\n",
          "x-nullable": false
        },
        "sharingScope": {
          "$ref": "#/definitions/SharingScope",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the account was created.",
          "x-nullable": false
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Has the user verified that they have control of this email address?",
          "x-nullable": false
        },
        "phoneVerified": {
          "type": "boolean",
          "description": "Has the user verified that they have control of this phone number?",
          "x-nullable": false
        },
        "status": {
          "$ref": "#/definitions/AccountStatus",
          "x-nullable": false
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Role"
          },
          "x-nullable": false
        },
        "dataGroups": {
          "type": "array",
          "description": "The data groups set for this user. Data groups must be strings that are defined in the list of all valid data groups for the app, as part of the app object. \n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "clientData": {
          "type": "object",
          "description": "Client data for a user should be in a syntactically valid JSON format. It will be returned as is to the client (as JSON).\n",
          "additionalProperties": true
        },
        "languages": {
          "type": "array",
          "description": "Two letter language codes to assign to this user (these are initially retrieved from the user's `Accept-Language` header and then persisted as part of account configuration). \n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "substudyIds": {
          "type": "array",
          "description": "The substudies this participant is associated to.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "externalIds": {
          "type": "object",
          "readOnly": true,
          "description": "The exernal IDs this participant is associated to, mapped to the substudy that issued the external ID. Typically a user signs up with the external ID, and is assigned to that substudy as a result.",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        }
      }
    },
    "AccountSummary": {
      "description": "Summary of a participant, used in APIs to search and retrieve participant accounts. This payload is returned from the API, but is never submitted to the API.\n",
      "type": "object",
      "readOnly": true,
      "properties": {
        "firstName": {
          "type": "string",
          "readOnly": true,
          "description": "First (given) name of user."
        },
        "lastName": {
          "type": "string",
          "readOnly": true,
          "description": "Last (family) name of user."
        },
        "email": {
          "type": "string",
          "readOnly": true,
          "description": "Email address of user."
        },
        "phone": {
          "$ref": "#/definitions/Phone",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "An identifier assigned to this user, used to retrieve a study participant record.",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "ISO 8601 date and time that the user account was created.",
          "x-nullable": false
        },
        "status": {
          "$ref": "#/definitions/AccountStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "appId": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "substudyIds": {
          "type": "array",
          "readOnly": true,
          "description": "The substudies this participant is associated to.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "externalIds": {
          "type": "object",
          "readOnly": true,
          "description": "A map of substudy ID to external ID for all the external IDs that have been assigned to this participant.",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "synapseUserId": {
          "type": "string",
          "readOnly": true,
          "description": "The numerical identifier for a Synapse account. For administrative accounts, this will allow the user to sign in using Synapse accounts, no further credentials are needed to access the system.\n"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AccountSummary",
          "x-nullable": false
        }
      }
    },
    "AccountSummarySearch": {
      "description": "Search criteria to retrieve account summaries of study participants. This payload is sent to the server but is never returned via the API.\n",
      "type": "object",
      "properties": {
        "pageSize": {
          "description": "maximum number of records in each returned page",
          "type": "integer",
          "format": "int32",
          "default": 50,
          "maximum": 100
        },
        "offsetBy": {
          "description": "next page start offset for pagination",
          "type": "integer",
          "format": "int32",
          "default": 0
        },
        "emailFilter": {
          "description": "return records that have email addresses that match this substring",
          "type": "string"
        },
        "phoneFilter": {
          "description": "return records that have phone numbers that match this substring",
          "type": "string"
        },
        "allOfGroups": {
          "description": "return records that have all of these data groups",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "noneOfGroups": {
          "description": "return records that have none of these data groups",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "language": {
          "description": "return records that have this record as a declared language",
          "type": "string"
        },
        "startTime": {
          "description": "return record created on or after this day",
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "description": "return record on or before this day",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AccountSummarySearch",
          "x-nullable": false
        }
      }
    },
    "Activity": {
      "description": "When creating an activity as part of a Schedule, you will need to supply a SurveyReference or a TaskReference in the activity. When these are returned, any survey reference that points to the \"most recently published\" survey will be resolved to a specific survey revision (the one most recently published).\n\nScheduled activities may be requested into the future by the client, and then cached. So if a survey is changed and published, it may be a few days before participants receive the updated survey.\n",
      "type": "object",
      "required": [
        "label",
        "guid",
        "activityType"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to show the user for this activity.",
          "x-nullable": false
        },
        "labelDetail": {
          "type": "string",
          "description": "Detail information for the activity (common uses have included indicating the number of \nquestions, or the average time it takes to complete the activity).\n"
        },
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "compoundActivity": {
          "$ref": "#/definitions/CompoundActivity"
        },
        "task": {
          "$ref": "#/definitions/TaskReference"
        },
        "survey": {
          "$ref": "#/definitions/SurveyReference"
        },
        "activityType": {
          "$ref": "#/definitions/ActivityType",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Activity",
          "x-nullable": false
        }
      }
    },
    "ActivityEvent": {
      "description": "Activity event for a participant, used for scheduling activities.\n",
      "type": "object",
      "required": [
        "eventId",
        "timestamp"
      ],
      "properties": {
        "eventId": {
          "type": "string",
          "description": "event identifier",
          "x-nullable": false
        },
        "answerValue": {
          "type": "string",
          "description": "answer value for a question event",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time that the event occured",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ActivityEvent",
          "x-nullable": false
        }
      }
    },
    "AndroidAppLink": {
      "type": "object",
      "required": [
        "namespace",
        "package_name",
        "sha256_cert_fingerprints"
      ],
      "properties": {
        "namespace": {
          "type": "string",
          "x-nullable": false
        },
        "package_name": {
          "type": "string",
          "x-nullable": false
        },
        "sha256_cert_fingerprints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AndroidAppLink",
          "x-nullable": false
        }
      }
    },
    "App": {
      "description": "An app with its many configuration options.\n",
      "type": "object",
      "required": [
        "name",
        "shortName",
        "sponsorName",
        "supportEmail",
        "identifier",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "A label for the app. This will be shown to users in emails and other contexts.",
          "x-nullable": false
        },
        "shortName": {
          "type": "string",
          "description": "A very short label (10 characters or less) for SMS messages and any other highly constrainted contexts.",
          "x-nullable": false
        },
        "automaticCustomEvents": {
          "type": "object",
          "description": "Custom events that should be generated for participant upon enrollment. The key in this map is the eventKey, and the value is the offset after the enrollment event (eg, \"P1D\" for one day after enrollment, \"P-2W\" for 2 weeks before enrollment). Note that this API will automatically pre-pend \"custom:\" in front of the event key when generating the eventId (eg, eventKey \"studyBurstStart\" becomes event ID \"custom:studyBurstStart\").\n",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "autoVerificationEmailSuppressed": {
          "description": "True if the automatic email verification email on sign-up should be suppressed. False if the email should be sent on sign-up. This is generally used in conjunction with email sign-in, where sending a separate email verification email would be redundant.\n",
          "type": "boolean",
          "x-nullable": false
        },
        "consentNotificationEmailVerified": {
          "description": "True if the consent notification email is verified. False if not.",
          "type": "boolean"
        },
        "fitBitScopes": {
          "type": "array",
          "description": "List of FitBit scopes that are configured for this app.",
          "items": {
            "type": "string"
          }
        },
        "installLinks": {
          "type": "object",
          "description": "This can be either to an app store (URLs mapped to the keys \"iOS\" or \"Android\"), or an intermediate web\npage that will route to a final app or appstore (URLs mapped to the key \"Universal\"). iOS and Android take\nprecedence over the Universal URL.\n",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "participantIpLockingEnabled": {
          "description": "True if sessions for unprivileged participant accounts should be locked to an IP address. (Privileged account sessions are _always_ locked to an IP address.)",
          "type": "boolean",
          "x-nullable": false
        },
        "sponsorName": {
          "type": "string",
          "description": "The name of the institution or organization that is conducting the app.",
          "x-nullable": false
        },
        "supportEmail": {
          "type": "string",
          "description": "The email address that will be given to study participants and other end users to contact for support requests. This can be a comma-separated list of email addresses. Email will be sent via this email address.\n",
          "x-nullable": false
        },
        "technicalEmail": {
          "type": "string",
          "description": "The email address for a technical contact who can coordinate with the Bridge Server team on technical issues (client or server). This can be a comma-separated list of email addresses.\n"
        },
        "uploadMetadataFieldDefinitions": {
          "type": "array",
          "description": "Metadata fields can be configured for any app. This metadata will be implicitly added to every schema and automatically added to every Synapse table.\n\nAll metadata field definitions are implicitly optional. The \"required\" field in metadata field definitions is ignored.\n",
          "items": {
            "$ref": "#/definitions/UploadFieldDefinition"
          },
          "x-nullable": false
        },
        "uploadValidationStrictness": {
          "$ref": "#/definitions/UploadValidationStrictness",
          "x-nullable": false
        },
        "consentNotificationEmail": {
          "type": "string",
          "description": "Copies of all consent agreements and withdrawals will be emailed to this address. This can be a comma-separated list of email addresses.\n"
        },
        "identifier": {
          "type": "string",
          "description": "A user selected identifier that is unique relative to all other Bridge studies (lower-case letters and dashes only). The identifier serves as a \"domain\" that scopes accounts to that app, and is usually created by combining an institution and app tag or acronym. For example, if you work at the University of Washington and your app is on Asthma in Children, your identifier might be `uw-child-asthma`. Participants will not see this identifier.\n",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "A version number used for optimistic locking of the object these keys represent; this value must be passed back to the server on updates. If the version doesn't match the version in the database, an error will be returned (409 Conflict) and the app will not be saved. \n",
          "x-nullable": false
        },
        "minAgeOfConsent": {
          "type": "integer",
          "default": 18,
          "description": "The minimum required age for participants in the app. If the user reports they are younger than this age, they will not be allowed to consent to the research.\n",
          "x-nullable": false
        },
        "appIdExcludedInExport": {
          "description": "True if the Bridge Exporter should include the appId prefix in the \"originalTable\" field in the appVersion (now \"Health Data Summary\") table in Synapse. This is false for legacy studies for backwards compatibility, but is true for all new studies being created.\n\nThis can only be changed by a Bridge admin. Care should be taken before changing this setting, as it may partition the data in Synapse.\n",
          "type": "boolean",
          "x-nullable": false
        },
        "synapseDataAccessTeamId": {
          "type": "integer",
          "format": "int64",
          "description": "Synapse team ID that is granted read access to exported health data records.\n"
        },
        "synapseProjectId": {
          "type": "string",
          "description": "The Synapse project to export health data records to."
        },
        "usesCustomExportSchedule": {
          "type": "boolean",
          "description": "**Note: Bridge engineers will normally set this value when setting up data export. You should probably leave this setting as is.** By default, all studies are exported using the default nightly schedule. Some studies may need custom schedules for hourly or on-demand exports. To prevent this app from being exported twice (once by the custom schedule, once by the default schedule), you should set this attribute to true.\n",
          "x-nullable": false
        },
        "userProfileAttributes": {
          "type": "array",
          "description": "Custom attributes that can be added to the StudyParticipant object (as members of the attributes property). For example, if you wished to collect a telephone number for participants and had permission to do so, you could add the \"telephone\" attribute. The map of a user's profile attributes can be personally identifying health information; it will be stored encrypted and in a separate data store from the participant's health data.\n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "taskIdentifiers": {
          "type": "array",
          "description": "An enumerated list of **unique** strings that can be used to identify tasks when creating schedules. These mostly serve to prevent typos when designing schedules, which would prevent client scheduling from working. There's no hard limit on the string content (e.g. \"Tapping Test\" is fine as a task identifier, as long as it uniquely identifies a task known to the application).\n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "activityEventKeys": {
          "type": "array",
          "description": "The enumerated activity event keys for timestamps that can be recorded for use when scheduling tasks. These are provided through the UI to prevent errors when creating schedules. These form a whitelist for custom activity events that may be recorded for a participant.\n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "dataGroups": {
          "type": "array",
          "description": "An enumerated list of **unique** strings that can be assigned to user accounts. This is a list of the \"tags\" that can be assigned to a given user. The specific data groups that *are* assigned to a user will be exported with a participant's health data to Synapse. This can be used to identify test users or specific cohorts in the app, but it should not include sensitive health information about participants. Strings must contain only letters, numbers, underscore or dash, and cannot (as a comma-separated list) exceed the character limit of 100 characters so they can be exported to Synapse.\n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "passwordPolicy": {
          "description": "Settings that will govern what is accepted as a valid password when users sign up for the app. If not included, the password policy will default to requiring 8 characters, including lower and upper-case letters, at least one number and at least one symbol.\n",
          "$ref": "#/definitions/PasswordPolicy",
          "x-nullable": false
        },
        "active": {
          "type": "boolean",
          "readOnly": true,
          "x-nullable": false
        },
        "strictUploadValidationEnabled": {
          "description": "True if uploads in this app should fail on strict validation errors.",
          "type": "boolean",
          "x-nullable": false
        },
        "healthCodeExportEnabled": {
          "type": "boolean",
          "description": "**Can only be set by an administrator.** Should user health codes be exported as part of the participant roster? This identifies users in the public data set; this can only be set to true for certain studies where users expect to be identified by researchers.\n",
          "x-nullable": false
        },
        "emailVerificationEnabled": {
          "type": "boolean",
          "description": "**Can only be set by an administrator.** Should users be asked to validate that they control the email addresses they use to sign up for the app? True by default.  (Using an email address to send a \nsign in link will also verify it.)\n",
          "x-nullable": false
        },
        "autoVerificationPhoneSuppressed": {
          "type": "boolean",
          "description": "**Can only be set by an administrator.** Should the system send a confirmation SMS message on sign \nup if phone verification is enabled?\n",
          "x-nullable": false
        },
        "emailSignInEnabled": {
          "type": "boolean",
          "default": false,
          "description": "**Can only be set by an administrator.** If enabled, the user will be able to trigger an email with an URL that can be used to sign into the server, in lieu of a normal sign in process.\n",
          "x-nullable": false
        },
        "phoneSignInEnabled": {
          "type": "boolean",
          "default": false,
          "description": "**Can only be set by an administrator.** If enabled, the user will be able to trigger an SMS message which contains a token that can be used to sign in to the server, in lieu of a normal sign in process.\n",
          "x-nullable": false
        },
        "reauthenticationEnabled": {
          "type": "boolean",
          "default": true,
          "description": "**Can only be set by an administrator.** Enable or disable the ability to issue a reauthentication token in a session, and call the reauthentication APIs to issue a new session. \n",
          "x-nullable": false
        },
        "externalIdRequiredOnSignup": {
          "type": "boolean",
          "default": false,
          "description": "**Can only be set by an administrator.** Should the external ID be required on sign up? If this is true and external ID validation is enabled, this app can support lab codes (where the username and password are auto-generated from the external ID and the user only needs to enter a code).\n",
          "x-nullable": false
        },
        "verifyChannelOnSignInEnabled": {
          "type": "boolean",
          "default": true,
          "description": "**Can only be changed by an administrator.** Should the the credential that is submitted during sign-in \nbe verified? This is always true (with the exception of legacy studies) and should not be changed.\n",
          "x-nullable": false
        },
        "accountLimit": {
          "type": "integer",
          "default": 0,
          "description": "**Can only be set by an administrator.** If not zero, sets an upper-bound limit on the number of accounts that can be created for this app. Once this number is reached, no more sign ups or user creation can occur.\n",
          "x-nullable": false
        },
        "disableExport": {
          "type": "boolean",
          "default": false,
          "description": "If set this field to true, Bridge Exporter will not export this app at all during exporting.\n",
          "x-nullable": false
        },
        "minSupportedAppVersions": {
          "type": "object",
          "description": "Minimum supported app versions (older versions will be blocked), keyed by the name of the operating system (we expect either \"Android\" or \"iPhone OS\" in the User-Agent header of all requests sent to the server). Example: `{\"iPhone OS\":14,\"Android\":10}` \n",
          "additionalProperties": {
            "type": "integer"
          },
          "x-nullable": false
        },
        "oAuthProviders": {
          "type": "object",
          "description": "The metadata to contact OAuth providers for the Authorization Code Grant Flow.\n",
          "additionalProperties": {
            "$ref": "#/definitions/OAuthProvider"
          },
          "x-nullable": false
        },
        "pushNotificationARNs": {
          "type": "object",
          "description": "A map between operating system names, and the platform ARN necessary to register a device to receive mobile push notifications. The operating system names are currently \"Android\" and \"iPhone OS\". The ARN (Amazon Resource Name) is the name of the Application/platform ARN defined in SNS (currently this must be done by a Bridge administrator).\n",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "appleAppLinks": {
          "type": "array",
          "description": "The entries this app contributes to the `/.well-known/apple-app-site-association` file to enable universal links for iOS apps that use this app as the data store.\n",
          "items": {
            "$ref": "#/definitions/AppleAppLink"
          },
          "x-nullable": false
        },
        "androidAppLinks": {
          "type": "array",
          "description": "The entries this app contributes to the `/.well-known/assetlinks.json` file to enable app links for Android apps that use this app as the data store.\n",
          "items": {
            "$ref": "#/definitions/AndroidAppLink"
          },
          "x-nullable": false
        },
        "defaultTemplates": {
          "type": "object",
          "description": "A map between a type of template, and the template revision that should be used as a default if matching templates to a user is ambiguous.\n",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "App",
          "x-nullable": false
        }
      }
    },
    "AppAndUsers": {
      "description": "The holder object for App, a list of User and a list of admin IDs\n",
      "type": "object",
      "required": [
        "adminIds",
        "app",
        "users"
      ],
      "properties": {
        "adminIds": {
          "type": "array",
          "description": "A list of Synapse admin user IDs.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "app": {
          "$ref": "#/definitions/App",
          "x-nullable": false
        },
        "users": {
          "type": "array",
          "description": "A list of users in the new Study.",
          "items": {
            "$ref": "#/definitions/StudyParticipant"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AppAndUsers",
          "x-nullable": false
        }
      }
    },
    "AppConfig": {
      "description": "An app configuration object.\n",
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was last modified.",
          "x-nullable": false
        },
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this app config been logically deleted (an admin can restore it)?",
          "x-nullable": false
        },
        "criteria": {
          "$ref": "#/definitions/Criteria",
          "description": "Optional selection criteria that can be used to determine if an app should receive this configuration record or not. It is an error for a request to match more or less than one app config record. \n",
          "x-nullable": false
        },
        "clientData": {
          "type": "object",
          "description": "An arbitrary object that will be serialized and stored as JSON using the GSON serialization mechanisms. In Java this field is an Object; since the type of the object is not known, the rest-client includes a utility method:\n```\nMyCustomObject data = RestUtils.toType(\n    activity.getClientData(), MyCustomObject.class);\n```\n"
        },
        "surveyReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveyReference"
          },
          "x-nullable": false
        },
        "schemaReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaReference"
          },
          "x-nullable": false
        },
        "configReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigReference"
          },
          "x-nullable": false
        },
        "fileReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileReference"
          },
          "x-nullable": false
        },
        "configElements": {
          "type": "object",
          "description": "A map of app config element IDs to the app config element JSON of a specific app config element revision (the revision given in the configReferences map).\n",
          "additionalProperties": {
            "type": "object"
          },
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the app config. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of `AppConfig` needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AppConfig",
          "x-nullable": false
        }
      }
    },
    "AppConfigElement": {
      "description": "An element of an app configuration object.\n",
      "type": "object",
      "required": [
        "id",
        "data",
        "revision"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier for this app config element. All revisions of this element will have the same id.\n",
          "x-nullable": false
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Revision number of the app config element, used to distinguish revisions of the element. Each revision will also have an optimistic locking `version` which should always be passed back as is when updating a specific revision of the element.\n",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this app config element been logically deleted (an admin can restore it)?\n",
          "x-nullable": false
        },
        "data": {
          "type": "object",
          "description": "The JSON data of this element."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was last modified.",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the app config element. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of this `AppConfigElement` revision needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AppConfigElement",
          "x-nullable": false
        }
      }
    },
    "AppleAppLink": {
      "type": "object",
      "required": [
        "appID",
        "paths"
      ],
      "properties": {
        "appID": {
          "type": "string",
          "x-nullable": false
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AppleAppLink",
          "x-nullable": false
        }
      }
    },
    "Assessment": {
      "description": "The assessment object contains the general cataloguing information we have on an assessment, and includes both a set of links to documents that describe the assessment and its use, as well as a configuration object for client applications. An assessment can be defined in an app context, or it can be shared in our shared assessment libary. Assessments are globally visible to all study authors in an app context, but are owned by a specific organization, and only members of that organization can edit the assessment. When shared, the configuration for an assessment is immutable and there are no APIs to update it.\n",
      "type": "object",
      "required": [
        "identifier",
        "ownerId",
        "revision",
        "title",
        "osName"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "Each assessment revision is assigned a unique GUID which can be used to retrieve it through the API. Assessments will also have a unique combination of an identifier and a revision, and can be retrieved as a set of revisions under a given identifier.\n",
          "x-nullable": false
        },
        "identifier": {
          "type": "string",
          "description": "A human-readable identifier for an assessment, which can have one or more revisions.\n",
          "x-nullable": false
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "default": 1,
          "x-nullable": false
        },
        "ownerId": {
          "type": "string",
          "description": "The ID of the organization that owns this assessment. Only members of that organization will be able to edit the assessment, either in an app context or in the shared assessment library.\n",
          "x-nullable": false
        },
        "title": {
          "type": "string",
          "x-nullable": false
        },
        "summary": {
          "type": "string"
        },
        "osName": {
          "type": "string",
          "description": "The name of the operating system (conventional names are \"Android,\" \"iPhone OS,\" and \"Both\").\n",
          "x-nullable": false
        },
        "originGuid": {
          "type": "string",
          "description": "If this assessment was copied from a shared assessment, this will be the GUID of the shared assessment revision that was used to make this copy. Certain aspects of the assessment (notably, the assessment's configuration) are guaranteed to be identical to this origin assessment.\n"
        },
        "validationStatus": {
          "type": "string"
        },
        "normingStatus": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "description": "A set of tags that apply to this assessment. Tags should be namespaced with a prefix followed by a period (e.g. \"category.neurodegenerative\"), as the tag API will give you these tags in a map keyed from the prefix to a list of the values under that prefix.",
          "items": {
            "type": "string"
          }
        },
        "customizationFields": {
          "type": "object",
          "description": "A map of AssessmentNode GUIDs to a set of field identifiers in that node that can be customized by developers without invalidating an assessment (the assessment will maintain its link to the shared assessment it was derived from, if any, and the authors of the assessment are confident that these changes to the configuration will not invalidate the scientific validity of the assessment). This specification guides validation of submissions to update an AssessmentNode through a specific customization API.\n",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PropertyInfo"
            }
          }
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the assessment was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the assessment was last modified.",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this assessment been logically deleted (an admin can restore it)?\n",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the assessment. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of `Assessment` needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Assessment",
          "x-nullable": false
        }
      }
    },
    "AssessmentConfig": {
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "description": "The JSON configuration for this assessment."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was last modified.",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the assessment config. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of this `AssessmentConfig` revision needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "AssessmentConfig",
          "x-nullable": false
        }
      }
    },
    "ClientInfo": {
      "description": "Describes the content of the `User-Agent` field in the format that is accepted and understandable to the Bridge server (see [REST API getting started](/articles/rest.html)).",
      "type": "object",
      "readOnly": true,
      "properties": {
        "appName": {
          "type": "string",
          "description": "The name of the application (e.g. \"Cardio Health\")."
        },
        "appVersion": {
          "type": "integer",
          "description": "The version of the application (must be a number, and should increase with every new release of the application).\n"
        },
        "deviceName": {
          "type": "string",
          "description": "Information about the device (e.g. \"Unknown iPhone\")."
        },
        "osName": {
          "type": "string",
          "description": "The name of the operating system (conventional names are \"Android\" and \"iPhone OS\").\n"
        },
        "osVersion": {
          "type": "string",
          "description": "The version of the operating system (e.g. \"10.0.3\")."
        },
        "sdkName": {
          "type": "string",
          "description": "The name of the SDK being used (e.g. \"BridgeJavaSDK\")."
        },
        "sdkVersion": {
          "type": "integer",
          "description": "The version of the SDK being used (e.g. \"4\")."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ClientInfo",
          "x-nullable": false
        }
      }
    },
    "CmsPublicKey": {
      "description": "A JSON payload that includes the base 64 encoded, public key for CMS encryption of uploads for this \napp. Each app has a different CMS public key.\n",
      "type": "object",
      "readOnly": true,
      "properties": {
        "publicKey": {
          "type": "string",
          "readOnly": true,
          "description": "Base 64 encoded version of the public key for CMS encryption of upload data.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CmsPublicKey",
          "x-nullable": false
        }
      }
    },
    "CompoundActivity": {
      "type": "object",
      "description": "A pointer to a compound activity, which represents multiple schemas or survey's worth of tasks for a user to perform. The task ID is used to uniquely identify the compound activity, and the activity can contain one or more schemas or surveys. When creating a Schedule Plan, you should leave the schema and survey lists empty, and the scheduler will automatically resolve the compound activity from a compound activity definition, using the task ID as the key.\n",
      "required": [
        "taskIdentifier",
        "schemaList",
        "surveyList"
      ],
      "properties": {
        "schemaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaReference"
          },
          "x-nullable": false
        },
        "surveyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveyReference"
          },
          "x-nullable": false
        },
        "taskIdentifier": {
          "type": "string",
          "description": "Task ID, used to uniquely identify the compound activity and to resolve the compound activity reference from the compound activity definition, where applicable.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CompoundActivity",
          "x-nullable": false
        }
      }
    },
    "CompoundActivityDefinition": {
      "type": "object",
      "description": "A compound activity definition, which lives outside of but parallel to a schedule plan. Schedule plans contain compound activities references (compound activity objects with just a task ID and no schemas or surveys), and the scheduler will automatically resolve and populate the compound activity in returned scheduled activities.\n",
      "required": [
        "taskId",
        "schemaList",
        "surveyList"
      ],
      "properties": {
        "schemaList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SchemaReference"
          },
          "x-nullable": false
        },
        "surveyList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SurveyReference"
          },
          "x-nullable": false
        },
        "taskId": {
          "type": "string",
          "description": "Task ID, used to uniquely identify the compound activity and to resolve the compound activity reference from the compound activity definition, where applicable.\n",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CompoundActivityDefinition",
          "x-nullable": false
        }
      }
    },
    "ConfigReference": {
      "type": "object",
      "description": "A pointer to a configuration element.",
      "required": [
        "id",
        "revision"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Schema ID",
          "x-nullable": false
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Revision number",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ConfigReference",
          "x-nullable": false
        }
      }
    },
    "ConsentSignature": {
      "description": "To consent to participation in a subpopulation (also known as a consent group), participants submit their electronic signature. This can include an image of their actual signature. \n\nAt the time of consent, participants also submit a decision on how widely they will share their medical information with researchers (see the scope property of the ConsentSignature JSON object, below).\n\nHow you describe to participants the choice to share research data is important if they are to correctly understand the consequences of this decision. We suggest that applications present the following language to users when making this choice:\n\n* **Option #1:** No data sharing. I do not agree to share my coded data (without my name) at this time;\n* **Option #2:** I agree to share my coded data (without my name) with researchers at the sponsor institution, and their partners, in order to conduct this study;\n* **Option #3:** I agree to share my coded data (without my name) with qualified researchers worldwide, for general health research.\n\nNote that if your study does re-identify participants in the study, this language will have to be adjusted.\n",
      "type": "object",
      "required": [
        "name",
        "scope"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The participant's name.",
          "x-nullable": false
        },
        "birthdate": {
          "type": "string",
          "format": "date",
          "description": "The participant's date of birth in ISO 8601 format (YYYY-MM-DD)."
        },
        "imageData": {
          "type": "string",
          "description": "Base 64 encoded image of the participant's signature. If `imageData` is supplied, `imageMimeType` must also be supplied.\n"
        },
        "imageMimeType": {
          "type": "string",
          "description": "Mime type of this image (e.g. \"image/png\"). If `imageData` is supplied, `imageMimeType` must also be supplied.\n"
        },
        "signedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the referenced consent was signed and agreed to by the participant.",
          "x-nullable": false
        },
        "withdrewOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the participant withdrew consent (can be blank)."
        },
        "scope": {
          "$ref": "#/definitions/SharingScope",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ConsentSignature",
          "x-nullable": false
        }
      }
    },
    "ConsentStatus": {
      "description": "A description of the participant's consent status in a particular subpopulation (consent group). This object is never used to update state on the server (all fields are read only). \n",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "The name of the subpopulation.",
          "x-nullable": false
        },
        "subpopulationGuid": {
          "type": "string",
          "readOnly": true,
          "description": "The GUID for the subpopulation of this consent.",
          "x-nullable": false
        },
        "required": {
          "type": "boolean",
          "readOnly": true,
          "description": "Is this consent required? If required, the user must consent to it before being given access to the server (until signed, a 412 response is returned for most participant endpoints).\n",
          "x-nullable": false
        },
        "signedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the referenced consent was signed and agreed to by the participant. If there is a signedOn value, consented will be equal to true."
        },
        "consented": {
          "type": "boolean",
          "readOnly": true,
          "description": "Has the participant consented to this consent agreement? If the user has signed this consent, there should be a signedOn timestamp value."
        },
        "signedMostRecentConsent": {
          "type": "boolean",
          "readOnly": true,
          "description": "Was the consent to participate made against the most recently published version of this consent? If there's no signature this will be false (not null).\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ConsentStatus",
          "x-nullable": false
        }
      }
    },
    "CreatedOnHolder": {
      "description": "An object that provides the creation timestamp for a newly created entity. This object is returned from create and update endpoints rather than an entire entity.\n",
      "type": "object",
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The timestamp (created on) of the newly created entity.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CreatedOnHolder",
          "x-nullable": false
        }
      }
    },
    "Criteria": {
      "type": "object",
      "description": "Some objects, like Subpopulations and the schedules in a CriteriaScheduleStrategy, are matched against user criteria in order to return the correct object. The criteria against which user information will be matched are described in the Criteria object. See [Customizing Content for Participants](/articles/filtering.html) for a fuller explanation. \n",
      "properties": {
        "language": {
          "type": "string",
          "description": "A two-letter language code. The the must declare an `Accept-Language` header with this language in order to match this object.\n"
        },
        "allOfGroups": {
          "type": "array",
          "description": "One or more data groups; the user must have all these data groups to match.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "noneOfGroups": {
          "type": "array",
          "description": "One or more data groups; the user must have none of these data groups to match.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "allOfSubstudyIds": {
          "type": "array",
          "description": "One or more substudy IDs; the user must be assigned to all these substudies to match.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "noneOfSubstudyIds": {
          "type": "array",
          "description": "One or more substudy IDs; the user cannot be assigned to any of these substudies for the associated object to match.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "minAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header in a prescribed format, that declares the app version to be equal to or greater than this version number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          },
          "x-nullable": false
        },
        "maxAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header in a prescribed format, that declares the app version to be equal to or less than this version number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Criteria",
          "x-nullable": false
        }
      }
    },
    "CriteriaScheduleStrategy": {
      "description": "Contains a list of schedules, each of which is associated to a specific [Criteria](/#Criteria) object. Based on information submitted by the user and in the user's account settings, compare each schedule in order until one matches the criteria, and use that schedule to assign activities to the user.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "scheduleCriteria"
          ]
        },
        {
          "properties": {
            "scheduleCriteria": {
              "type": "array",
              "description": "The list of schedules and their criteria.",
              "items": {
                "$ref": "#/definitions/ScheduleCriteria"
              },
              "x-nullable": false
            }
          }
        }
      ]
    },
    "CustomActivityEventRequest": {
      "description": "Request object for creating a Custom Activity Event.",
      "type": "object",
      "required": [
        "eventKey",
        "timestamp"
      ],
      "properties": {
        "eventKey": {
          "type": "string",
          "description": "identifier for the custom event"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 date and time to record for event"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "CustomActivityEventRequest",
          "x-nullable": false
        }
      }
    },
    "DataGroups": {
      "type": "object",
      "description": "A payload that contains a string array of data groups.",
      "required": [
        "dataGroups"
      ],
      "properties": {
        "dataGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "DataGroups",
          "x-nullable": false
        }
      }
    },
    "DateRange": {
      "description": "Model object representing a date range, which includes start date and end date as calendar dates (YYYY-MM-DD).\n",
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "Start date of the date range (YYYY-MM-DD)."
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "Start date of the date range (YYYY-MM-DD)."
        }
      }
    },
    "EmailSignIn": {
      "type": "object",
      "description": "Using a token supplied in an email to the participant, authenticate with the server. The token remains valid, once sent, for a minute. This token will be sent as part of a link in an email to the participant. This link should be intercepted by the installed app, which can extract the parameter in the link and use them to authenticate with the server using this endpoint. (This feature must be enabled for your app.)\n",
      "required": [
        "appId",
        "email",
        "token"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "The identifier of the participant's app."
        },
        "email": {
          "type": "string",
          "description": "The email address of the participant."
        },
        "token": {
          "type": "string",
          "description": "The token that was embedded in a link, sent in an email, that should be intercepted by the app in order to complete sign in.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "EmailSignIn",
          "x-nullable": false
        }
      }
    },
    "EmailSignInRequest": {
      "type": "object",
      "description": "Make a request to sign in through an email. This request will trigger the email to be sent to an existing account's email address (no more than once per minute). When the user clicks on this link, the installed app should be registered to intercept and handle the link. The link will include a token that can be sent to the server to authenticate. This feature must be enabled for your app.\n",
      "required": [
        "appId",
        "email"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "The identifier for the participant's app."
        },
        "email": {
          "type": "string",
          "description": "The email address of the participant."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "EmailSignInRequest",
          "x-nullable": false
        }
      }
    },
    "EmailVerificationStatus": {
      "description": "The status of the email address that will be used to send consents to users. The consents are sent on behalf of the app using the app's support email address, and our email provider (Amazon's SES) requires that the address holder confirm this is an allowed use of the address. \n",
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/AccountStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "EmailVerificationStatus",
          "x-nullable": false
        }
      }
    },
    "ExternalIdentifier": {
      "description": "An external identifier assigned to a participant's account to allow external re-identification of the user by the study sponsor.\n",
      "type": "object",
      "required": [
        "identifier",
        "substudyId"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The external identifier.",
          "x-nullable": false
        },
        "substudyId": {
          "type": "string",
          "description": "The substudy ID of the associated substudy for external ID",
          "x-nullable": false
        },
        "assigned": {
          "type": "boolean",
          "readOnly": true,
          "description": "If true, the identifier has been assigned to an account, otherwise false.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ExternalIdentifier",
          "x-nullable": false
        }
      }
    },
    "ExternalResource": {
      "description": "An external identifier assigned to a participant's account to allow external re-identification of the user by the study sponsor.\n",
      "type": "object",
      "required": [
        "title",
        "url",
        "category"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "title": {
          "type": "string",
          "x-nullable": false
        },
        "category": {
          "$ref": "#/definitions/ResourceCategory",
          "x-nullable": false,
          "description": "One of an enumerated list of categories of documentation resources."
        },
        "url": {
          "type": "string",
          "x-nullable": false,
          "description": "The link to retrieve the resource via the Internet."
        },
        "format": {
          "type": "string",
          "description": "The format of the resource being described, expressed as a MIME type (e.g. \"text/html\" or \"application/pdf\")."
        },
        "date": {
          "type": "string",
          "description": "The date of publication of the resource (a human-readable format is sufficient unless you wish to sort by this field)."
        },
        "description": {
          "type": "string",
          "description": "Short description of the resource this link is documenting."
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Non-authorial contributors to the documentation (researchers who participated in the research, grant funders, or the like)."
        },
        "creators": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The authors of the documentation."
        },
        "publishers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of the publishers (or institutions, or even hosting sites) supporting publication of the documentation."
        },
        "language": {
          "type": "string",
          "description": "The language *of the resource being described by this link.* It is probably not necessary to use something structured like ISO 639-1 language codes, the name of the language in English will do."
        },
        "minRevision": {
          "type": "integer",
          "format": "int32",
          "description": "The earlist (lowest) revision of an assessment that this resource applies to. This value indicates that a resource was added to describe a development in the evolution of the assessment, or some other change to the assessment. For release notes about one specific revision of the assessment, minRevision can equal maxRevision."
        },
        "maxRevision": {
          "type": "integer",
          "format": "int32",
          "description": "The least (highest) revision of an assessment that this resource applies to. This deprecates the associated resource while keeping the link for reference. For release notes about one specific revision of the assessment, minRevision can equal maxRevision."
        },
        "createdAtRevision": {
          "type": "integer",
          "format": "int32",
          "description": "The revision of the assessment at the time this resource was created or updated. Used to determine if the resource may be out-of-date."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was last modified.",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this external resource been logically deleted (an admin can restore it)?\n",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the assessment. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of `Assessment` needs to be updated.\n",
          "x-nullable": false
        },
        "upToDate": {
          "type": "boolean",
          "readOnly": true,
          "description": "The `createdAtRevision` field records the revision of the assessment when this resource link was created or last updated. If that value is equal to the most recent (highest) revision of the assessment, `upToDate` will be true. Otherwise it will be false. This can help flag resources that may no longer be relevant for the assessment.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ExternalResource",
          "x-nullable": false
        }
      }
    },
    "FileReference": {
      "type": "object",
      "description": "A pointer to a file revision hosted for this app.\n",
      "required": [
        "guid",
        "createdOn"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "The file guid",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The createdOn timestamp of the file revision",
          "x-nullable": false
        },
        "href": {
          "type": "string",
          "readOnly": true,
          "description": "An URL to retrieve the file revision",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "FileReference",
          "x-nullable": false
        }
      }
    },
    "GeneratedPassword": {
      "type": "object",
      "properties": {
        "externalId": {
          "type": "string",
          "readOnly": true,
          "description": "The external ID for which a password is being generated.",
          "x-nullable": false
        },
        "userId": {
          "type": "string",
          "readOnly": true,
          "description": "The user ID of the account for which a password has been generated. The user ID will be returned whether this call created an account for the external ID, or whether the account already existed.\n",
          "x-nullable": false
        },
        "password": {
          "type": "string",
          "readOnly": true,
          "description": "A randomly generated password. This password will pass your app's password validation constraints, unless you change these after creating the password. **This password should not be generated off the device this study participant will use to access the study.**\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GeneratedPassword",
          "x-nullable": false
        }
      }
    },
    "GuidCreatedOnVersionHolder": {
      "description": "An object that describes the keys and optimistic lock values of a Survey. This object is returned from create and update endpoints rather than an entire survey.\n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true,
          "description": "The guid of the survey (added when the survey is created).",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The createdOn value of the survey (added when survey is created).",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GuidCreatedOnVersionHolder",
          "x-nullable": false
        }
      }
    },
    "GuidHolder": {
      "description": "An object that provides the GUID for a newly created entity. This object is returned from create and update endpoints rather than an entire entity.\n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true,
          "description": "The guid of the newly created entity.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GuidHolder",
          "x-nullable": false
        }
      }
    },
    "GuidVersionHolder": {
      "description": "An object that describes the keys and optimistic lock values of an entity (e.g. a Subpopulation or SchedulePlan). This object is returned from create and update endpoints rather than an entire entity.\n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "readOnly": true,
          "description": "The guid of the entity (added when the entity is created).",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "GuidVersionHolder",
          "x-nullable": false
        }
      }
    },
    "HealthDataRecord": {
      "description": "See [Bridge Upload Data Format](/articles/study_design/upload_data_format.html) for details about this model object. Only researchers and administrators can retrieve this full record through an upload record in the API.\n",
      "readOnly": true,
      "type": "object",
      "required": [
        "userDataGroups"
      ],
      "properties": {
        "appVersion": {
          "type": "string",
          "readOnly": true,
          "description": "App version, as reported by the app. Generally in the form \"version 1.0.0, build 2\". Must be 48 chars or less.\n",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "ISO timestamp of when the data record was created, as reported by the submitting app",
          "x-nullable": false
        },
        "createdOnTimeZone": {
          "type": "string",
          "readOnly": true,
          "description": "The original timezone of the createdOn timestamp, expressed as a 4-digit string with sign. For example, -0800, +0900",
          "x-nullable": false
        },
        "data": {
          "type": "object",
          "readOnly": true,
          "description": "JSON map with key value pairs representing the record's data.",
          "x-nullable": false
        },
        "dayInStudy": {
          "type": "integer",
          "readOnly": true,
          "description": "How many calendar days the participant has been in the study. For example, if the participant started on |\n2019-07-24, then 2019-07-24 is day 1, 2019-07-25 is day 2, etc. Calendar days are calculated using the |\nsame timezone as the Bridge Exporter (ie, America/Los_Angeles).\n"
        },
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "A unique GUID for this record.",
          "x-nullable": false
        },
        "metadata": {
          "type": "object",
          "readOnly": true,
          "description": "Arbitrary JSON blob of record metadata, as submitted by the app. For ResearchKit-based apps, this is info.json verbatim.\n",
          "x-nullable": false
        },
        "phoneInfo": {
          "type": "string",
          "readOnly": true,
          "description": "Phone info, for example \"iPhone9,3\" or \"iPhone 5c (GSM)\". Must be 48 chars or less.",
          "x-nullable": false
        },
        "rawDataAttachmentId": {
          "type": "string",
          "readOnly": true,
          "description": "Attachment ID (S3 key) that contains the raw data. This is the unencrypted zip file for uploads, or JSON blob for directly submitted records\n",
          "x-nullable": false
        },
        "schemaId": {
          "type": "string",
          "readOnly": true,
          "description": "[UploadSchema](#UploadSchema) ID for the record.\n"
        },
        "schemaRevision": {
          "type": "integer",
          "readOnly": true,
          "format": "int64",
          "description": "[UploadSchema](#UploadSchema) revision for the record.\n"
        },
        "appId": {
          "type": "string",
          "description": "App that this record lives in.",
          "readOnly": true,
          "x-nullable": false
        },
        "uploadDate": {
          "type": "string",
          "format": "date",
          "readOnly": true,
          "description": "Calendar date in YYYY-MM-DD format representing when the server received the upload, using the server's local time zone (US Pacific timezone).\n",
          "x-nullable": false
        },
        "uploadId": {
          "type": "string",
          "readOnly": true,
          "description": "The upload GUID of the upload this record is processed from.",
          "x-nullable": false
        },
        "uploadedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The date and time of the upload.",
          "x-nullable": false
        },
        "userMetadata": {
          "type": "object",
          "readOnly": true,
          "description": "JSON map with key value pairs representing metadata for this health data record, as submitted by the app. This corresponds with the uploadMetadataFieldDefinitions configured in the study.\n",
          "x-nullable": false
        },
        "userSharingScope": {
          "type": "string",
          "readOnly": true,
          "description": "The user's sharing scope at the time of this upload's submission.",
          "$ref": "#/definitions/SharingScope",
          "x-nullable": false
        },
        "userExternalId": {
          "type": "string",
          "readOnly": true,
          "description": "The user's external ID at the time of this upload's submission."
        },
        "userDataGroups": {
          "type": "array",
          "readOnly": true,
          "description": "The user's data groups at the time of this upload's submission.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "userSubstudyMemberships": {
          "type": "object",
          "readOnly": true,
          "description": "A map where the keys are the substudy IDs assigned to the user at the time that user generated this \nhealth data, and the values are the external IDs that were assigned to the user for each substudy (if no external ID was assigned, the value will be an empty string).\n",
          "additionalProperties": {
            "type": "string"
          },
          "x-nullable": false
        },
        "validationErrors": {
          "type": "string",
          "readOnly": true,
          "description": "Error messages related to upload validation. Only generated if UploadValidationStrictness is set to REPORT.",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "readOnly": true,
          "format": "int64",
          "description": "A version number issued for optimistic locking of record updates. Should not be set when creating a new health data record. When updating a record retrieved from the API, the object will have the version attribute and this must match the last value issued by the service or an update will fail.\n",
          "x-nullable": false
        },
        "synapseExporterStatus": {
          "$ref": "#/definitions/SynapseExporterStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "HealthDataRecord",
          "x-nullable": false
        }
      }
    },
    "HealthDataSubmission": {
      "description": "Used to submit health data to the synchronous health data API.",
      "type": "object",
      "required": [
        "appVersion",
        "data",
        "phoneInfo"
      ],
      "properties": {
        "appVersion": {
          "type": "string",
          "description": "App version, as reported by the app. Generally in the form \"version 1.0.0, build 2\". Must be 48 chars or less.\n"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "ISO timestamp of when the data record was created, as reported by the submitting app"
        },
        "data": {
          "type": "object",
          "description": "JSON map with key value pairs representing the record's data."
        },
        "metadata": {
          "type": "object",
          "description": "JSON map with key value pairs representing metadata for this health data record, as submitted by the app. This corresponds with the uploadMetadataFieldDefinitions configured in the app.\n"
        },
        "phoneInfo": {
          "type": "string",
          "description": "Phone info, for example \"iPhone9,3\" or \"iPhone 5c (GSM)\". Must be 48 chars or less."
        },
        "schemaId": {
          "type": "string",
          "description": "[UploadSchema](#UploadSchema) ID for the record.\n"
        },
        "schemaRevision": {
          "type": "integer",
          "format": "int64",
          "description": "[UploadSchema](#UploadSchema) revision for the record.\n"
        },
        "surveyCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "If the health data is a survey response, this is the createdOn timestamp that specifies the survey version. The timestamp is in ISO8601 format.\n"
        },
        "surveyGuid": {
          "type": "string",
          "description": "If the health data is a survey response, this is the GUID that specifies the survey."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "HealthDataSubmission",
          "x-nullable": false
        }
      }
    },
    "FileMetadata": {
      "description": "A descriptor of a static file resource (image, XML file, video file, etc.) that is hosted via the Bridge server\n",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the account was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the account was last modified.",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this file been logically deleted (an admin can restore it)?\n",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the file metadata. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of this `File` revision needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "FileMetadata",
          "x-nullable": false
        }
      }
    },
    "FileRevision": {
      "description": "An object that tracks the existence of an individual revision of a file resource in S3.\n",
      "type": "object",
      "required": [
        "name",
        "mimeType"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "fileGuid": {
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "description": "An optional declaration of the MIME type of this file (if none is provided, one will be autodetected from the file when requested)."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the account was created.",
          "x-nullable": false
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "uploadURL": {
          "type": "string",
          "readOnly": true
        },
        "downloadURL": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "$ref": "#/definitions/FileRevisionStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "FileRevision",
          "x-nullable": false
        }
      }
    },
    "Identifier": {
      "description": "Payload object for an email address or phone number. You do not provide both identifiers when using this object for a call.\n",
      "type": "object",
      "required": [
        "appId"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Participant's email."
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "appId": {
          "type": "string",
          "description": "String identifier if the participant's app.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Identifier",
          "x-nullable": false
        }
      }
    },
    "IdentifierHolder": {
      "description": "An object that holds an identifier for a created entity.\n",
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "readOnly": true,
          "description": "The identifier of the entity (added when the entity is created).",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "IdentifierHolder",
          "x-nullable": false
        }
      }
    },
    "IdentifierUpdate": {
      "type": "object",
      "description": "An update to the key identifier fields of an account (email, phone number, external ID or Synapse user ID). To update these fields, the caller must submit authentication credentials, either sign in credentials or the reauthToken that was sent on sign in. This is to prevent the account from being hijacked through the hijacking of a user's session token.\n",
      "required": [
        "signIn"
      ],
      "properties": {
        "signIn": {
          "$ref": "#/definitions/SignIn"
        },
        "emailUpdate": {
          "type": "string",
          "description": "An email address to add to the account. Will only be added if the account does not already have an email address.\n"
        },
        "phoneUpdate": {
          "$ref": "#/definitions/Phone",
          "description": "A phone number to add to the account. Will only be added if the account does not already have a phone number.\n"
        },
        "externalIdUpdate": {
          "type": "string",
          "description": "An external ID to add to the account. The external ID must be associated to a substudy the account has not yet been associated to.\n"
        },
        "synapseUserIdUpdate": {
          "type": "string",
          "description": "A synapse user ID (a number expressed as a string) to add to the account. \n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "IdentifierUpdate",
          "x-nullable": false
        }
      }
    },
    "Image": {
      "type": "object",
      "required": [
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "An URL to an image. It is strongly recommended that the image be an SVG (vector graphics, re-scalable to the target device's screen size and resolution), **or** at least 600 by 400 pixels in size, if not larger (some phones have screens of up to 800 or more pixels across the screen).\n",
          "x-nullable": false
        },
        "width": {
          "type": "integer",
          "description": "The width of the image in pixels. If image is present, this field is required."
        },
        "height": {
          "type": "integer",
          "description": "The height of the image in pixels. If image is present, this field is required."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Image",
          "x-nullable": false
        }
      }
    },
    "IntentToParticipate": {
      "description": "For studies that wish to orchestrate an agreement to participate prior to signing up for a study, this API provides a way to store a consent under a phone number or email address. The user must submit a phone number *or* an email address (not both) as part of this submission, the same credential that will be used to sign up for the study. On first sign in, instead of receiving a 412 response, this user will be consented with this intent to participate record.\n",
      "type": "object",
      "required": [
        "subpopGuid",
        "scope",
        "consentSignature"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "The identifier for the app in which the user consents to participate."
        },
        "subpopGuid": {
          "type": "string",
          "description": "The specific subpopulation sent in the study to which the user consents to participate."
        },
        "osName": {
          "type": "string",
          "description": "The operating system name under which the install link can be retrieved. OS name is not required, and in that event, an install link under the key \"Universal\" will be sent to the user.\n"
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "email": {
          "type": "string"
        },
        "consentSignature": {
          "$ref": "#/definitions/ConsentSignature"
        },
        "scope": {
          "$ref": "#/definitions/SharingScope"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "IntentToParticipate",
          "x-nullable": false
        }
      }
    },
    "InvalidEntity": {
      "description": "Payload returned with a 400 error when an entity submitted to the server is invalid.\n",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "A message that will include all validation error messages for this object.",
          "x-nullable": false
        },
        "errors": {
          "type": "object",
          "readOnly": true,
          "description": "Errors broken down by the part of the JSON payload that generated them. The keys are \"paths\" representing fragments of the JSON (expressed in JavaScript object/array notation), and the values are string arrays of one or more errors for that element of the JSON. An example makes this clearer:\n\n```json\n\"errors\":{  \n    \"identifier\":[  \n        \"identifier is required\"\n    ],\n    \"elements[0].identifier\":[  \n        \"elements[0].identifier is required\"\n    ],\n    \"elements[0].constraints.enumeration\":[  \n        \"enumeration must have non-null, non-empty choices list\"\n    ],\n    \"elements[0].prompt\":[  \n        \"elements[0].prompt is required\"\n    ]\n}\n```\n",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "x-nullable": false
        }
      }
    },
    "MasterSchedulerConfig": {
      "description": "Configurations to setup a report scheduler.\n",
      "type": "object",
      "required": [
        "scheduleId"
      ],
      "properties": {
        "scheduleId": {
          "type": "string",
          "description": "schedule identifier",
          "x-nullable": false
        },
        "cronSchedule": {
          "type": "string",
          "description": "Cron expression indicating when the schedule should be run."
        },
        "requestTemplate": {
          "type": "object",
          "description": "An arbitrary JSON object containing template for the request to be sent to the configured SQS queue.",
          "x-nullable": false
        },
        "sqsQueueUrl": {
          "type": "string",
          "description": "SQS queue URL to send requests to",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "MasterSchedulerConfig",
          "x-nullable": false
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "StatusMessage",
          "x-nullable": false
        }
      }
    },
    "NotificationMessage": {
      "type": "object",
      "required": [
        "subject",
        "message"
      ],
      "properties": {
        "subject": {
          "type": "string",
          "description": "Very short rendition of the notification. For example, this value will be displayed on an Apple iWatch, where the message is shown for a short time only.\n",
          "x-nullable": false
        },
        "message": {
          "type": "string",
          "description": "Full notification message.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "NotificationMessage",
          "x-nullable": false
        }
      }
    },
    "NotificationRegistration": {
      "type": "object",
      "required": [
        "deviceId",
        "osName",
        "protocol"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "protocol": {
          "$ref": "#/definitions/NotificationProtocol",
          "x-nullable": false
        },
        "endpoint": {
          "description": "The endpoint that should be registered for the notification. For \"sms\" protocol, this is the participant's verified phone number in string form. For \"application\" protocol, this is the endpointARN generated when the user's device is registered for a specific platform (using a platformARN).\n",
          "type": "string",
          "x-nullable": false
        },
        "deviceId": {
          "description": "This should be either the device token retrieved from the iOS operation system, or the registrationId on Android.\n",
          "type": "string",
          "x-nullable": false
        },
        "osName": {
          "description": "Information used to track which type of deviceId is being submitted. This string should be either \"Android\" or \"iPhone OS\" (\"iOS\" also works), and should match the operating system from which you retrieved a push notification identifier (deviceId).\n",
          "type": "string",
          "x-nullable": false
        },
        "createdOn": {
          "description": "Date the client registered for push notifications with Bridge.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": false
        },
        "modifiedOn": {
          "description": "The last time the registration was updated based on a new device identifier being issued by the client operating system (iOS or Android). If an updated registration is submitted but the deviceId has not changed, the record is not modified.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "NotificationRegistration",
          "x-nullable": false
        }
      }
    },
    "NotificationTopic": {
      "type": "object",
      "required": [
        "name",
        "shortName"
      ],
      "properties": {
        "guid": {
          "description": "A unique GUID for this topic",
          "type": "string",
          "x-nullable": false
        },
        "name": {
          "description": "The name of this topic (visible to developers and researchers in design tools).\n",
          "type": "string",
          "x-nullable": false
        },
        "shortName": {
          "description": "Short name for the topic, used as the display name for the topic in SNS. This also appears in SMS notifications. Must be 10 characters or less.\n",
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "description": "Description of the purpose of this topic (visible to developers and researchers in design tools).\n",
          "type": "string"
        },
        "createdOn": {
          "description": "The date and time this topic was created.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": false
        },
        "modifiedOn": {
          "description": "The date and time this topic was last modified.\n",
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "x-nullable": false
        },
        "criteria": {
          "$ref": "#/definitions/Criteria",
          "description": "If a topic has criteria, users can be automatically subscribed and unsubscribed when their criteria context changes.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "NotificationTopic",
          "x-nullable": false
        }
      }
    },
    "OAuthAccessToken": {
      "type": "object",
      "properties": {
        "vendorId": {
          "type": "string",
          "readOnly": true,
          "description": "The Bridge-assigned vendor ID.",
          "x-nullable": false
        },
        "accessToken": {
          "type": "string",
          "readOnly": true,
          "description": "The access token.",
          "x-nullable": false
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The ISO 8601 timestamp of when this access token will expire.",
          "x-nullable": false
        },
        "providerUserId": {
          "type": "string",
          "readOnly": true,
          "description": "The provider's ID for this user.",
          "x-nullable": false
        },
        "scopes": {
          "type": "array",
          "readOnly": true,
          "description": "Scopes attached to the OAuth access token.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "OAuthAccessToken",
          "x-nullable": false
        }
      }
    },
    "OAuthAuthorizationToken": {
      "type": "object",
      "required": [
        "authToken"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "The app the user is authenticating to (optional and used when authenticating with Brige via an OAuth server, currently only Synapse).\n"
        },
        "vendorId": {
          "type": "string",
          "description": "The OAuth service vendor through which the user is authenticating (currently the only supported vendor is \"synapse\");\n"
        },
        "authToken": {
          "type": "string",
          "description": "The OAuth 2.0 authorization token returned from the provider, which must be submitted to the Bridge server in order to retrieve an access token. This token is optional, but if provided, Bridge server will always renew the access token with the OAuth provider.\n",
          "x-nullable": false
        },
        "callbackUrl": {
          "type": "string",
          "description": "The callback URL registered with the OAuth authentication server. This must match the value that was initially sent to the server and was used to redirect back to the Bridge client.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "OAuthAuthorizationToken",
          "x-nullable": false
        }
      }
    },
    "OAuthProvider": {
      "type": "object",
      "required": [
        "clientId",
        "secret",
        "endpoint",
        "callbackUrl"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "description": "The client ID of the app.",
          "x-nullable": false
        },
        "secret": {
          "type": "string",
          "description": "The secret token that the server must provide.",
          "x-nullable": false
        },
        "endpoint": {
          "type": "string",
          "description": "The URL to send an authorization token to to retrieve access and refresh tokens.",
          "x-nullable": false
        },
        "callbackUrl": {
          "type": "string",
          "description": "The callback URL that the client provides to retrieve the authorization token. This must match that callback URL exactly.\n",
          "x-nullable": false
        },
        "introspectEndpoint": {
          "type": "string",
          "description": "OAuth introspect URL, as defined by RFC7662. Optional but recommended. Note that we currently use these |\nfor scopes, and FitBit uses a non-standard format. See FitBit OAuth documentation for details.\n",
          "x-nullable": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "OAuthProvider",
          "x-nullable": false
        }
      }
    },
    "PasswordPolicy": {
      "description": "The rules to enforce on the creation of passwords for Bridge accounts.\n",
      "type": "object",
      "properties": {
        "minLength": {
          "type": "integer",
          "minimum": 2,
          "maximum": 100,
          "default": 8,
          "description": "The minimum number of characters that's required in the password.",
          "x-nullable": false
        },
        "numericRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one number required in the password? (0-9).",
          "x-nullable": false
        },
        "symbolRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one ASCII symbol (non-letter, non-number) required in the \npassword? (! \" # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \\ ] ^ _ ` { ¦ } ~).\n",
          "x-nullable": false
        },
        "lowerCaseRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one lower-case letter required? (a-z).",
          "x-nullable": false
        },
        "upperCaseRequired": {
          "type": "boolean",
          "default": true,
          "description": "Is at least one upper-case letter required? (A-Z).",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PasswordPolicy",
          "x-nullable": false
        }
      }
    },
    "PasswordReset": {
      "description": "Payload to send a new password to the Bridge server.",
      "type": "object",
      "required": [
        "password",
        "sptoken"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "description": "New password to use."
        },
        "sptoken": {
          "type": "string",
          "description": "This is a one-time use token issued to the user to change his or her password. Normally this is emailed to the user's email account, using a link back to the Bridge web interface where it is extracted to complete this API call.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PasswordReset",
          "x-nullable": false
        }
      }
    },
    "Phone": {
      "type": "object",
      "description": "The user's phone number.",
      "required": [
        "number",
        "regionCode"
      ],
      "properties": {
        "number": {
          "type": "string",
          "description": "The phone number (can be formatted in any way that's useful for end users).",
          "x-nullable": false
        },
        "regionCode": {
          "type": "string",
          "description": "CLDR two-letter region code describing the region in which the phone number was issued.",
          "x-nullable": false
        },
        "nationalFormat": {
          "type": "string",
          "readOnly": true,
          "description": "The phone number formatted in the commonly accepted national format of the region code. This value is read-only.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Phone",
          "x-nullable": false
        }
      }
    },
    "PhoneSignInRequest": {
      "type": "object",
      "description": "Make a request to sign in using an SMS message. This request will trigger a message to be sent to an existing account's phone number. The SMS message will include a numeric token that must be included in a subsequent request to the server to authenticate.\n",
      "required": [
        "appId",
        "phone"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "The identifier for the participant's app."
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PhoneSignInRequest",
          "x-nullable": false
        }
      }
    },
    "PropertyInfo": {
      "type": "object",
      "required": [
        "propName",
        "label"
      ],
      "properties": {
        "propName": {
          "type": "string",
          "description": "The property name of the property on the JSON object that can be edited.",
          "x-nullable": false
        },
        "label": {
          "type": "string",
          "description": "A short label for the property.",
          "x-nullable": false
        },
        "description": {
          "type": "string",
          "description": "A longer description of the property and the allowable values that it can take."
        },
        "propType": {
          "type": "string",
          "description": "A type hint to a UI editor for this property. The value is not constrained to support complex types, but we suggest 'string', 'number', or 'boolean' as basic values to support with editing tools."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "PropertyInfo",
          "x-nullable": false
        }
      }
    },
    "RecordExportStatusRequest": {
      "description": "A payload sending back the status of an export of one or more health data records to Synapse. Used to trace the upload of data to the Synapse data repository. \n",
      "type": "object",
      "required": [
        "recordIds",
        "synapseExporterStatus"
      ],
      "properties": {
        "recordIds": {
          "type": "array",
          "description": "One or more [HealthDataRecord](#HealthDataRecord) IDS.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "synapseExporterStatus": {
          "$ref": "#/definitions/SynapseExporterStatus",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "RecordExportStatusRequest",
          "x-nullable": false
        }
      }
    },
    "ReportData": {
      "description": "The JSON data for one time point of a report (either a local date in the format YYYY-MM-DD, or an ISO 8601 timestamp; report records should all use one or the other format consistently).\nThe `date` property can be used to submit either a local date or timestamp, and the value will be returned in the `date` property as well as the `localDate` or `dateTime` property depending on the format. You can also alternative submit `localDate` or `dateTime` (but never both), and you'll get back the value in that property as well as the `date` property.\nData can be for a study as a whole, or a report on a single participant, depending on the endpoint that is used to persist the data in Bridge.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "date": {
          "type": "string",
          "description": "The date (whether local or an ISO timestamp) of the report data."
        },
        "localDate": {
          "type": "string",
          "format": "date",
          "description": "The date expressed as a LocalDate (YYYY-MM-DD)"
        },
        "dateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date expressed as an ISO 8601 timestamp."
        },
        "data": {
          "type": "object",
          "description": "An arbitrary JSON object containing whatever data should be saved for a report.",
          "x-nullable": false
        },
        "substudyIds": {
          "type": "array",
          "description": "The substudies this report record is associated to (these are set with the first record that is submitted and that creates a report index, and cannot be changed afterward unless the user is a study-wide user not associated to any specific substudy.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportData",
          "x-nullable": false
        }
      }
    },
    "ReportDataForWorker": {
      "description": "The JSON data to submit a report record for a point in time (curently a day expressed in the format YYYY-MM-DD). This object includes a healthCode because worker processes, as they produce records for a participant report, may be working from anonymized data.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "healthCode": {
          "type": "string",
          "description": "The health code of the person for whom this data is being created.\n",
          "x-nullable": false
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "The date (YYYY-MM-DD) of the report data."
        },
        "dateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The date expressed as an ISO 8601 timestamp."
        },
        "data": {
          "type": "object",
          "description": "An arbitrary JSON object containing whatever data should be saved for a report.",
          "x-nullable": false
        },
        "substudyIds": {
          "type": "array",
          "description": "The substudies this report record is associated to (these are set with the first record that is submitted and that creates a report index, and cannot be changed afterward unless the user is an app-wide user not associated to any specific substudy.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportData",
          "x-nullable": false
        }
      }
    },
    "ReportIndex": {
      "description": "An identifier to retrieve a series of report data (e.g. \"three-week-report\"). A separate list of these \nare maintained for study and participant reports.\n",
      "type": "object",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The report identifier.",
          "x-nullable": false
        },
        "substudyIds": {
          "type": "array",
          "description": "The substudies these report records are associated to.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "public": {
          "type": "boolean",
          "description": "Study reports can be marked as \"public\", which will make them accessible through the API to any requester (authentication is not required).\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ReportIndex",
          "x-nullable": false
        }
      }
    },
    "RequestInfo": {
      "description": "Some basic information is captured when a participant makes a request to the Bridge server, mostly for the purpose of troubleshooting user issues with the app. Questions that can be answered include:\n\n* what version of the app is this participant using?\n* what filtering criteria might be applied to their requests?\n* when was the last time they uploaded data or retrieved activities?\n* do they have a session right now, or have they contacted the server recently at all?\n\nThis information is cached but not persisted; it is not guaranteed to be present for all active users.\n",
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "readOnly": true,
          "description": "The user's account ID.",
          "x-nullable": false
        },
        "clientInfo": {
          "$ref": "#/definitions/ClientInfo",
          "readOnly": true,
          "description": "The `User-Agent` string from the last request as parsed for the purpose of applying filtering criteria.\n"
        },
        "userAgent": {
          "type": "string",
          "readOnly": true,
          "description": "The `User-Agent` header exactly as it was sent to the server, whether it is parseable by the Bridge server or not. \n"
        },
        "languages": {
          "type": "array",
          "readOnly": true,
          "description": "The language or languages sent in the user's `Accept-Language` header and persisted as part of the participant's account configuration, as they were set at the time of the last request.\n",
          "items": {
            "type": "string"
          }
        },
        "userDataGroups": {
          "type": "array",
          "readOnly": true,
          "description": "The data groups assigned to this participant at the time of the last request.",
          "items": {
            "type": "string"
          }
        },
        "activitiesAccessedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The last recorded time the participant's application requested scheduled activities from the server.\n"
        },
        "signedInOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The last recorded time the participant signed in to the server.\n"
        },
        "uploadedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The last recorded time the participant started an upload to the server.\n"
        },
        "timeZone": {
          "type": "string",
          "readOnly": true,
          "description": "The user's time zone at the time of the last request."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "RequestInfo",
          "x-nullable": false
        }
      }
    },
    "RequestParams": {
      "type": "object",
      "description": "Type-safe object that returns request parameters submitted for a request. Only the values that are submitted in a request will be returned, the rest will be null.\n",
      "properties": {
        "allOfGroups": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "assignmentFilter": {
          "type": "boolean",
          "readOnly": true
        },
        "emailFilter": {
          "type": "string",
          "readOnly": true
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "idFilter": {
          "type": "string",
          "readOnly": true
        },
        "includeDeleted": {
          "type": "boolean",
          "readOnly": true
        },
        "language": {
          "type": "string",
          "readOnly": true
        },
        "noneOfGroups": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "offsetBy": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "offsetKey": {
          "type": "string",
          "readOnly": true
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "phoneFilter": {
          "type": "string",
          "readOnly": true
        },
        "reportType": {
          "$ref": "#/definitions/ReportType",
          "readOnly": true
        },
        "scheduledOnStart": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "scheduledOnEnd": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "summary": {
          "type": "boolean",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceCategory"
          }
        },
        "minRevision": {
          "type": "integer",
          "format": "int32"
        },
        "maxRevision": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "RequestParams",
          "x-nullable": false
        }
      }
    },
    "Schedule": {
      "description": "For more information about scheduling, see [Scheduling](/articles/study_design/scheduling.html).\n",
      "type": "object",
      "required": [
        "label",
        "scheduleType",
        "times",
        "activities",
        "persistent"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to describe this schedule.",
          "x-nullable": false
        },
        "scheduleType": {
          "$ref": "#/definitions/ScheduleType",
          "x-nullable": false
        },
        "eventId": {
          "type": "string",
          "description": "A comma-separated list of event IDs against which will be used for scheduling. If no eventId is provided, the event `enrollment` will be used. The system will use the first event ID (working left to right) for which the user has an event with a timestamp.\n"
        },
        "delay": {
          "type": "string",
          "description": "ISO 8601 duration string. An amount of time to wait before scheduling the first task. \n"
        },
        "interval": {
          "type": "string",
          "description": "An ISO 8601 duration, describing the period in days between tasks (it can be days, weeks, months or even years, but should not be smaller than a day). If this is used, cronTrigger should not be used.\n"
        },
        "sequencePeriod": {
          "type": "string",
          "description": "A recurring schedule can specify a sequence in a crossover study design. The sequence starts from the triggering event, plus any delay, and continues until the end of the period. For example, if you have a recurring schedule that repeats daily, a `sequencePeriod` of 1 day (P1D) would generate one activity. If you set `sequencePeriod` to P2D, you will get two activities. Note that this is true regardless of whether or not there is a delay. Washout periods between sequences can be specified by delaying the execution of the next sequence.\n"
        },
        "expires": {
          "type": "string",
          "description": "ISO 8601 duration string. The period of time after which an unstarted, scheduled activity should be removed from the application (if it has not been started, no data will have been saved on the server). This is mandatory for recurring schedules so that unstarted activities do not stack up in the user's UI.\n"
        },
        "cronTrigger": {
          "type": "string",
          "description": "A cron expression will schedule recurring tasks according to this standard syntax for describing event schedules from the Unix operating system. The format of the cron expression is the seven field format as described in the documentation for the Java Quartz Scheduler (note that there are other formats that take up to eleven fields, this online cron expression generator creates expressions in the right format). If this is used, the interval and times are ignored.\n"
        },
        "startsOn": {
          "type": "string",
          "description": "The scheduler will not create a task before this date and time.",
          "format": "date-time"
        },
        "endsOn": {
          "type": "string",
          "description": "The scheduler will not create a task after this date and time. **Note that this takes precedence over the minimumPerSchedule setting that can be provided via the API. Tasks will not be \"topped up\" to this minimum if they extend outside of this time window.**\n",
          "format": "date-time"
        },
        "times": {
          "type": "array",
          "description": "Required if an interval is specified (ignored if a cron expression is specified). An array of one or more ISO 8601 time values (without a date or time zone, e.g. \"14:00\"). One task will be created for each time on the day determined by the rest of the scheduler. If the schedule occurs once, only the first time will be used to schedule the task (and if no time is provided, the original time of the triggering event will be used; it's clearest to set a time).\n",
          "items": {
            "type": "string",
            "description": "24hr time value(s) without a time zone (e.g. \"14:30\"). **Each time value will create a separate task, one for each activity in the schedule.**\n"
          },
          "x-nullable": false
        },
        "persistent": {
          "type": "boolean",
          "description": "True if schedule type is persistent. (This is here for legacy reasons.)",
          "x-nullable": false
        },
        "activities": {
          "type": "array",
          "description": "One or more activities that should be done by a participant on this schedule. Each activity will generate a separate task. See Activity.\n",
          "items": {
            "$ref": "#/definitions/Activity"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Schedule",
          "x-nullable": false
        }
      }
    },
    "ScheduleCriteria": {
      "description": "In a [CriteriaScheduleStrategy](#CriteriaScheduleStrategy), a list of ScheduleCriteria objects relate each schedule to a set of criteria that needs to match the user's request in order to select that schedule for the user.\n",
      "type": "object",
      "required": [
        "criteria",
        "schedule"
      ],
      "properties": {
        "criteria": {
          "$ref": "#/definitions/Criteria",
          "x-nullable": false
        },
        "schedule": {
          "$ref": "#/definitions/Schedule",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ScheduleCriteria",
          "x-nullable": false
        }
      }
    },
    "SchedulePlan": {
      "description": "A schedule plan relates schedules to some specific strategies for using these schedules to create activities for participants.\n",
      "type": "object",
      "required": [
        "label",
        "strategy"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "label": {
          "type": "string",
          "description": "The name of this schedule plan (not shown to users).",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "x-nullable": false
        },
        "strategy": {
          "$ref": "#/definitions/ScheduleStrategy",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SchedulePlan",
          "x-nullable": false
        }
      }
    },
    "ScheduleStrategy": {
      "type": "object",
      "discriminator": "type",
      "description": "This is an interface for several implementations. See [scheduling](/articles/scheduling.html) for further information on creating schedules.\n",
      "properties": {
        "type": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "ScheduledActivity": {
      "description": "Description of an activity (such as a task or survey) the study would like the participant to perform. A scheduled activity will contain a reference to a task, a survey, a compound task (which can include any combination of tasks and surveys), and the activityType will reflect which property exists on the scheduled activity object (e.g. if a task is defined, the activityType will be \"task\"). \n",
      "type": "object",
      "properties": {
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "schedulePlanGuid": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "startedOn": {
          "type": "string",
          "format": "date-time",
          "description": "This field is filled out by the client to persist the fact that a task has been started. Started on is always reported in UTC, regardless of the time zone being used to express the scheduling window (scheduledOn to expiresOn)."
        },
        "finishedOn": {
          "type": "string",
          "format": "date-time",
          "description": "This field is filled out by the client to persist the fact that a task has been finished. To delete a task, record a finishedOn timestamp and leave the startedOn field blank. Finished on is always reported in UTC, regardless of the time zone being used to express the scheduling window (scheduledOn to expiresOn)."
        },
        "scheduledOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The time at which the activity should be made available to the participant. It's fine to show the activity before this, but the user should not be able to start it until this time has passed. Time will be expressed in the time zone sent to the server to request the scheduled activities.\n",
          "x-nullable": false
        },
        "expiresOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The time after which this task should no longer be made available to the participant. It will also no longer be returned from the server API. Time will be expressed in the time zone sent to the server to request the scheduled activities.\n"
        },
        "activity": {
          "$ref": "#/definitions/Activity",
          "readOnly": true,
          "x-nullable": false
        },
        "persistent": {
          "type": "boolean",
          "description": "Is this activity persistent? If so, it will never be removed from the list of activities; the client may wish to provide different UI for such a task.\n",
          "readOnly": true,
          "x-nullable": false
        },
        "clientData": {
          "type": "object",
          "description": "An arbitrary object that will be serialized and stored as JSON using the GSON serialization mechanisms. In Java this field is an Object; since the type of the object is not known, the rest-client includes a utility method:\n```\nMyCustomObject data = RestUtils.toType(\n    activity.getClientData(), MyCustomObject.class);\n```\n"
        },
        "status": {
          "$ref": "#/definitions/ScheduleStatus",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ScheduledActivity",
          "x-nullable": false
        }
      }
    },
    "SchemaReference": {
      "type": "object",
      "description": "A pointer to an upload schema defined for this survey. This schema represents a particular task or activity that the participant should perform, and tells the app which schema ID and revision number to associate the data upload with. If the revision number is set to null when creating a schedule plan, then the reference is to the most recent revision for the given OS and app version. The specific revision number that should be used will be resolved when a [ScheduledActivity](#ScheduledActivity) is created for the participant).\n",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Schema ID",
          "x-nullable": false
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Schema revision number. Can be blank in a Schedule Plan if you want the Scheduler to automatically resolve to the latest revision for the user's app version.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SchemaReference",
          "x-nullable": false
        }
      }
    },
    "SharedModuleImportStatus": {
      "type": "object",
      "description": "This struct contains the results of importing a shared module into the local app, including what type of module it is, and its key params (schema ID/revision or survey GUID/createdOn) in the local app.\n",
      "properties": {
        "moduleType": {
          "$ref": "#/definitions/SharedModuleType",
          "readOnly": true,
          "x-nullable": false
        },
        "schemaId": {
          "type": "string",
          "description": "Schema ID, if this module is a schema."
        },
        "schemaRevision": {
          "type": "integer",
          "description": "Schema revision, if this module is a schema."
        },
        "surveyCreatedOn": {
          "type": "string",
          "description": "Survey created-on timestamp (as an ISO8601 timestamp), if this module is a survey."
        },
        "surveyGuid": {
          "type": "string",
          "description": "Survey GUID, if this module is a survey."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SharedModuleImportStatus",
          "x-nullable": false
        }
      }
    },
    "SharedModuleMetadata": {
      "type": "object",
      "description": "Metadata for shared modules in the shared module library.",
      "required": [
        "id",
        "name",
        "version",
        "tags"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique ID of the module.",
          "x-nullable": false
        },
        "licenseRestricted": {
          "type": "boolean",
          "description": "True if usage of this module is restricted by license or copyright.",
          "x-nullable": false
        },
        "moduleType": {
          "$ref": "#/definitions/SharedModuleType",
          "readOnly": true,
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "description": "User-friendly module name.",
          "x-nullable": false
        },
        "notes": {
          "type": "string",
          "description": "User-friendly descriptive notes for the module."
        },
        "os": {
          "type": "string",
          "description": "Which OS (iOS, Android, etc) this module applies to, if the module is OS-specific."
        },
        "published": {
          "type": "boolean",
          "description": "Flag that marks the module as published. A published module versions cannot be modified. However, another version of the same module can be created for continued editing.\n",
          "x-nullable": false
        },
        "schemaId": {
          "type": "string",
          "description": "Schema ID, if this module is a schema."
        },
        "schemaRevision": {
          "type": "integer",
          "description": "Schema revision, if this module is a schema."
        },
        "surveyCreatedOn": {
          "type": "string",
          "description": "Survey created-on timestamp (as an ISO8601 timestamp), if this module is a survey."
        },
        "surveyGuid": {
          "type": "string",
          "description": "Survey GUID, if this module is a survey."
        },
        "tags": {
          "type": "array",
          "description": "An unordered list of tags, used for querying and filtering.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this shared module metadata been logically deleted (an admin can restore it)?",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "description": "Module version.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SharedModuleMetadata",
          "x-nullable": false
        }
      }
    },
    "SharingScopeForm": {
      "type": "object",
      "required": [
        "scope"
      ],
      "properties": {
        "scope": {
          "$ref": "#/definitions/SharingScope"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SharingScope",
          "x-nullable": false
        }
      }
    },
    "SignIn": {
      "description": "Information to sign in to the Bridge server. For a successful sign in, this object must include an *identifier* (either email or phone number) and a *secret* (either password or a reauthToken). Depending on the credentials supplied, there are currently different server endpoints to call. The appId is always required.\n",
      "type": "object",
      "required": [
        "appId"
      ],
      "properties": {
        "appId": {
          "type": "string",
          "description": "App identifier of the participant's app"
        },
        "email": {
          "type": "string",
          "description": "User's email address"
        },
        "phone": {
          "$ref": "#/definitions/Phone"
        },
        "externalId": {
          "type": "string",
          "description": "The external ID associated with this app participant"
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "User's password"
        },
        "reauthToken": {
          "type": "string",
          "description": "The token sent with a new session to reauthenticate with the server. This removes the need for a client app to store the user's password. The reauth token is rotated each time the caller authenticates or reauthenticates.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SignIn",
          "x-nullable": false
        }
      }
    },
    "SignUp": {
      "description": "The information necessary to sign up for a Bridge app. **Only the app's ID, an email address, and a password are required to sign up for an app.** However, all the information of [AbstractStudyParticipant](#AbstractStudyParticipant) can be submitted at sign up. In some configurations of the server, for example, an `externalId` value must be submitted at the time of sign up.\n",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "appId"
          ]
        },
        {
          "properties": {
            "appId": {
              "type": "string",
              "description": "The app ID of the app the participant is joining."
            },
            "email": {
              "type": "string",
              "description": "The user's email. Users can use the same email for different studies, but their account is identified by the email within an app.\n"
            },
            "phone": {
              "$ref": "#/definitions/Phone"
            },
            "password": {
              "type": "string",
              "format": "password",
              "description": "User's password."
            },
            "consent": {
              "type": "boolean",
              "description": "**Create user API for admins only.** Create this user consented to all required consents. For testing purposes only.\n"
            },
            "checkForConsent": {
              "type": "boolean",
              "default": false,
              "description": "If sign ups for your app may include a consent to participate submitted prior to sign up, this field should be set to true to check for and finalize that consent. Otherwise this should be left false.\n"
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "SignUp",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "SimpleScheduleStrategy": {
      "description": "The SimpleScheduleStrategy uses the same schedule for every participant. It is the easiest way to schedule activities and is a good place to start when building a schedule.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleStrategy"
        },
        {
          "type": "object"
        },
        {
          "required": [
            "schedule"
          ]
        },
        {
          "properties": {
            "schedule": {
              "$ref": "#/definitions/Schedule",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "SmsMessage": {
      "type": "object",
      "description": "Represents an SMS message that we sent to a phone number.",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "description": "The phone number receiving this message, formatted in E.164 international format.",
          "x-nullable": false
        },
        "sentOn": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp in ISO8601 format when we sent the message.",
          "x-nullable": false
        },
        "healthCode": {
          "type": "string",
          "description": "Health code of the participant that received the message, if the participant had an account at the time the message was sent.\n",
          "x-nullable": false
        },
        "messageBody": {
          "type": "string",
          "description": "The message content we sent.",
          "x-nullable": false
        },
        "messageId": {
          "type": "string",
          "description": "Message ID, as determined by the SMS provider.",
          "x-nullable": false
        },
        "smsType": {
          "$ref": "#/definitions/SmsType",
          "x-nullable": false
        },
        "appId": {
          "type": "string",
          "description": "The app whose behalf we sent the message.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SmsMessage",
          "x-nullable": false
        }
      }
    },
    "SmsTemplate": {
      "type": "object",
      "description": "A template for one of the system SMS messages sent by Bridge. This message, after template variable values are interpolated into the string, cannot be more than 160 characters in length. In the templates, variable strings can be used to interpolate the following values:\n\n**All templates**\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|appName|The full name of the app|\n|appShortName|The short name of the app (ten letters or less)|\n|appId|The identifier of the app|\n|sponsorName|The name of the app sponsor|\n|supportEmail|The support email of the app|\n|technicalEmail|The technical support email of the app|\n|consentEmail|The consent administration email of the app|\n|host|The host server (e.g. `https://ws.sagebridge.org`|\n\n**Account exists SMS message**\n*You can include a link to reset the account's password, or a token to sign in via the SMS message, if supported by the app, or both.*\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|resetPasswordUrl|The URL that must be loaded in a web browser to enter a new password|\n|resetPasswordExpirationPeriod|The period (e.g. \"2 hours\") until the link expires|\n|token|The token that must be captured and sent back to the server to sign in|\n|phoneSignInExpirationPeriod|The period (e.g. \"2 hours\") until the token expires|\n|sptoken|The token to send back to the server to validate a legitimate password reset (also included in links)|\n\n**Password reset SMS message**\n*${resetPasswordUrl} is required to be in the template.*\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|resetPasswordUrl|The URL that must be loaded in a web browser to enter a new password|\n|resetPasswordExpirationPeriod|The period (e.g. \"2 hours\") until the link expires|\n|sptoken|The token to send back to the server to validate a legitimate password reset (also included in links)|\n\n**Sign in SMS message**\n*${token} is required to be in the template.*\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|token|The token that must be captured and sent back to the server to sign in|\n|phoneSignInExpirationPeriod|The period (e.g. \"2 hours\") until the token expires|\n\n**Phone number verification SMS message**\n*${token} is required to be in the template.*\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|token|The token that must be captured and sent back to validate a phone number|\n|phoneVerificationExpirationPeriod|The period (e.g. \"2 hours\") until the token expires|\n\n**Install app SMS message**\n*${appInstallUrl} is required to be in the template.*\n\n|Template Variable|What it will be replaced with|\n|---|---|\n|appInstallUrl|The URL selected for this request and returned as the link to download and install the app for this app|\n",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "The message to send (only text and template variables allowed). \n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SmsTemplate",
          "x-nullable": false
        }
      }
    },
    "StudyConsent": {
      "type": "object",
      "description": "For historical reasons, a revision of a consent document is known as a \"study consent\" (it would more accurate to call it a \"subpopulation consent\"). It is a revision of the consent document that is associated with a subpopulation.\n\nSubpopulations can be used to group users for several purposes, but the most important use of subpopulations is to divide users into different *consent groups.* \n\n**Note:** calls that return lists of these study consents do not populate the `documentContent` property. You must retrieve an individual study consent to get the content of the consent.\n",
      "required": [
        "subpopulationGuid",
        "documentContent"
      ],
      "properties": {
        "subpopulationGuid": {
          "type": "string",
          "description": "The guid of the subpopulation to which this consent belongs.",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The time the document was created on the server. Each update of the consent document creates a new revision at a new `createdOn` timestamp.\n",
          "x-nullable": false
        },
        "documentContent": {
          "type": "string",
          "description": "A valid XHTML document describing the consent. In this document, the following tokens can be inserted and they will be substituted with the user's consent information when the consent is requested for that user:\n\n|Template variable|Substituted with|\n|---|---|\n|${appName}|The name of the app|\n|${supportEmail}|The support email address for the app|\n|${technicalEmail}|The technical contact/support email address for the app|\n|${sponsorName}|The name of the sponsor for this app (the institution or research team name)|\n\nThe signature block will be appended to the end of your consent document. **It is not possible to remove or change the signature block at this time.**\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "StudyConsent",
          "x-nullable": false
        }
      }
    },
    "StudyParticipant": {
      "allOf": [
        {
          "$ref": "#/definitions/AbstractStudyParticipant"
        },
        {
          "description": "The full record about a study participant.\n"
        },
        {
          "properties": {
            "healthCode": {
              "type": "string",
              "readOnly": true,
              "description": "Only included in studies that have been configured to return the health code, and only to researchers through the researcher APIs.\n"
            },
            "email": {
              "type": "string",
              "description": "The user's email."
            },
            "phone": {
              "$ref": "#/definitions/Phone"
            },
            "consentHistories": {
              "type": "object",
              "readOnly": true,
              "description": "A complete historical record of all the user's consents and withdrawals of consent for all studies in the app.\n",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserConsentHistory"
                }
              },
              "x-nullable": false
            },
            "consented": {
              "description": "True if the user has consented to all required consents, based on the user's most recent request info (client info, languages, data groups). May be null if this object was not constructed with consent histories, or if consent status is indeterminate.\n",
              "type": "boolean",
              "x-nullable": false
            },
            "timeZone": {
              "type": "string",
              "description": "User's original time zone, as measured by the timezone used to request activities, as a string offset in ISO8601 format."
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "StudyParticipant",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "Subpopulation": {
      "type": "object",
      "description": "A subpopulation in the Bridge server is a group of people who, for the purposes of the study, must agree to a specific consent in order to participate in a study. (Some consents can be optional; these will not prevent participants from using Bridge.) For example, a study may have one consent for all participants and a further, optional consent to contribute genetic information. The user must sign the first consent, and may choose to sign the second consent; Bridge will track the status of all this and refuse data from a participant who has not signed all required consents.\n\n* Users are assigned to one or more subpopulations on every request;\n* Bridge verifies that the user has signed all their required consents;\n* If they have, they are given access to the system. Their session will include detailed information about their consent status;\n* If the user's consent is not complete, Bridge returns a 412 response (Precondition Not Met). The JSON in that response will include a [UserSessionInfo](#UserSessionInfo) object that contains a summary of the user's consent status.\n\n**Note:** filtering on Bridge is **opt-in**: if a request does not include information like a `User-Agent` header, then all subpopulations may be assumed to apply to the caller.\n",
      "required": [
        "guid",
        "name",
        "criteria",
        "required",
        "defaultGroup",
        "version"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "A unique auto-generated identifier for the subpopulation. Usually a GUID (but not always). Cannot be changed after creation. Used to retrieve the published consent for this subpopulation.\n",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "description": "The name of this subpopulation.",
          "x-nullable": false
        },
        "description": {
          "type": "string",
          "description": "The description of this subpopulation."
        },
        "criteria": {
          "$ref": "#/definitions/Criteria",
          "description": "Optional selection criteria that can be used to determine if a user should be assigned to this subpopulation or not. If the user does not match a subpopulation, then that subpopulation and its requirements are invisible to that user. Otherwise the user is in the subpopulation and all its consent requirements apply.\n",
          "x-nullable": false
        },
        "autoSendConsentSuppressed": {
          "type": "boolean",
          "default": false,
          "description": "Should the user automatically be sent (via email or SMS) a copy of the consent when they sign it?\n",
          "x-nullable": false
        },
        "required": {
          "type": "boolean",
          "description": "If true, participants must sign the consent associated with this subpopulation if they are identified as a member of this subpopulation. Users will receive a 412 response from Bridge if this condition is not met.\n",
          "x-nullable": false
        },
        "defaultGroup": {
          "type": "boolean",
          "description": "If true, this is the default subpopulation created for an app, and it cannot be deleted (although it can be changed, and even made optional or hidden through the use of criteria).\n",
          "x-nullable": false
        },
        "publishedConsentCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The creation date (ISO 8601 timestamp) of the version of the consent agreement for this subpopulation that is published, ie. that is presented to users for their signature. The subpopulation guid and this createdOn timestamp can be used to retrieve the consent document.\n",
          "x-nullable": false
        },
        "dataGroupsAssignedWhileConsented": {
          "type": "array",
          "description": "The data groups that will be assigned to a participant who consents to membership in this subpopulation. If the participant withdraws from this subpopulation, the data groups will be removed from their account.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "substudyIdsAssignedOnConsent": {
          "type": "array",
          "description": "The substudies this participant is associated to when they consent to membership in this subpopulation. This association is permanent (even if the participant withdraws from the subpopulation, they are still part of the substudy, visible to substudy research administrations, and so forth).",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n",
          "x-nullable": false
        },
        "consentHTML": {
          "type": "string",
          "description": "The URL to retrieve an HTML version of the published and active version of the consent. This can be referenced in your mobile app, web site, etc. Publishing a new consent revision will update this document.\n",
          "x-nullable": false
        },
        "consentPDF": {
          "type": "string",
          "description": "The URL to retrieve a PDF version of the published and active version of the consent. This can be referenced in your mobile app, web site, etc. Publishing a new consent revision will update this document.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Subpopulation",
          "x-nullable": false
        }
      }
    },
    "SubscriptionRequest": {
      "type": "object",
      "description": "",
      "required": [
        "topicGuids"
      ],
      "properties": {
        "topicGuids": {
          "type": "array",
          "description": "The topics to which the caller should be subscribed. If a topic is not in this list, and the caller is currently subscribed to that topic, they will be unsubscribed from that topic.\n",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SubscriptionRequest",
          "x-nullable": false
        }
      }
    },
    "SubscriptionStatus": {
      "type": "object",
      "description": "A participant will receive one of these records for every topic in an app, indicating whether or not the participant is subscribed to that topic. The list of topics can be used to show the user a UI to change these subscriptions.\n",
      "properties": {
        "topicGuid": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "topicName": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "subscribed": {
          "type": "boolean",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SubscriptionStatus",
          "x-nullable": false
        }
      }
    },
    "Substudy": {
      "description": "A sub-study (an outside organization providing participants for a study).\n",
      "type": "object",
      "required": [
        "id",
        "name",
        "version"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier for this sub-study.",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "description": "The name of the sub-study.",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this sub-study been logically deleted (an admin can restore it)?\n",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the app config was last modified.",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the sub-study. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of this `Substudy` revision needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Substudy",
          "x-nullable": false
        }
      }
    },
    "Survey": {
      "type": "object",
      "description": "The definition of a survey.",
      "required": [
        "guid",
        "name",
        "identifier",
        "version",
        "elements"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "moduleId": {
          "type": "string",
          "description": "Module ID, if this survey was imported from a shared module."
        },
        "moduleVersion": {
          "type": "integer",
          "description": "Module version, if this survey was imported from a shared module."
        },
        "name": {
          "type": "string",
          "description": "The name of this survey. The name can be changed after creation, and should not appear in the UI.\n",
          "x-nullable": false
        },
        "identifier": {
          "type": "string",
          "description": "A private name for the survey, only visible to researchers, used to identify the survey on export. It is recommended (but not required) that this identifier be unique for this survey type within this app.\n",
          "x-nullable": false
        },
        "published": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if this survey revision has been published, and is accessible to users through scheduling. More than one version of a survey may be published; it is most common to return the most recently published version to users.\n",
          "x-nullable": false
        },
        "schemaRevision": {
          "type": "integer",
          "format": "int64",
          "description": "The corresponding schema revision that Bridge server uses to export survey answers to Synapse.\n"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The ISO 8601 date on which this version of this survey was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time when this version of the survey was last modified.",
          "x-nullable": false
        },
        "copyrightNotice": {
          "type": "string",
          "description": "A copyright notice identifying the owners of the published work.\n"
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this survey been logically deleted (an admin can restore it)?",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of this survey as used to implement optimistic locking. This must be passed back to the server on an update, unmodified, in order for the update to succeed. If the survey has been concurrently modified, the update will throw an error.\n",
          "x-nullable": false
        },
        "elements": {
          "type": "array",
          "description": "An ordered collection of SurveyElement sub-types (in the order they will appear in the survey).\n",
          "items": {
            "discriminator": "type",
            "$ref": "#/definitions/SurveyElement"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Survey",
          "x-nullable": false
        }
      }
    },
    "SurveyElement": {
      "type": "object",
      "description": "A survey element (either an info screen or a question).",
      "discriminator": "type",
      "required": [
        "guid",
        "identifier"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "description": "A unique GUID for this element of the survey",
          "x-nullable": false
        },
        "beforeRules": {
          "type": "array",
          "description": "Survey elements can include one or more rules about how to progress through the elements of a survey (e.g. skipping a question if the user has been assigned to a specific data group). These rules are evaluated before the current element and may prevent it from being displayed. See [Survey Rule](#SurveyRule) for more information.\n",
          "items": {
            "$ref": "#/definitions/SurveyRule"
          },
          "x-nullable": false
        },
        "afterRules": {
          "type": "array",
          "description": "Survey elements can include one or more rules about how to progress through the elements of a survey (e.g. skipping some questions if they are not relevant to the participant, based on an answer to a question). These rules are evaluated after the user answers the current survey question. See [Survey Rule](#SurveyRule) for more information.\n",
          "items": {
            "$ref": "#/definitions/SurveyRule"
          },
          "x-nullable": false
        },
        "identifier": {
          "type": "string",
          "description": "A unique and easy-to-remember identifier, assigned by a researcher, that is maintained through later versions of the survey.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        }
      }
    },
    "SurveyInfoScreen": {
      "description": "A screen of a survey that presents information to the user: instructions, a thank you message, copyright notice, or anything similar. \n",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SurveyElement"
        },
        {
          "required": [
            "title",
            "prompt"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "A title for this screen.",
              "x-nullable": false
            },
            "prompt": {
              "type": "string",
              "description": "The main instructions or information text for the user",
              "x-nullable": false
            },
            "promptDetail": {
              "type": "string",
              "description": "Further information on the instructions, displayed in a secondary manner to the prompt (smaller text, more button, etc.).\n"
            },
            "image": {
              "description": "An optional Image element describing an image to show for this screen.",
              "$ref": "#/definitions/Image"
            }
          }
        }
      ]
    },
    "SurveyQuestion": {
      "description": "A question in the survey.\n",
      "allOf": [
        {
          "$ref": "#/definitions/SurveyElement"
        },
        {
          "required": [
            "title",
            "prompt",
            "constraints",
            "uiHint"
          ]
        },
        {
          "properties": {
            "title": {
              "type": "string",
              "description": "A title for this question. Although this is required, it may or may not be used in the interface. \n",
              "x-nullable": false
            },
            "prompt": {
              "type": "string",
              "description": "The question proper.\n",
              "x-nullable": false
            },
            "promptDetail": {
              "type": "string",
              "description": "Sub-question text that provides further instructions or clarifications on how to answer.\n"
            },
            "uiHint": {
              "$ref": "#/definitions/UIHint",
              "x-nullable": false
            },
            "constraints": {
              "$ref": "#/definitions/Constraints",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "SurveyQuestionOption": {
      "description": "For questions with a list of enumerated answers, this object represents one of those answers.\n",
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "description": "The text to show in the UI (must be plain text).",
          "x-nullable": false
        },
        "detail": {
          "type": "string",
          "description": "Detail text shown in a de-emphasized way near the label in the UI (must be plain text).\n"
        },
        "value": {
          "type": "string",
          "description": "The value to submit when this option is selected. The value is always a string, but should be convertible to the data type of the question's constraints. If no value is provided, than the label should be sent as the answer to the surver.\n"
        },
        "image": {
          "$ref": "#/definitions/Image",
          "description": "An optional Image element describing an image to show for this option. It should be shown along with the label (which will still be required).\n"
        },
        "exclusive": {
          "type": "boolean",
          "description": "If this option is selected, deselect all other options in the question. This is used for a \"none of the above\" type option in multiple choice questions.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SurveyQuestionOption",
          "x-nullable": false
        }
      }
    },
    "SurveyReference": {
      "type": "object",
      "description": "A pointer to a survey defined for this app, and associated with a survey to be taken as part of the mobile application health study. If the `createdOn` value is null, then the reference is to the most recently published version of the survey (the specific version that should be used will be resolved when a [ScheduledActivity](#ScheduledActivity) is created for the participant).\n",
      "required": [
        "guid"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The survey identifier.",
          "x-nullable": false
        },
        "guid": {
          "type": "string",
          "description": "The survey guid",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "description": "The createdOn timestamp of the version of the survey. This can be null, which indicates the most recently published version of the study should be used.\n",
          "x-nullable": false
        },
        "href": {
          "type": "string",
          "readOnly": true,
          "description": "An URL to retrieve the survey.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SurveyReference",
          "x-nullable": false
        }
      }
    },
    "SurveyRule": {
      "description": "An information screen or question may have one or more rules in an array:\n\n* Rules are evaluated before the screen is display, and afterward after the user answers a question, or triggers navigation away from the screen through a `next` or `decline to answer` response;\n* Rules are evaluated against the user's answer to the question (using the `value` property) or against  the user's assigned data groups (using the `dataGroups` property);\n* If a rule matches, the action for that rule should be followed (e.g. showing a different question than the next question in the list, or ending the survey);\n* Rule actions will specify whether or not further rules in the list should be evaluated (navigation rules end evaluation, while other actions do not); \n* If a question allows multiple answers to be submitted, the rule expression matches the rule if *any* of the submitted answers match the rule;\n* If there are no rules, or no rule matches, proceed to the next question in the list.\n\nOne and only one action should be provided in the rule: `skipTo`, `endSurvey`, `assignDataGroup`, `displayIf`, or `displayOnly`.\n",
      "type": "object",
      "required": [
        "operator"
      ],
      "properties": {
        "operator": {
          "$ref": "#/definitions/Operator",
          "x-nullable": false
        },
        "value": {
          "type": "string",
          "description": "The answer submitted by the user to the question. This value will be tested against the \nrule expression (the value is always expressed as  a string, regardless of the \nquestion's data type). For example, a rule with value=\"10\",  operator=eq, indicates that \nthe survey rule expression will be true if the user's answer is equal to 10.\n"
        },
        "dataGroups": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Some operators will test a set of data groups against the user's set of data groups. The operators `any` and `all` make a comparison of the sets in this property against the user's data groups.\n",
          "x-nullable": false
        },
        "skipTo": {
          "type": "string",
          "description": "The property will reference an identifier for a question in the survey. If specified, and the rule's expression is true, stop evaluating survey rules and display that question next. Progress through the survey should proceed from that question in the list. The target question should be after the current question in the survey.\n"
        },
        "endSurvey": {
          "type": "boolean",
          "description": "If specified, and the rule's expression is true, immediately stop evaluating rules and end the survey. The users existing answers to the survey should be sent to the server.\n"
        },
        "displayIf": {
          "type": "boolean",
          "description": "**Before rules only.** If the rule expression is true, display this question or information screen.\n"
        },
        "displayUnless": {
          "type": "boolean",
          "description": "**Before rules only.** If the rule expression is true, do not display this question or information. Put differently, show the screen unless the expression is true.\n"
        },
        "assignDataGroup": {
          "type": "string",
          "description": "If specified, the value is a data group that should be added to the survey taker if the rule expression is true, or removed if the rule expression is false. Survey rules that specify `assignDataGroup` do not end evaluation of rules in the list; the engine should proceed to evaluate and apply the next rule in the list. The changes to the user's data groups should not be applied if the user cancels the survey. \n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "SurveyRule",
          "x-nullable": false
        }
      }
    },
    "TaskReference": {
      "type": "object",
      "description": "A pointer to a task identifier defined for this app, and associated with a task to be performed as part of the mobile application health study (e.g. a walking test).\n",
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The identifier that defines a task on the client. Note that this value is conventional; it needs to be defined for an app but has no further meaning on the server. \n",
          "x-nullable": false
        },
        "schema": {
          "$ref": "#/definitions/SchemaReference"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "TaskReference",
          "x-nullable": false
        }
      }
    },
    "Template": {
      "description": "A template for messaging (SMS, email, etc.);",
      "type": "object",
      "required": [
        "name",
        "templateType"
      ],
      "properties": {
        "guid": {
          "type": "string",
          "x-nullable": false
        },
        "templateType": {
          "$ref": "#/definitions/TemplateType",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "description": {
          "type": "string"
        },
        "criteria": {
          "$ref": "#/definitions/Criteria",
          "description": "Selection criteria that can be used to determine if a given template should be used for the target user.\n",
          "x-nullable": false
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the template was created.",
          "x-nullable": false
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The date and time the template was last modified.",
          "x-nullable": false
        },
        "publishedCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time of the template revision that is the published revision to use."
        },
        "deleted": {
          "type": "boolean",
          "description": "Has this template been logically deleted (an admin can restore it)?",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the template. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring. It can also serve as a key to determine if a local cache of this `Template` revision needs to be updated.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Template",
          "x-nullable": false
        }
      }
    },
    "TemplateRevision": {
      "description": "A revision of a template",
      "type": "object",
      "required": [
        "mimeType"
      ],
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "x-nullable": false
        },
        "createdBy": {
          "type": "string",
          "readOnly": true,
          "x-nullable": false
        },
        "documentContent": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "mimeType": {
          "$ref": "#/definitions/MimeType"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "TemplateRevision",
          "x-nullable": false
        }
      }
    },
    "DateTimeHolder": {
      "description": "An object that provides a timestamp.\n",
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true,
          "description": "The datetime of an entity."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "DateTimeHolder",
          "x-nullable": false
        }
      }
    },
    "Upload": {
      "type": "object",
      "required": [
        "uploadId",
        "schemaId",
        "schemaRevision",
        "status",
        "requestedOn",
        "validationMessageList"
      ],
      "properties": {
        "uploadId": {
          "type": "string",
          "readOnly": true,
          "description": "The GUID assigned to this upoad.",
          "x-nullable": false
        },
        "encrypted": {
          "type": "boolean",
          "description": "True if the upload is encrypted. False if it is not encrypted."
        },
        "schemaId": {
          "type": "string",
          "readOnly": true,
          "description": "The ID of the schema for this upload."
        },
        "schemaRevision": {
          "type": "integer",
          "readOnly": true,
          "format": "int64",
          "description": "The revision for the schema of this upload."
        },
        "recordId": {
          "type": "string",
          "readOnly": true,
          "description": "The record ID of the upload in Synapse."
        },
        "healthData": {
          "$ref": "#/definitions/HealthDataRecord",
          "readOnly": true
        },
        "contentLength": {
          "type": "integer",
          "readOnly": true,
          "format": "int64",
          "description": "The size of the object in bytes. A standard HTTP header. For more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)\n"
        },
        "status": {
          "$ref": "#/definitions/UploadStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "requestedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The date and time (ISO 8601 format) that the client requested an URL to make an upload to the server.\n",
          "x-nullable": false
        },
        "completedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The date and time (ISO 8601 format) that the upload was completed.\n"
        },
        "completedBy": {
          "type": "string",
          "readOnly": true,
          "description": "Currently the API has an endpoint for the client to call and mark an upload completed. However, there is also a process that detects uploads to S3 and marks the uploads complete. This field indicates which client completed the upload.\n",
          "enum": [
            "app",
            "s3_worker"
          ]
        },
        "validationMessageList": {
          "type": "array",
          "readOnly": true,
          "description": "An array of error messages if this upload did not pass validation.\n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "healthRecordExporterStatus": {
          "$ref": "#/definitions/SynapseExporterStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "zipped": {
          "type": "boolean",
          "description": "True if the upload is zipped. False if it is a single file."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Upload",
          "x-nullable": false
        }
      }
    },
    "UploadFieldDefinition": {
      "description": "Note: For legacy reasons, this is the only model object returned from the API that does not have a type property reflecting the implementation structure of the JSON. Instead, the type attribute is of the type [UploadFieldType](#UploadFieldType).\n",
      "type": "object",
      "required": [
        "name",
        "type",
        "multiChoiceAnswerList"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Field name. A schema cannot contain fields with the same name.",
          "x-nullable": false
        },
        "required": {
          "type": "boolean",
          "default": true,
          "description": "Whether this field is required.",
          "x-nullable": false
        },
        "type": {
          "$ref": "#/definitions/UploadFieldType",
          "x-nullable": false
        },
        "allowOtherChoices": {
          "type": "boolean",
          "description": "Used for MULTI_CHOICE. True if the multi-choice field allows an \"other\" answer with user freeform text. This tells BridgeEX to reserve an \"other\" column for this field. Can be null, so that the number of field parameters doesn't explode.\n"
        },
        "fileExtension": {
          "type": "string",
          "description": "Used for ATTACHMENT_V2 types. Used as a hint by BridgeEX to preserve the file extension as a quality-of-life improvement. Includes the period. Examples: \".json\", \".csv\". Optional, defaults to \".tmp\".\n"
        },
        "mimeType": {
          "type": "string",
          "description": "Used for ATTACHMENT_V2 types. Used as a hint by BridgeEX to mark a Synapse file handle with the correct MIME type as a quality-of-life improvement. Optional, defaults to \"application/octet-stream\".\n"
        },
        "maxLength": {
          "type": "integer",
          "description": "Used for STRING, SINGLE_CHOICE, and INLINE_JSON_BLOB types. This is a hint for BridgeEX to create a Synapse column with the right width.\n\nIf not specified, Bridge will use the default max length of 100 (if applicable).\n"
        },
        "multiChoiceAnswerList": {
          "type": "array",
          "description": "Used for MULTI_CHOICE types. This lists all valid answers for this field. It is used by BridgeEX to create the Synapse table columns for MULTI_CHOICE fields. This is a list because order matters, in terms of Synapse column order. Must be specified if the field type is a MULTI_CHOICE.\n\nFor schemas generated from surveys, this list will be the \"value\" in the survey question option, or the \"label\" if value is not specified.\n",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "unboundedText": {
          "type": "boolean",
          "description": "True if this field is a text-field with unbounded length. (Only applies to fields that are serialized as text, such as INLINE_JSON_BLOB, SINGLE_CHOICE, or STRING. Can be null, so that the number of field parameters doesn't explode. This flag takes precedence over the maxLength value.\n"
        }
      }
    },
    "UploadRequest": {
      "description": "**Important: Headers of the same values must be used when doing the upload against the pre-signed URL.**\n",
      "type": "object",
      "required": [
        "name",
        "contentLength",
        "contentMd5",
        "contentType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "File name"
        },
        "contentLength": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the object in bytes. A standard HTTP header. For more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)\n"
        },
        "contentMd5": {
          "type": "string",
          "description": "The base64-encoded, 128-bit MD5 digest of the object body."
        },
        "contentType": {
          "type": "string",
          "description": "A standard MIME type. For more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17)\n"
        },
        "encrypted": {
          "type": "boolean",
          "default": true,
          "description": "True if the upload is encrypted. False if it is not encrypted. If not specified, defaults to true."
        },
        "zipped": {
          "type": "boolean",
          "default": true,
          "description": "True if the upload is zipped. False if it is a single file. If not specified, defaults to true."
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadRequest",
          "x-nullable": false
        }
      }
    },
    "UploadSchema": {
      "type": "object",
      "description": "Represents the expected fields and types for a data upload. This is used to validate incoming uploads and to export data to Synapse. See [Bridge Upload Data Format](/articles/study_design/upload_data_format.html) for more details about uploads.\n",
      "required": [
        "name",
        "revision",
        "schemaId",
        "version",
        "fieldDefinitions"
      ],
      "properties": {
        "maxAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header in a prescribed format, that declares the app version to be equal to or less than this version number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          },
          "x-nullable": false
        },
        "minAppVersions": {
          "type": "object",
          "description": "A map of operating system names to minimum app versions. The user must send a `User-Agent` header in a prescribed format, that declares the app version to be equal to or greater than this version number, in order to match.\n",
          "additionalProperties": {
            "type": "integer"
          },
          "x-nullable": false
        },
        "moduleId": {
          "type": "string",
          "description": "Module ID, if this schema was imported from a shared module."
        },
        "moduleVersion": {
          "type": "integer",
          "description": "Module version, if this schema was imported from a shared module."
        },
        "name": {
          "type": "string",
          "description": "User-friendly schema name.",
          "x-nullable": false
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "description": "Revision number of the schema, used to distinguish versions of the same data format. This should be blank when creating a schema, and it should be passed back to the server when updating. If the schema revision cannot be updated in a backwards-compatible fashion, the server will throw an exception. You will need to increment the revision number and create a new revision of the schema.\n",
          "x-nullable": false
        },
        "schemaId": {
          "type": "string",
          "description": "Unique identifier for the schema."
        },
        "surveyGuid": {
          "type": "string",
          "description": "If this schema is created from a survey, this is the GUID of the survey it represents.\n"
        },
        "appId": {
          "type": "string",
          "readOnly": true,
          "description": "**Only available through worker APIs.** The identifier of the app from which this schema was retrieved.\n",
          "x-nullable": false
        },
        "surveyCreatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "If this schema is created from a survey, this is the createdOn timestamp \n(in ISO 8601 format) of the survey it represents.\n"
        },
        "schemaType": {
          "$ref": "#/definitions/UploadSchemaType",
          "x-nullable": false
        },
        "deleted": {
          "type": "boolean",
          "x-nullable": false
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The optimistic locking version of the survey. This value must be submitted as part of the next update of the model. If it does not match the value on the server, a 409 error (Conflict) will prevent the update from occurring.\n",
          "x-nullable": false
        },
        "fieldDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadFieldDefinition"
          },
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadSchema",
          "x-nullable": false
        }
      }
    },
    "UploadSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The upload ID. The client needs to use this ID to call Bridge when the upload is complete.\n",
          "x-nullable": false
        },
        "url": {
          "type": "string",
          "readOnly": true,
          "description": "A pre-signed URL for doing a PUT upload of the data. The URL will remain valid for 24 hours once created on the Bridge side.\n",
          "x-nullable": false
        },
        "expires": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "The ISO 8601 date and time stamp at which this session will expire.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadSession",
          "x-nullable": false
        }
      }
    },
    "UploadValidationStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "The identifier for this upload.",
          "x-nullable": false
        },
        "messageList": {
          "type": "array",
          "readOnly": true,
          "description": "An array of error messages if failures occurred during validation.",
          "items": {
            "type": "string"
          },
          "x-nullable": false
        },
        "status": {
          "$ref": "#/definitions/UploadStatus",
          "readOnly": true,
          "x-nullable": false
        },
        "record": {
          "$ref": "#/definitions/HealthDataRecord",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UploadValidationStatus",
          "x-nullable": false
        }
      }
    },
    "UserConsentHistory": {
      "description": "A record of a complete consent (including both the dates of consent and withdrawal, if applicable);",
      "type": "object",
      "properties": {
        "subpopulationGuid": {
          "type": "string",
          "readOnly": true,
          "description": "The consent group that the participant agreed to participate in.",
          "x-nullable": false
        },
        "consentCreatedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "ISO 8601 date and time that the consent was created on.",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Full name as entered by the participant.",
          "x-nullable": false
        },
        "birthdate": {
          "type": "string",
          "readOnly": true,
          "format": "date",
          "description": "ISO 8601 date string (e.g. \"YYYY-MM-DD\")."
        },
        "imageData": {
          "type": "string",
          "readOnly": true,
          "description": "The signature image in a base 64 encoding."
        },
        "imageMimeType": {
          "type": "string",
          "readOnly": true,
          "description": "The IANA mime type indicator for the image (e.g. \"image/png\")."
        },
        "signedOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "ISO 8601 date and time that the consent was signed by the user.",
          "x-nullable": false
        },
        "withdrewOn": {
          "type": "string",
          "readOnly": true,
          "format": "date-time",
          "description": "ISO 8601 date and time that the user withdrew the consent, if the user withdrew from a study (note that later consent records may re-enroll the user in the study; nothing prevents users from joining and quitting a study multiple times).\n"
        },
        "hasSignedActiveConsent": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if the user signed the most recently published version of the consent, false otherwise.\n",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "UserConsentHistory",
          "x-nullable": false
        }
      }
    },
    "UserSessionInfo": {
      "readOnly": true,
      "allOf": [
        {
          "description": "Information about the user and their session. This information cannot be updated; to update a user's record, use the StudyParticipant record and APIs.\n"
        },
        {
          "type": "object"
        },
        {
          "properties": {
            "firstName": {
              "type": "string",
              "readOnly": true,
              "description": "First name (given name) of the user."
            },
            "lastName": {
              "type": "string",
              "readOnly": true,
              "description": "Last name (family name) of the user."
            },
            "externalId": {
              "type": "string",
              "readOnly": true,
              "description": "An externally-assignable identifier a research partner can use to re-identify a user's data in the exported data set (this must be provided by the application, it is not created by Bridge). It is a string that can be set or updated to any value without constraints, unless Bridge is configured to manage the study's external IDs. Then the ID must be submitted on sign up, and cannot be modified afterward.\n"
            },
            "id": {
              "type": "string",
              "readOnly": true,
              "description": "An ID assigned to this account by Bridge system. This ID is exposed in the API and is different from the health code assigned to the user's anonymized data. Bridge never exports this ID along with the health code from Bridge.  \n",
              "x-nullable": false
            },
            "notifyByEmail": {
              "type": "boolean",
              "readOnly": true,
              "default": true,
              "description": "True if the user has consented to be contacted via email outside the application, false otherwise.\n",
              "x-nullable": false
            },
            "attributes": {
              "type": "object",
              "readOnly": true,
              "additionalProperties": {
                "type": "string"
              },
              "description": "A map of user profile attributes that have been set for this user (the attributes themselves must be specified in the app's configuration, and the values are stored encrypted in case they capture personally-identifying information).\n",
              "x-nullable": false
            },
            "sharingScope": {
              "$ref": "#/definitions/SharingScope",
              "readOnly": true,
              "x-nullable": false
            },
            "createdOn": {
              "type": "string",
              "format": "date-time",
              "readOnly": true,
              "description": "The date and time the account was created.",
              "x-nullable": false
            },
            "emailVerified": {
              "type": "boolean",
              "readOnly": true,
              "description": "Has the user verified that they have control of this email address?",
              "x-nullable": false
            },
            "phoneVerified": {
              "type": "boolean",
              "readOnly": true,
              "description": "Has the user verified that they have control of this phone number?",
              "x-nullable": false
            },
            "status": {
              "$ref": "#/definitions/AccountStatus",
              "readOnly": true,
              "x-nullable": false
            },
            "roles": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/definitions/Role"
              },
              "x-nullable": false
            },
            "dataGroups": {
              "type": "array",
              "readOnly": true,
              "description": "The data groups set for this user. Data groups must be strings that are defined in the list of all valid data groups for the app, as part of the app object. \n",
              "items": {
                "type": "string"
              },
              "x-nullable": false
            },
            "clientData": {
              "type": "object",
              "readOnly": true,
              "description": "Client data for a user should be in a syntactically valid JSON format. It will be returned as is to the client (as JSON).\n",
              "additionalProperties": true
            },
            "languages": {
              "type": "array",
              "readOnly": true,
              "description": "Two letter language codes to assign to this user (these are initially retrieved from the user's `Accept-Language` header and then persisted as part of account configuration). \n",
              "items": {
                "type": "string"
              },
              "x-nullable": false
            },
            "substudyIds": {
              "type": "array",
              "readOnly": true,
              "description": "The substudies this participant is associated to.",
              "items": {
                "type": "string"
              },
              "x-nullable": false
            },
            "externalIds": {
              "type": "object",
              "readOnly": true,
              "description": "The exernal IDs this participant is associated to, mapped to the substudy that issued the external ID. Typically a user signs up with the external ID, and is assigned to that substudy as a result.",
              "additionalProperties": {
                "type": "string"
              },
              "x-nullable": false
            },
            "authenticated": {
              "type": "boolean",
              "readOnly": true,
              "description": "Is the user currently authenticated?",
              "x-nullable": false
            },
            "sessionToken": {
              "type": "string",
              "readOnly": true,
              "description": "The session token that must be returned to the server to access services requiring authentication.",
              "x-nullable": false
            },
            "reauthToken": {
              "type": "string",
              "readOnly": true,
              "description": "A token, supplied when a new session is returned, that can be used to refresh the session at a later time. The API to reauthenticate with the token will refresh your session token and reset the session's timeout value. The reauthentication token can only be used one time. \n"
            },
            "environment": {
              "$ref": "#/definitions/Environment",
              "readOnly": true,
              "x-nullable": false
            },
            "email": {
              "type": "string",
              "readOnly": true,
              "description": "The user's email."
            },
            "phone": {
              "$ref": "#/definitions/Phone",
              "readOnly": true
            },
            "dataSharing": {
              "type": "boolean",
              "readOnly": true,
              "description": "True if the sharing scope is anything other than \"no_sharing\".",
              "x-nullable": false
            },
            "signedMostRecentConsent": {
              "type": "boolean",
              "readOnly": true,
              "description": "True if all *required* consents have been signed and the versions signed are the most up-to-date versions of those consents.",
              "x-nullable": false
            },
            "synapseUserId": {
              "type": "string",
              "description": "The numerical identifier for a Synapse account. For administrative accounts, this will allow the user to sign in using Synapse accounts, no further credentials are needed to access the system. This value can only be set when creating an account; otherwise the identifiers update API must be used to add the ID to an existing account.\n"
            },
            "consented": {
              "type": "boolean",
              "readOnly": true,
              "description": "True if all required consents have been signed.",
              "x-nullable": false
            },
            "consentStatuses": {
              "type": "object",
              "readOnly": true,
              "description": "A mapping from a subpopulation GUID to information about the participant's consent status in that subpopulation (whether consented or not). Only the subpopulations that currently apply to this user will have a ConsentStatus object in the map.\n",
              "additionalProperties": {
                "$ref": "#/definitions/ConsentStatus"
              },
              "x-nullable": false
            },
            "type": {
              "type": "string",
              "readOnly": true,
              "description": "UserSessionInfo",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "Verification": {
      "description": "A payload to sent the email or phone verification token back to the bridge server.",
      "type": "object",
      "required": [
        "sptoken"
      ],
      "properties": {
        "sptoken": {
          "type": "string",
          "description": "The token sent via email or SMS message to the user"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Verification",
          "x-nullable": false
        }
      }
    },
    "VersionHolder": {
      "description": "An object that holds the version for a created or updated entity.",
      "type": "object",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64",
          "readOnly": true,
          "description": "The optimistic locking version of the entity.",
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "VersionHolder",
          "x-nullable": false
        }
      }
    },
    "Withdrawal": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "description": "An optional, free text description from the participant about why they are no longer participating in the study. Some applications provide a more structured form to the user, and convert this to a text response.\n\nThe reason will be emailed to the consent notification email address as part of the notification that this user has withdrawn from the study.\n"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "Withdrawal",
          "x-nullable": false
        }
      }
    },
    "ResourceList": {
      "type": "object",
      "discriminator": "type",
      "description": "Lists from the Bridge server will be returned in a list payload that includes an `items` property with the list of objects, and a `requestParams` object that includes the values that were submitted to the server to generate the list. This list is an unpaged and complete list of all indicated items on the server.\n",
      "properties": {
        "requestParams": {
          "$ref": "#/definitions/RequestParams",
          "readOnly": true,
          "x-nullable": false
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "description": "ResourceList",
          "x-nullable": false
        }
      }
    },
    "PagedResourceList": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "total": {
              "type": "integer",
              "readOnly": true,
              "x-nullable": false,
              "description": "The total number of records in the items list"
            }
          }
        }
      ]
    },
    "ForwardCursorPagedResourceList": {
      "type": "object",
      "description": "One page of records from a source that only allows you to fetch the next page of \nresources (no random access via an index to anywhere in the set of records). The \nkey to retrieve the next page of records is provided by the `nextPageOffsetKey` value.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "nextPageOffsetKey": {
              "type": "string",
              "readOnly": true,
              "description": "The offsetKey to be provided in the next request to get the next page of \nresources.\n"
            },
            "hasNext": {
              "type": "boolean",
              "readOnly": true,
              "description": "true if there is a further page of resources, false otherwise."
            }
          }
        }
      ]
    },
    "AccountSummaryList": {
      "type": "object",
      "readOnly": true,
      "description": "Payload returning a list of [AccountSummary](/#AccountSummary) records.",
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/AccountSummary"
              }
            }
          }
        }
      ]
    },
    "ActivityList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        }
      ]
    },
    "ActivityEventList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ActivityEvent"
              }
            }
          }
        }
      ]
    },
    "AppConfigList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/AppConfig"
              }
            }
          }
        }
      ]
    },
    "AppConfigElementList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/AppConfigElement"
              }
            }
          }
        }
      ]
    },
    "AppList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/App"
              }
            }
          }
        }
      ]
    },
    "AssessmentList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Assessment"
              }
            }
          }
        }
      ]
    },
    "CompoundActivityDefinitionList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/CompoundActivityDefinition"
              }
            }
          }
        }
      ]
    },
    "ExternalIdentifierList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ForwardCursorPagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ExternalIdentifier"
              }
            }
          }
        }
      ]
    },
    "ExternalResourceList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ExternalResource"
              }
            }
          }
        }
      ]
    },
    "FileMetadataList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/FileMetadata"
              }
            }
          }
        }
      ]
    },
    "FileRevisionList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/FileRevision"
              }
            }
          }
        }
      ]
    },
    "HealthDataRecordList": {
      "type": "object",
      "readOnly": true,
      "description": "List of health data records within a date-time range.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/HealthDataRecord"
              }
            }
          }
        }
      ]
    },
    "NotificationRegistrationList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/NotificationRegistration"
              }
            }
          }
        }
      ]
    },
    "NotificationTopicList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/NotificationTopic"
              }
            }
          }
        }
      ]
    },
    "MasterSchedulerConfigList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/MasterSchedulerConfig"
              }
            }
          }
        }
      ]
    },
    "PagedExternalResourceList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ExternalResource"
              }
            }
          }
        }
      ]
    },
    "ReportDataList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ReportData"
              }
            }
          }
        }
      ]
    },
    "ForwardCursorReportDataList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ForwardCursorPagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ReportData"
              }
            }
          }
        }
      ]
    },
    "ReportIndexList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ReportIndex"
              }
            }
          }
        }
      ]
    },
    "ScheduleList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Schedule"
              }
            }
          }
        }
      ]
    },
    "ScheduledActivityList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        }
      ]
    },
    "ScheduledActivityListV4": {
      "type": "object",
      "readOnly": true,
      "description": "The endpoint takes a startTime (inclusive) and endTime (exclusive) to form a time range (up to 15 days). Any activity that has an active time window (from its scheduled time to its expiration time) that falls on or after the start time, and before the end time, is included in the returned tasks.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        }
      ]
    },
    "ForwardCursorScheduledActivityList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ForwardCursorPagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/ScheduledActivity"
              }
            }
          }
        }
      ]
    },
    "ForwardCursorStringList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ForwardCursorPagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "SchedulePlanList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/SchedulePlan"
              }
            }
          }
        }
      ]
    },
    "SharedModuleMetadataList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/SharedModuleMetadata"
              }
            }
          }
        }
      ]
    },
    "StringList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "StudyConsentList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/StudyConsent"
              }
            }
          }
        }
      ]
    },
    "SubpopulationList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Subpopulation"
              }
            }
          }
        }
      ]
    },
    "SubscriptionStatusList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/SubscriptionStatus"
              }
            }
          }
        }
      ]
    },
    "SubstudyList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Substudy"
              }
            }
          }
        }
      ]
    },
    "SurveyList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Survey"
              }
            }
          }
        }
      ]
    },
    "TemplateList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Template"
              }
            }
          }
        }
      ]
    },
    "TemplateRevisionList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/PagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/TemplateRevision"
              }
            }
          }
        }
      ]
    },
    "UploadList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ForwardCursorPagedResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/Upload"
              }
            }
          }
        }
      ]
    },
    "UploadSchemaList": {
      "type": "object",
      "readOnly": true,
      "allOf": [
        {
          "$ref": "#/definitions/ResourceList"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/UploadSchema"
              }
            }
          }
        }
      ]
    },
    "Constraints": {
      "type": "object",
      "discriminator": "type",
      "required": [
        "dataType"
      ],
      "properties": {
        "dataType": {
          "$ref": "#/definitions/DataType"
        },
        "required": {
          "type": "boolean",
          "description": "All survey questions are optional/skippable by default. Must this question be answered by the user in order to advance in the survey?\n"
        },
        "type": {
          "type": "string",
          "x-nullable": false,
          "readOnly": true
        }
      }
    },
    "MultiValueConstraints": {
      "description": "A common question type where the participant is given a list of options to choose from. The \nUI representation of this question depends in part on whether the participant can select \nmultiple values, or add another value not included in the list:\n\n|uiHint|Description|\n|---|---|\n|checkbox, list|`allowMultiple` = true|\n|combobox|`allowMultiple` = false, `allowOther` = true|\n|radiobutton, select, slider|`allowMultiple` = false, `allowOther` = false|\n",
      "required": [
        "enumeration"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowOther": {
              "type": "boolean",
              "description": "True if the user should be able to enter another value besides those provided in the\nenumeration, false otherwise.\n"
            },
            "allowMultiple": {
              "type": "boolean",
              "description": "Can multiple values be returned as an answer? True if the client should submit multiple\nvalues, false otherwise.\n"
            },
            "enumeration": {
              "type": "array",
              "description": "The options presented for selection to the user.",
              "x-nullable": false,
              "items": {
                "$ref": "#/definitions/SurveyQuestionOption"
              }
            }
          }
        }
      ]
    },
    "BooleanConstraints": {
      "description": "**UI hints:** checkbox, toggle.\n",
      "required": [
        "dataType"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        }
      ]
    },
    "IntegerConstraints": {
      "description": "This type can be used to collect a number, or with a unit, it can be used to collect \na measure or a duration (e.g. \"3 hours\", or \"180 pounds\").\n\n**UI hints:** numberfield, slider, select.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "minValue": {
              "type": "integer",
              "description": "Minimum valid value. Required if UIHint is slider or select."
            },
            "maxValue": {
              "type": "integer",
              "description": "Maximum valid value. Required if UIHint is slider or select."
            },
            "step": {
              "type": "integer",
              "default": 1,
              "description": "In increase or decrease in valid values, e.g. a step of 5 for a question that \nrecords weight to the nearest 5 pounds.\n"
            }
          }
        }
      ]
    },
    "DecimalConstraints": {
      "description": "A floating point value.\n\n**UI hints:** numberfield, slider, select.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "minValue": {
              "type": "number",
              "description": "Minimum valid value. Required if UIHint is slider or select."
            },
            "maxValue": {
              "type": "number",
              "description": "Maximum valid value. Required if UIHint is slider or select."
            },
            "step": {
              "type": "number",
              "description": "In increase or decrease in valid values, e.g. a step of 0.1 for a question that records\nwater drunk in tenths of a liter.\n"
            }
          }
        }
      ]
    },
    "StringConstraints": {
      "description": "A string answer. \n\n**UI hints:** texfield, multilinetext.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "minLength": {
              "type": "integer",
              "description": "The minimum number of characters that should be allowed."
            },
            "maxLength": {
              "type": "integer",
              "description": "The maximum number of characters that should be allowed."
            },
            "pattern": {
              "type": "string",
              "description": "A regular expression pattern (omitting slashes) against with the input \nshould be validated.\n"
            },
            "patternErrorMessage": {
              "type": "string",
              "description": "If a pattern is provided, an error message is required, explaining the desired format if the \ndata does not fit the pattern.\n"
            },
            "patternPlaceholder": {
              "type": "string",
              "description": "An example of the data to be entered, usually shown in or next to the input control \n(e.g. \"###-###-####\" for a US telephone number). This is not required, but it is desirable.\n"
            }
          }
        }
      ]
    },
    "DateTimeConstraints": {
      "description": "**UI hints:** datetimepicker.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future?"
            },
            "allowPast": {
              "type": "boolean",
              "default": true,
              "description": "Should this question allow answers in the past?"
            },
            "earliestValue": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 date and time value that is the earliest value that may be set for this question. If allowFuture is false, that constraint should also be applied regardless of earliest/latestValue constraints.\n"
            },
            "latestValue": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 date and time value that is the earliest value that may be set for this question. If allowFuture is false, that constraint should also be applied regardless of earliest/latestValue constraints.\n"
            }
          }
        }
      ]
    },
    "DateConstraints": {
      "description": "A date without a time value (e.g. \"2016-07-28\").\n\n**UI hints:** datepicker.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future?"
            },
            "allowPast": {
              "type": "boolean",
              "default": true,
              "description": "Should this question allow answers in the past?"
            },
            "earliestValue": {
              "type": "string",
              "format": "date",
              "description": "ISO 8601 date value that is the earliest value that may be set for this question. If allowFuture is false, that constraint should also be applied regardless of earliest/latestValue constraints.\n"
            },
            "latestValue": {
              "type": "string",
              "format": "date",
              "description": "ISO 8601 date value that is the earliest value that may be set for this question. If allowFuture is false, that constraint should also be applied regardless of earliest/latestValue constraints.\n"
            }
          }
        }
      ]
    },
    "PostalCodeConstraints": {
      "description": "A data type for capturing partial postal code information. Although postal codes can be useful for locating users, combined with other information (such as gender and birthdate, or a rare disease condition), they can be identifying. For this reason there is guidance to the client on how this data can be collected, while preserving anonymity: \n\n* Canada (CA) - The first three characters of a Canadian postal code describe a sorting area of about 7,000 households. No specific guidance is given, but collecting the first 3 characters has been deemed reasonable. \n* United States (US) - collect only the first three digits of a zip code. Some 3 digit codes describe areas of 20,000 or less people; for these exceptional codes, substitute the value \"000\" instead before submitting to the server. If the survey constraints indicate that a US zip code is required, the `sparseZipCodePrefixes` array will be included in the constraint, with a list of these special partial zip codes. They are provided by the server so they can be updated based on new census information without having to update the survey or the client.\n\nOne way to protect the anonymity of the user is to limit the combination of partially identifying information that is asked for in a survey. For example do no ask for a specific birthdate in a survey where the information will be submitted to the server. This makes a partial postal code significantly less useful for reidentification.\n\n**UI hints:** postalcode.\n",
      "required": [
        "countryCode"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "countryCode": {
              "$ref": "#/definitions/CountryCode"
            },
            "sparseZipCodePrefixes": {
              "type": "array",
              "readOnly": true,
              "x-nullable": false,
              "items": {
                "type": "string"
              },
              "description": "Some 3 digit codes describe areas of 20,000 or less people; for these exceptional codes, which can more easily be used to reidentify participants, substitute the value \"000\" instead before submitting the survey answer to the server. If the survey constraints indicate that a US zip code is required, the `sparseZipCodePrefixes` array will be included in the constraint, with a list of these special partial zip codes.\n"
            }
          }
        }
      ]
    },
    "YearMonthConstraints": {
      "description": "A year and month without a date or time (e.g. \"2016-07\").\n\n**UI hints:** yearmonth.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future? If the current date falls in a month after the indicated month, it is considered to be in the future.\n"
            },
            "allowPast": {
              "type": "boolean",
              "default": true,
              "description": "Should this question allow answers in the past? If the current date falls in a month prior to the indicated month, it is considered to be in the past.\n"
            },
            "earliestValue": {
              "type": "string",
              "description": "ISO 8601 year and month value (\"YYYY-MM\") that is the earliest value that may be set for this question.  If allowFuture is false, that constraint should also be applied regardless of earliest/latestValue constraints.\n"
            },
            "latestValue": {
              "type": "string",
              "description": "ISO 8601 year and month value (\"YYYY-MM\") that is the earliest value that may be set for this question. If allowFuture is false, that constraint should also be applied regardless of earliest/latestValue constraints.\n"
            }
          }
        }
      ]
    },
    "YearConstraints": {
      "description": "A year value (e.g. \"2016\").\n\n**UI hints:** year, numberfield, slider.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "allowFuture": {
              "type": "boolean",
              "default": false,
              "description": "Should this question allow answers in the future? If the current date falls in a month after the indicated month, it is considered to be in the future.\n"
            },
            "allowPast": {
              "type": "boolean",
              "default": true,
              "description": "Should this question allow answers in the past? If the current date falls in a month prior to the indicated month, it is considered to be in the past.\n"
            },
            "earliestValue": {
              "type": "string",
              "description": "An ISO 8601 compliant, four digit year value."
            },
            "latestValue": {
              "type": "string",
              "description": "An ISO 8601 compliant, four digit year value."
            }
          }
        }
      ]
    },
    "TimeConstraints": {
      "description": "This is an ISO 8601 time value, in 24 hour time, milliseconds and seconds are optional, and there \nis no time zone for this value (e.g. 14:45:15.357). This represents a time of the day, regardless \nof where the user is, e.g. \"I take my medications at 3:00pm every day, whether I'm in Chicago or Tokyo.\"\n\n**UI hints:** timepicker.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        }
      ]
    },
    "DurationConstraints": {
      "description": "Deprecated. Use an integer value with a unit of measure instead.\n\nDurations should be given as an integer value (not an ISO 8601 duration value). For the time being, a duration string is accepted if the duration is measured in the same time units required by the question. For example, if the question requires minutes, the duration string must be \"PT120M\", not \"PT2H\" or other equivalent values.\n\n**UI hints:** numberfield, slider, select.\n",
      "required": [
        "unit"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "minValue": {
              "type": "integer",
              "description": "Maximum valid value. Required if UIHint is slider or select."
            },
            "maxValue": {
              "type": "integer",
              "description": "Minimum valid value. Required if UIHint is slider or select."
            },
            "step": {
              "type": "integer",
              "default": 1,
              "description": "In increase or decrease in valid values, e.g. a step of 5 for a question that records weight \nto the nearest 5 pounds.\n"
            }
          }
        }
      ]
    },
    "BloodPressureConstraints": {
      "description": "Systolic and diastolic systemic arterial pressure.\n\n**UI hints:** bloodpressure\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            }
          }
        }
      ]
    },
    "HeightConstraints": {
      "description": "A floating point value.\n\n**UI hints:** weight.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "forInfant": {
              "type": "boolean",
              "description": "Is this measurement for an infant?"
            }
          }
        }
      ]
    },
    "WeightConstraints": {
      "description": "A floating point value.\n\n**UI hints:** weight.\n",
      "allOf": [
        {
          "$ref": "#/definitions/Constraints"
        },
        {
          "properties": {
            "unit": {
              "$ref": "#/definitions/Unit"
            },
            "forInfant": {
              "type": "boolean",
              "description": "Is this measurement for an infant?"
            }
          }
        }
      ]
    }
  },
  "responses": {
    "400": {
      "description": "The submitted JSON payload has validation errors. It must be changed before it can be \nsucessfully re-submitted. Individual errors are provided in a map that is keyed to the \nJSON object structure. \n",
      "schema": {
        "$ref": "#/definitions/InvalidEntity"
      }
    },
    "401": {
      "description": "Authentication required (user not signed in).",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "410": {
      "description": "The version of the client making the request no longer has access to this service. The user \nmust update their app in order to continue using Bridge.\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "412": {
      "description": "User has signed in, but is not consented",
      "schema": {
        "$ref": "#/definitions/UserSessionInfo"
      }
    },
    "200_message": {
      "description": "OK",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "201_message": {
      "description": "Created",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "202_message": {
      "description": "Accepted",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "400_message": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin": {
      "description": "User cannot access this service because they are not an admin (no admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin_developer": {
      "description": "User cannot access this service because they are not a developer or admin (no developer or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_admin_worker": {
      "description": "User cannot access this service because they are not a worker process or admin (no worker or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer": {
      "description": "User cannot access this service because they are not a developer (no developer role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_researcher": {
      "description": "User cannot access this service because they are not a developer or researcher (no developer or researcher role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_researcher_admin": {
      "description": "User cannot access this service because they do not have an administrative role (no developer, worker or admin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_developer_worker": {
      "description": "User cannot access this service because they are not a developer or worker process \n(no developer or worker role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_researcher": {
      "description": "User cannot access this service because they are not a researcher (no researcher role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_superadmin": {
      "description": "User cannot access this service because they are not an superadmin (a cross-app administrator).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_superadmin_worker": {
      "description": "User cannot access this service because they are not a worker process or superadmin (no worker or superadmin role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_not_worker": {
      "description": "User cannot access this service because they are not a worker process (no worker role on account).\n",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  }
}

